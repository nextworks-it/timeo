package it.nextworks.nfvmano.timeo.vnfm.pnfm;


import it.nextworks.nfvmano.libs.common.exceptions.FailedOperationException;
import it.nextworks.nfvmano.libs.common.exceptions.MalformattedElementException;
import it.nextworks.nfvmano.libs.common.exceptions.MethodNotImplementedException;
import it.nextworks.nfvmano.libs.common.exceptions.NotExistingEntityException;
import it.nextworks.nfvmano.libs.common.messages.GeneralizedQueryRequest;
import it.nextworks.nfvmano.libs.orvnfm.vnflcm.interfaces.messages.ModifyVnfInformationRequest;
import it.nextworks.nfvmano.libs.orvnfm.vnflcm.interfaces.messages.OperateVnfRequest;

/**
 * This interface allows the NFVO to invoke PNF lifecycle management 
 * operations towards the VNFM, in this case acting as PNFM.
 * 
 * It must be implemented by a VNFM and invoked by the
 * NFVO core components to request PNF related operations.
 * 
 * The operations supported by the PNFM are a subset of the VNFM ones 
 * (as specified in REF IFA 007 v2.3.1 - 7.2),
 * since a PNF cannot be dynamically instantiated or scaled.
 * 
 * The PNF itself is considered as a "slice" of an entire PNF instance,
 * where the PNF instance is the equipment physically deployed, while
 * the PNF is the "part" of equipment which is used by a NS and it is 
 * described through the PNF info and identified through the PNF ID. 
 * 
 * Important note: 
 * - the PNF ID is generated by the system and it is the ID of the equipment "slice". 
 * This is the equivalent of the PNF INFO ID.
 * - the PNF instance ID is the ID of the equipment and it is defined by the admin.
 *  
 * 
 * The following operations are defined:
 * • Create PNF Identifier.
 * • Delete PNF Identifier.
 * • Query PNF.
 * • Operate PNF.
 * • Modify PNF Information. --> this is used for configuring the PNF
 * • Get Operation Status. --> this is the same of the VnfLcmProviderInterface
 * 
 * 
 * @author nextworks
 *
 */
public interface PnfLcmProviderInterface {

	/**
	 * This operation creates a PNF identifier, 
	 * and an associated instance of a PnfInfo information element,
	 * identified by that identifier. The PNF will be already in the INSTANTIATED state. 
	 * The method returns immediately the PNF ID that can be used 
	 * in subsequent lifecycle operations.
	 * 
	 * Mapped to OR-VNFM in IFA 007 v2.3.1 - 7.2.2
	 * 
	 * @param request request
	 * @return PNF instance identifier just created
	 * @throws MethodNotImplementedException if the method is not implemented
	 * @throws FailedOperationException if the operation fails for a generic reason
	 * @throws NotExistingEntityException if the VNFD is not found
	 * @throws MalformattedElementException if the request is malformatted
	 */
	public String createPnfIdentifier(CreatePnfIdentifierRequest request) 
			throws MethodNotImplementedException, FailedOperationException, NotExistingEntityException, MalformattedElementException;
	
	/**
	 * This operation deletes a PNF identifier and the associated instance 
	 * of a PnfInfo information element.
	 * 
	 * Mapped to OR-VNFM in IFA 007 v2.3.1 - 7.2.8
	 * 
	 * @param pnfId PNF ID to be deleted
	 * @throws MethodNotImplementedException if the method is not implemented
	 * @throws FailedOperationException if the operation fails for a generic reason
	 * @throws NotExistingEntityException if one of the entities in the request is not found
	 * @throws MalformattedElementException if the request is malformatted
	 */
	public void deletePnfIdentifier(String pnfId) 
			throws MethodNotImplementedException, FailedOperationException, NotExistingEntityException, MalformattedElementException;
	
	/**
	 * This operation provides information about PNFs. 
	 * The applicable PNFs can be chosen based on
	 * filtering criteria, and the information can be restricted 
	 * to selected attributes.
	 * 
	 * Mapped to OR-VNFM in IFA 007 v2.3.1 - 7.2.9
	 * 
	 * @param request request
	 * @return the PNF information
	 * @throws MethodNotImplementedException if the method is not implemented
	 * @throws FailedOperationException if the operation fails for a generic reason
	 * @throws NotExistingEntityException if one of the entities in the request is not found
	 * @throws MalformattedElementException if the request is malformatted
	 */
	public QueryPnfResponse queryPnf(GeneralizedQueryRequest request)
			throws MethodNotImplementedException, FailedOperationException, NotExistingEntityException, MalformattedElementException;
	
	/**
	 * This operation enables requesting to change the state of a PNF, 
	 * including starting and stopping the PNFs.
	 * 
	 * Mapped to OR-VNFM in IFA 007 v2.3.1 - 7.2.11
	 * 
	 * @param request request
	 * @return the ID of the operation
	 * @throws MethodNotImplementedException if the method is not implemented
	 * @throws FailedOperationException if the operation fails for a generic reason
	 * @throws NotExistingEntityException if one of the entities in the request is not found
	 * @throws MalformattedElementException if the request is malformatted
	 */
	public String operatePnf(OperateVnfRequest request)
			throws MethodNotImplementedException, FailedOperationException, NotExistingEntityException, MalformattedElementException;
	
	/**
	 * This operation allows updating information and configuration about a PNF.
	 * 
	 * Mapped to OR-VNFM in IFA 007 v2.3.1 - 7.2.12
	 * 
	 * @param request request
	 * @return the ID of the operation
	 * @throws MethodNotImplementedException if the method is not implemented
	 * @throws FailedOperationException if the operation fails for a generic reason
	 * @throws NotExistingEntityException if one of the entities in the request is not found
	 * @throws MalformattedElementException if the request is malformatted
	 */
	public String modifyPnfInformation(ModifyVnfInformationRequest request)
			throws MethodNotImplementedException, FailedOperationException, NotExistingEntityException, MalformattedElementException;
	
	
}
