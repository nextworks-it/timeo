/*
 * tapi-topology API
 * tapi-topology API generated from tapi-topology@2018-03-07.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BandwidthProfile;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.CapacityValue;
import io.swagger.client.model.ContextSchema;
import io.swagger.client.model.CostCharacteristic;
import io.swagger.client.model.GetLinkDetailsRPCInputSchema;
import io.swagger.client.model.GetLinkDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeDetailsRPCInputSchema;
import io.swagger.client.model.GetNodeDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCInputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCInputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetServiceInterfacePointListRPCOutputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCInputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCOutputSchema;
import io.swagger.client.model.GetTopologyListRPCOutputSchema;
import io.swagger.client.model.InterRuleGroup;
import io.swagger.client.model.LatencyCharacteristic;
import io.swagger.client.model.Link;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.NetworkTopologyService;
import io.swagger.client.model.Node;
import io.swagger.client.model.NodeEdgePoint;
import io.swagger.client.model.NodeRuleGroup;
import io.swagger.client.model.NodeRuleGroupRef;
import io.swagger.client.model.OwnedNodeEdgePointRef;
import io.swagger.client.model.ResilienceType;
import io.swagger.client.model.RiskCharacteristic;
import io.swagger.client.model.Rule;
import io.swagger.client.model.ServiceInterfacePoint;
import io.swagger.client.model.ServiceInterfacePointRef;
import io.swagger.client.model.Topology;
import io.swagger.client.model.TopologyRef;
import io.swagger.client.model.UpdateServiceInterfacePointRPCInputSchema;
import io.swagger.client.model.ValidationMechanism;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Create context by ID
     *
     * Create operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextByIdTest() throws ApiException {
        ContextSchema context = null;
        api.createContextById(context);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextNameNameByIdTest() throws ApiException {
        String valueName = null;
        NameAndValue name = null;
        api.createContextNameNameById(valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextServiceInterfacePointNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create service-interface-point by ID
     *
     * Create operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        ServiceInterfacePoint serviceInterfacePoint = null;
        api.createContextServiceInterfacePointServiceInterfacePointById(uuid, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Create get-link-details by ID
     *
     * Create operation of resource: get-link-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetLinkDetailsByIdTest() throws ApiException {
        GetLinkDetailsRPCInputSchema getLinkDetails = null;
        GetLinkDetailsRPCOutputSchema response = api.createGetLinkDetailsById(getLinkDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-node-details by ID
     *
     * Create operation of resource: get-node-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetNodeDetailsByIdTest() throws ApiException {
        GetNodeDetailsRPCInputSchema getNodeDetails = null;
        GetNodeDetailsRPCOutputSchema response = api.createGetNodeDetailsById(getNodeDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-node-edge-point-details by ID
     *
     * Create operation of resource: get-node-edge-point-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetNodeEdgePointDetailsByIdTest() throws ApiException {
        GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails = null;
        GetNodeEdgePointDetailsRPCOutputSchema response = api.createGetNodeEdgePointDetailsById(getNodeEdgePointDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-service-interface-point-details by ID
     *
     * Create operation of resource: get-service-interface-point-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetServiceInterfacePointDetailsByIdTest() throws ApiException {
        GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails = null;
        GetServiceInterfacePointDetailsRPCOutputSchema response = api.createGetServiceInterfacePointDetailsById(getServiceInterfacePointDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-service-interface-point-list by ID
     *
     * Create operation of resource: get-service-interface-point-list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetServiceInterfacePointListByIdTest() throws ApiException {
        GetServiceInterfacePointListRPCOutputSchema response = api.createGetServiceInterfacePointListById();

        // TODO: test validations
    }
    
    /**
     * Create get-topology-details by ID
     *
     * Create operation of resource: get-topology-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetTopologyDetailsByIdTest() throws ApiException {
        GetTopologyDetailsRPCInputSchema getTopologyDetails = null;
        GetTopologyDetailsRPCOutputSchema response = api.createGetTopologyDetailsById(getTopologyDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-topology-list by ID
     *
     * Create operation of resource: get-topology-list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetTopologyListByIdTest() throws ApiException {
        GetTopologyListRPCOutputSchema response = api.createGetTopologyListById();

        // TODO: test validations
    }
    
    /**
     * Create update-service-interface-point by ID
     *
     * Create operation of resource: update-service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUpdateServiceInterfacePointByIdTest() throws ApiException {
        UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint = null;
        api.createUpdateServiceInterfacePointById(updateServiceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Delete context by ID
     *
     * Delete operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextByIdTest() throws ApiException {
        api.deleteContextById();

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextNameNameByIdTest() throws ApiException {
        String valueName = null;
        api.deleteContextNameNameById(valueName);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        api.deleteContextServiceInterfacePointNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete service-interface-point by ID
     *
     * Delete operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextServiceInterfacePointServiceInterfacePointById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve context
     *
     * Retrieve operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTest() throws ApiException {
        ContextSchema response = api.retrieveContext();

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNameNameTest() throws ApiException {
        List<String> response = api.retrieveContextNameName();

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNameNameByIdTest() throws ApiException {
        String valueName = null;
        NameAndValue response = api.retrieveContextNameNameById(valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNwTopologyServiceNameNameTest() throws ApiException {
        List<String> response = api.retrieveContextNwTopologyServiceNameName();

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNwTopologyServiceNameNameByIdTest() throws ApiException {
        String valueName = null;
        NameAndValue response = api.retrieveContextNwTopologyServiceNameNameById(valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve nw-topology-service
     *
     * Retrieve operation of resource: nw-topology-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNwTopologyServiceNwTopologyServiceTest() throws ApiException {
        NetworkTopologyService response = api.retrieveContextNwTopologyServiceNwTopologyService();

        // TODO: test validations
    }
    
    /**
     * Retrieve topology
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNwTopologyServiceTopologyTopologyTest() throws ApiException {
        List<String> response = api.retrieveContextNwTopologyServiceTopologyTopology();

        // TODO: test validations
    }
    
    /**
     * Retrieve topology by ID
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNwTopologyServiceTopologyTopologyByIdTest() throws ApiException {
        String topologyId = null;
        TopologyRef response = api.retrieveContextNwTopologyServiceTopologyTopologyById(topologyId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        Capacity response = api.retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacity(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        BandwidthProfile response = api.retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextServiceInterfacePointNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextServiceInterfacePointNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointServiceInterfacePointTest() throws ApiException {
        List<String> response = api.retrieveContextServiceInterfacePointServiceInterfacePoint();

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point by ID
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        ServiceInterfacePoint response = api.retrieveContextServiceInterfacePointServiceInterfacePointById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        BandwidthProfile response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        Capacity response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        Capacity response = api.retrieveContextTopologyLinkAvailableCapacityAvailableCapacity(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyLinkCostCharacteristicCostCharacteristic(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextTopologyLinkCostCharacteristicCostCharacteristicById(uuid, linkUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristic(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(uuid, linkUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve link
     *
     * Retrieve operation of resource: link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkLinkTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextTopologyLinkLink(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve link by ID
     *
     * Retrieve operation of resource: link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkLinkByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        Link response = api.retrieveContextTopologyLinkLinkById(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkNameNameTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyLinkNameName(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkNameNameByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyLinkNameNameById(uuid, linkUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkNodeEdgePointNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyLinkNodeEdgePointNodeEdgePoint(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point by ID
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String topologyIdNodeIdOwnedNodeEdgePointId = null;
        OwnedNodeEdgePointRef response = api.retrieveContextTopologyLinkNodeEdgePointNodeEdgePointById(uuid, linkUuid, topologyIdNodeIdOwnedNodeEdgePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve resilience-type
     *
     * Retrieve operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkResilienceTypeResilienceTypeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        ResilienceType response = api.retrieveContextTopologyLinkResilienceTypeResilienceType(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristic(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic by ID
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic response = api.retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicById(uuid, linkUuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        Capacity response = api.retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve validation-mechanism
     *
     * Retrieve operation of resource: validation-mechanism
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkValidationMechanismValidationMechanismTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyLinkValidationMechanismValidationMechanism(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve validation-mechanism by ID
     *
     * Retrieve operation of resource: validation-mechanism
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String validationMechanism = null;
        ValidationMechanism response = api.retrieveContextTopologyLinkValidationMechanismValidationMechanismById(uuid, linkUuid, validationMechanism);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextTopologyNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point by ID
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String topologyIdNodeIdOwnedNodeEdgePointId = null;
        OwnedNodeEdgePointRef response = api.retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(uuid, nodeUuid, topologyIdNodeIdOwnedNodeEdgePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        Capacity response = api.retrieveContextTopologyNodeAvailableCapacityAvailableCapacity(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyNodeCostCharacteristicCostCharacteristic(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextTopologyNodeCostCharacteristicCostCharacteristicById(uuid, nodeUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve encap-topology
     *
     * Retrieve operation of resource: encap-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeEncapTopologyEncapTopologyTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        TopologyRef response = api.retrieveContextTopologyNodeEncapTopologyEncapTopology(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristic(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(uuid, nodeUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNameName(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyNodeNameNameById(uuid, nodeUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve node
     *
     * Retrieve operation of resource: node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextTopologyNodeNode(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node by ID
     *
     * Retrieve operation of resource: node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        Node response = api.retrieveContextTopologyNodeNodeById(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        Capacity response = api.retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve composed-rule-group
     *
     * Retrieve operation of resource: composed-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve composed-rule-group by ID
     *
     * Retrieve operation of resource: composed-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String topologyIdNodeIdNodeRuleGroupId = null;
        NodeRuleGroupRef response = api.retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve associated-node-rule-group
     *
     * Retrieve operation of resource: associated-node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve associated-node-rule-group by ID
     *
     * Retrieve operation of resource: associated-node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String topologyIdNodeIdNodeRuleGroupId = null;
        NodeRuleGroupRef response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        Capacity response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve inter-rule-group
     *
     * Retrieve operation of resource: inter-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve inter-rule-group by ID
     *
     * Retrieve operation of resource: inter-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        InterRuleGroup response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic by ID
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String localId = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule by ID
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String localId = null;
        Rule response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        Capacity response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupNameName(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyNodeNodeRuleGroupNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point by ID
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String topologyIdNodeIdOwnedNodeEdgePointId = null;
        OwnedNodeEdgePointRef response = api.retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdOwnedNodeEdgePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-rule-group
     *
     * Retrieve operation of resource: node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroup(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-rule-group by ID
     *
     * Retrieve operation of resource: node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        NodeRuleGroup response = api.retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic by ID
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic response = api.retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupRuleNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String localId = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupRuleNameName(uuid, nodeUuid, nodeRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupRuleRuleTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupRuleRule(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule by ID
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String localId = null;
        Rule response = api.retrieveContextTopologyNodeNodeRuleGroupRuleRuleById(uuid, nodeUuid, nodeRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        Capacity response = api.retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point by ID
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String topologyIdNodeIdOwnedNodeEdgePointId = null;
        OwnedNodeEdgePointRef response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyIdNodeIdOwnedNodeEdgePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        Capacity response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve mapped-service-interface-point
     *
     * Retrieve operation of resource: mapped-service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve mapped-service-interface-point by ID
     *
     * Retrieve operation of resource: mapped-service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String serviceInterfacePointId = null;
        ServiceInterfacePointRef response = api.retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointNameName(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointNameNameById(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve owned-node-edge-point
     *
     * Retrieve operation of resource: owned-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve owned-node-edge-point by ID
     *
     * Retrieve operation of resource: owned-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        NodeEdgePoint response = api.retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        Capacity response = api.retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        Capacity response = api.retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve topology
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyTopologyTest() throws ApiException {
        List<String> response = api.retrieveContextTopologyTopology();

        // TODO: test validations
    }
    
    /**
     * Retrieve topology by ID
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyTopologyByIdTest() throws ApiException {
        String uuid = null;
        Topology response = api.retrieveContextTopologyTopologyById(uuid);

        // TODO: test validations
    }
    
    /**
     * Update context by ID
     *
     * Update operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextByIdTest() throws ApiException {
        ContextSchema context = null;
        api.updateContextById(context);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextNameNameByIdTest() throws ApiException {
        String valueName = null;
        NameAndValue name = null;
        api.updateContextNameNameById(valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextServiceInterfacePointNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update service-interface-point by ID
     *
     * Update operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        ServiceInterfacePoint serviceInterfacePoint = null;
        api.updateContextServiceInterfacePointServiceInterfacePointById(uuid, serviceInterfacePoint);

        // TODO: test validations
    }
    
}
