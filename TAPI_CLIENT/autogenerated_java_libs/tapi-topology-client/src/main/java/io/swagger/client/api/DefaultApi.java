/*
 * tapi-topology API
 * tapi-topology API generated from tapi-topology@2018-03-07.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BandwidthProfile;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.CapacityValue;
import io.swagger.client.model.ContextSchema;
import io.swagger.client.model.CostCharacteristic;
import io.swagger.client.model.GetLinkDetailsRPCInputSchema;
import io.swagger.client.model.GetLinkDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeDetailsRPCInputSchema;
import io.swagger.client.model.GetNodeDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCInputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCInputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetServiceInterfacePointListRPCOutputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCInputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCOutputSchema;
import io.swagger.client.model.GetTopologyListRPCOutputSchema;
import io.swagger.client.model.InterRuleGroup;
import io.swagger.client.model.LatencyCharacteristic;
import io.swagger.client.model.Link;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.NetworkTopologyService;
import io.swagger.client.model.Node;
import io.swagger.client.model.NodeEdgePoint;
import io.swagger.client.model.NodeRuleGroup;
import io.swagger.client.model.NodeRuleGroupRef;
import io.swagger.client.model.OwnedNodeEdgePointRef;
import io.swagger.client.model.ResilienceType;
import io.swagger.client.model.RiskCharacteristic;
import io.swagger.client.model.Rule;
import io.swagger.client.model.ServiceInterfacePoint;
import io.swagger.client.model.ServiceInterfacePointRef;
import io.swagger.client.model.Topology;
import io.swagger.client.model.TopologyRef;
import io.swagger.client.model.UpdateServiceInterfacePointRPCInputSchema;
import io.swagger.client.model.ValidationMechanism;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createContextById
     * @param context contextbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextByIdCall(ContextSchema context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = context;

        // create path and map variables
        String localVarPath = "/config/context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextByIdValidateBeforeCall(ContextSchema context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling createContextById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextByIdCall(context, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create context by ID
     * Create operation of resource: context
     * @param context contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextById(ContextSchema context) throws ApiException {
        createContextByIdWithHttpInfo(context);
    }

    /**
     * Create context by ID
     * Create operation of resource: context
     * @param context contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextByIdWithHttpInfo(ContextSchema context) throws ApiException {
        com.squareup.okhttp.Call call = createContextByIdValidateBeforeCall(context, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create context by ID (asynchronously)
     * Create operation of resource: context
     * @param context contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextByIdAsync(ContextSchema context, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextByIdValidateBeforeCall(context, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextNameNameById
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextNameNameByIdCall(String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/name/{value_name}/"
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextNameNameByIdValidateBeforeCall(String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextNameNameByIdCall(valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextNameNameById(String valueName, NameAndValue name) throws ApiException {
        createContextNameNameByIdWithHttpInfo(valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextNameNameByIdWithHttpInfo(String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextNameNameByIdValidateBeforeCall(valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextNameNameByIdAsync(String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextNameNameByIdValidateBeforeCall(valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextServiceInterfacePointNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextServiceInterfacePointNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextServiceInterfacePointNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        createContextServiceInterfacePointNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextServiceInterfacePointNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextServiceInterfacePointServiceInterfacePointByIdCall(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling createContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, serviceInterfacePoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextServiceInterfacePointServiceInterfacePointById(String uuid, ServiceInterfacePoint serviceInterfacePoint) throws ApiException {
        createContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, serviceInterfacePoint);
    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, ServiceInterfacePoint serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create service-interface-point by ID (asynchronously)
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createGetLinkDetailsById
     * @param getLinkDetails get-link-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetLinkDetailsByIdCall(GetLinkDetailsRPCInputSchema getLinkDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getLinkDetails;

        // create path and map variables
        String localVarPath = "/operations/get-link-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetLinkDetailsByIdValidateBeforeCall(GetLinkDetailsRPCInputSchema getLinkDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getLinkDetails' is set
        if (getLinkDetails == null) {
            throw new ApiException("Missing the required parameter 'getLinkDetails' when calling createGetLinkDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetLinkDetailsByIdCall(getLinkDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-link-details by ID
     * Create operation of resource: get-link-details
     * @param getLinkDetails get-link-detailsbody object (required)
     * @return GetLinkDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetLinkDetailsRPCOutputSchema createGetLinkDetailsById(GetLinkDetailsRPCInputSchema getLinkDetails) throws ApiException {
        ApiResponse<GetLinkDetailsRPCOutputSchema> resp = createGetLinkDetailsByIdWithHttpInfo(getLinkDetails);
        return resp.getData();
    }

    /**
     * Create get-link-details by ID
     * Create operation of resource: get-link-details
     * @param getLinkDetails get-link-detailsbody object (required)
     * @return ApiResponse&lt;GetLinkDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetLinkDetailsRPCOutputSchema> createGetLinkDetailsByIdWithHttpInfo(GetLinkDetailsRPCInputSchema getLinkDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetLinkDetailsByIdValidateBeforeCall(getLinkDetails, null, null);
        Type localVarReturnType = new TypeToken<GetLinkDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-link-details by ID (asynchronously)
     * Create operation of resource: get-link-details
     * @param getLinkDetails get-link-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetLinkDetailsByIdAsync(GetLinkDetailsRPCInputSchema getLinkDetails, final ApiCallback<GetLinkDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetLinkDetailsByIdValidateBeforeCall(getLinkDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetLinkDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetNodeDetailsById
     * @param getNodeDetails get-node-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetNodeDetailsByIdCall(GetNodeDetailsRPCInputSchema getNodeDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getNodeDetails;

        // create path and map variables
        String localVarPath = "/operations/get-node-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetNodeDetailsByIdValidateBeforeCall(GetNodeDetailsRPCInputSchema getNodeDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getNodeDetails' is set
        if (getNodeDetails == null) {
            throw new ApiException("Missing the required parameter 'getNodeDetails' when calling createGetNodeDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetNodeDetailsByIdCall(getNodeDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-node-details by ID
     * Create operation of resource: get-node-details
     * @param getNodeDetails get-node-detailsbody object (required)
     * @return GetNodeDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetNodeDetailsRPCOutputSchema createGetNodeDetailsById(GetNodeDetailsRPCInputSchema getNodeDetails) throws ApiException {
        ApiResponse<GetNodeDetailsRPCOutputSchema> resp = createGetNodeDetailsByIdWithHttpInfo(getNodeDetails);
        return resp.getData();
    }

    /**
     * Create get-node-details by ID
     * Create operation of resource: get-node-details
     * @param getNodeDetails get-node-detailsbody object (required)
     * @return ApiResponse&lt;GetNodeDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetNodeDetailsRPCOutputSchema> createGetNodeDetailsByIdWithHttpInfo(GetNodeDetailsRPCInputSchema getNodeDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetNodeDetailsByIdValidateBeforeCall(getNodeDetails, null, null);
        Type localVarReturnType = new TypeToken<GetNodeDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-node-details by ID (asynchronously)
     * Create operation of resource: get-node-details
     * @param getNodeDetails get-node-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetNodeDetailsByIdAsync(GetNodeDetailsRPCInputSchema getNodeDetails, final ApiCallback<GetNodeDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetNodeDetailsByIdValidateBeforeCall(getNodeDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetNodeDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetNodeEdgePointDetailsById
     * @param getNodeEdgePointDetails get-node-edge-point-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetNodeEdgePointDetailsByIdCall(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getNodeEdgePointDetails;

        // create path and map variables
        String localVarPath = "/operations/get-node-edge-point-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetNodeEdgePointDetailsByIdValidateBeforeCall(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getNodeEdgePointDetails' is set
        if (getNodeEdgePointDetails == null) {
            throw new ApiException("Missing the required parameter 'getNodeEdgePointDetails' when calling createGetNodeEdgePointDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetNodeEdgePointDetailsByIdCall(getNodeEdgePointDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-node-edge-point-details by ID
     * Create operation of resource: get-node-edge-point-details
     * @param getNodeEdgePointDetails get-node-edge-point-detailsbody object (required)
     * @return GetNodeEdgePointDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetNodeEdgePointDetailsRPCOutputSchema createGetNodeEdgePointDetailsById(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails) throws ApiException {
        ApiResponse<GetNodeEdgePointDetailsRPCOutputSchema> resp = createGetNodeEdgePointDetailsByIdWithHttpInfo(getNodeEdgePointDetails);
        return resp.getData();
    }

    /**
     * Create get-node-edge-point-details by ID
     * Create operation of resource: get-node-edge-point-details
     * @param getNodeEdgePointDetails get-node-edge-point-detailsbody object (required)
     * @return ApiResponse&lt;GetNodeEdgePointDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetNodeEdgePointDetailsRPCOutputSchema> createGetNodeEdgePointDetailsByIdWithHttpInfo(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetNodeEdgePointDetailsByIdValidateBeforeCall(getNodeEdgePointDetails, null, null);
        Type localVarReturnType = new TypeToken<GetNodeEdgePointDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-node-edge-point-details by ID (asynchronously)
     * Create operation of resource: get-node-edge-point-details
     * @param getNodeEdgePointDetails get-node-edge-point-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetNodeEdgePointDetailsByIdAsync(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails, final ApiCallback<GetNodeEdgePointDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetNodeEdgePointDetailsByIdValidateBeforeCall(getNodeEdgePointDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetNodeEdgePointDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetServiceInterfacePointDetailsById
     * @param getServiceInterfacePointDetails get-service-interface-point-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetServiceInterfacePointDetailsByIdCall(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getServiceInterfacePointDetails;

        // create path and map variables
        String localVarPath = "/operations/get-service-interface-point-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetServiceInterfacePointDetailsByIdValidateBeforeCall(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getServiceInterfacePointDetails' is set
        if (getServiceInterfacePointDetails == null) {
            throw new ApiException("Missing the required parameter 'getServiceInterfacePointDetails' when calling createGetServiceInterfacePointDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetServiceInterfacePointDetailsByIdCall(getServiceInterfacePointDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-service-interface-point-details by ID
     * Create operation of resource: get-service-interface-point-details
     * @param getServiceInterfacePointDetails get-service-interface-point-detailsbody object (required)
     * @return GetServiceInterfacePointDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetServiceInterfacePointDetailsRPCOutputSchema createGetServiceInterfacePointDetailsById(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails) throws ApiException {
        ApiResponse<GetServiceInterfacePointDetailsRPCOutputSchema> resp = createGetServiceInterfacePointDetailsByIdWithHttpInfo(getServiceInterfacePointDetails);
        return resp.getData();
    }

    /**
     * Create get-service-interface-point-details by ID
     * Create operation of resource: get-service-interface-point-details
     * @param getServiceInterfacePointDetails get-service-interface-point-detailsbody object (required)
     * @return ApiResponse&lt;GetServiceInterfacePointDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetServiceInterfacePointDetailsRPCOutputSchema> createGetServiceInterfacePointDetailsByIdWithHttpInfo(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetServiceInterfacePointDetailsByIdValidateBeforeCall(getServiceInterfacePointDetails, null, null);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-service-interface-point-details by ID (asynchronously)
     * Create operation of resource: get-service-interface-point-details
     * @param getServiceInterfacePointDetails get-service-interface-point-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetServiceInterfacePointDetailsByIdAsync(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails, final ApiCallback<GetServiceInterfacePointDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetServiceInterfacePointDetailsByIdValidateBeforeCall(getServiceInterfacePointDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetServiceInterfacePointListById
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetServiceInterfacePointListByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/get-service-interface-point-list/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetServiceInterfacePointListByIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createGetServiceInterfacePointListByIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-service-interface-point-list by ID
     * Create operation of resource: get-service-interface-point-list
     * @return GetServiceInterfacePointListRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetServiceInterfacePointListRPCOutputSchema createGetServiceInterfacePointListById() throws ApiException {
        ApiResponse<GetServiceInterfacePointListRPCOutputSchema> resp = createGetServiceInterfacePointListByIdWithHttpInfo();
        return resp.getData();
    }

    /**
     * Create get-service-interface-point-list by ID
     * Create operation of resource: get-service-interface-point-list
     * @return ApiResponse&lt;GetServiceInterfacePointListRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetServiceInterfacePointListRPCOutputSchema> createGetServiceInterfacePointListByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = createGetServiceInterfacePointListByIdValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointListRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-service-interface-point-list by ID (asynchronously)
     * Create operation of resource: get-service-interface-point-list
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetServiceInterfacePointListByIdAsync(final ApiCallback<GetServiceInterfacePointListRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetServiceInterfacePointListByIdValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointListRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetTopologyDetailsById
     * @param getTopologyDetails get-topology-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetTopologyDetailsByIdCall(GetTopologyDetailsRPCInputSchema getTopologyDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getTopologyDetails;

        // create path and map variables
        String localVarPath = "/operations/get-topology-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetTopologyDetailsByIdValidateBeforeCall(GetTopologyDetailsRPCInputSchema getTopologyDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getTopologyDetails' is set
        if (getTopologyDetails == null) {
            throw new ApiException("Missing the required parameter 'getTopologyDetails' when calling createGetTopologyDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetTopologyDetailsByIdCall(getTopologyDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-topology-details by ID
     * Create operation of resource: get-topology-details
     * @param getTopologyDetails get-topology-detailsbody object (required)
     * @return GetTopologyDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTopologyDetailsRPCOutputSchema createGetTopologyDetailsById(GetTopologyDetailsRPCInputSchema getTopologyDetails) throws ApiException {
        ApiResponse<GetTopologyDetailsRPCOutputSchema> resp = createGetTopologyDetailsByIdWithHttpInfo(getTopologyDetails);
        return resp.getData();
    }

    /**
     * Create get-topology-details by ID
     * Create operation of resource: get-topology-details
     * @param getTopologyDetails get-topology-detailsbody object (required)
     * @return ApiResponse&lt;GetTopologyDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTopologyDetailsRPCOutputSchema> createGetTopologyDetailsByIdWithHttpInfo(GetTopologyDetailsRPCInputSchema getTopologyDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetTopologyDetailsByIdValidateBeforeCall(getTopologyDetails, null, null);
        Type localVarReturnType = new TypeToken<GetTopologyDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-topology-details by ID (asynchronously)
     * Create operation of resource: get-topology-details
     * @param getTopologyDetails get-topology-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetTopologyDetailsByIdAsync(GetTopologyDetailsRPCInputSchema getTopologyDetails, final ApiCallback<GetTopologyDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetTopologyDetailsByIdValidateBeforeCall(getTopologyDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTopologyDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetTopologyListById
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetTopologyListByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/get-topology-list/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetTopologyListByIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createGetTopologyListByIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-topology-list by ID
     * Create operation of resource: get-topology-list
     * @return GetTopologyListRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTopologyListRPCOutputSchema createGetTopologyListById() throws ApiException {
        ApiResponse<GetTopologyListRPCOutputSchema> resp = createGetTopologyListByIdWithHttpInfo();
        return resp.getData();
    }

    /**
     * Create get-topology-list by ID
     * Create operation of resource: get-topology-list
     * @return ApiResponse&lt;GetTopologyListRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTopologyListRPCOutputSchema> createGetTopologyListByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = createGetTopologyListByIdValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetTopologyListRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-topology-list by ID (asynchronously)
     * Create operation of resource: get-topology-list
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetTopologyListByIdAsync(final ApiCallback<GetTopologyListRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetTopologyListByIdValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTopologyListRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUpdateServiceInterfacePointById
     * @param updateServiceInterfacePoint update-service-interface-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUpdateServiceInterfacePointByIdCall(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateServiceInterfacePoint;

        // create path and map variables
        String localVarPath = "/operations/update-service-interface-point/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUpdateServiceInterfacePointByIdValidateBeforeCall(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateServiceInterfacePoint' is set
        if (updateServiceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'updateServiceInterfacePoint' when calling createUpdateServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createUpdateServiceInterfacePointByIdCall(updateServiceInterfacePoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create update-service-interface-point by ID
     * Create operation of resource: update-service-interface-point
     * @param updateServiceInterfacePoint update-service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createUpdateServiceInterfacePointById(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint) throws ApiException {
        createUpdateServiceInterfacePointByIdWithHttpInfo(updateServiceInterfacePoint);
    }

    /**
     * Create update-service-interface-point by ID
     * Create operation of resource: update-service-interface-point
     * @param updateServiceInterfacePoint update-service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createUpdateServiceInterfacePointByIdWithHttpInfo(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = createUpdateServiceInterfacePointByIdValidateBeforeCall(updateServiceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create update-service-interface-point by ID (asynchronously)
     * Create operation of resource: update-service-interface-point
     * @param updateServiceInterfacePoint update-service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUpdateServiceInterfacePointByIdAsync(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUpdateServiceInterfacePointByIdValidateBeforeCall(updateServiceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextById
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextByIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteContextByIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete context by ID
     * Delete operation of resource: context
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextById() throws ApiException {
        deleteContextByIdWithHttpInfo();
    }

    /**
     * Delete context by ID
     * Delete operation of resource: context
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteContextByIdValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete context by ID (asynchronously)
     * Delete operation of resource: context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextByIdAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextByIdValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextNameNameById
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextNameNameByIdCall(String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/name/{value_name}/"
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextNameNameByIdValidateBeforeCall(String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextNameNameByIdCall(valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextNameNameById(String valueName) throws ApiException {
        deleteContextNameNameByIdWithHttpInfo(valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextNameNameByIdWithHttpInfo(String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextNameNameByIdValidateBeforeCall(valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextNameNameByIdAsync(String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextNameNameByIdValidateBeforeCall(valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextServiceInterfacePointNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextServiceInterfacePointNameNameById(String uuid, String valueName) throws ApiException {
        deleteContextServiceInterfacePointNameNameByIdWithHttpInfo(uuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextServiceInterfacePointNameNameByIdAsync(String uuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextServiceInterfacePointServiceInterfacePointByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextServiceInterfacePointServiceInterfacePointById(String uuid) throws ApiException {
        deleteContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid);
    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete service-interface-point by ID (asynchronously)
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for retrieveContext
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve context
     * Retrieve operation of resource: context
     * @return ContextSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContextSchema retrieveContext() throws ApiException {
        ApiResponse<ContextSchema> resp = retrieveContextWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve context
     * Retrieve operation of resource: context
     * @return ApiResponse&lt;ContextSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContextSchema> retrieveContextWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ContextSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve context (asynchronously)
     * Retrieve operation of resource: context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextAsync(final ApiCallback<ContextSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContextSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextNameName
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNameNameCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/name/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextNameNameValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextNameNameCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextNameName() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextNameNameWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextNameNameWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextNameNameValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNameNameAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextNameNameValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextNameNameById
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNameNameByIdCall(String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/name/{value_name}/"
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextNameNameByIdValidateBeforeCall(String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextNameNameByIdCall(valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextNameNameById(String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextNameNameByIdWithHttpInfo(valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextNameNameByIdWithHttpInfo(String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextNameNameByIdValidateBeforeCall(valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNameNameByIdAsync(String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextNameNameByIdValidateBeforeCall(valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextNwTopologyServiceNameName
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceNameNameCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/nw-topology-service/name/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextNwTopologyServiceNameNameValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNameNameCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextNwTopologyServiceNameName() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextNwTopologyServiceNameNameWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextNwTopologyServiceNameNameWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNameNameValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceNameNameAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNameNameValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextNwTopologyServiceNameNameById
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceNameNameByIdCall(String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/nw-topology-service/name/{value_name}/"
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextNwTopologyServiceNameNameByIdValidateBeforeCall(String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextNwTopologyServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNameNameByIdCall(valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextNwTopologyServiceNameNameById(String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextNwTopologyServiceNameNameByIdWithHttpInfo(valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextNwTopologyServiceNameNameByIdWithHttpInfo(String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNameNameByIdValidateBeforeCall(valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceNameNameByIdAsync(String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNameNameByIdValidateBeforeCall(valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextNwTopologyServiceNwTopologyService
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceNwTopologyServiceCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/nw-topology-service/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextNwTopologyServiceNwTopologyServiceValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNwTopologyServiceCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve nw-topology-service
     * Retrieve operation of resource: nw-topology-service
     * @return NetworkTopologyService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkTopologyService retrieveContextNwTopologyServiceNwTopologyService() throws ApiException {
        ApiResponse<NetworkTopologyService> resp = retrieveContextNwTopologyServiceNwTopologyServiceWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve nw-topology-service
     * Retrieve operation of resource: nw-topology-service
     * @return ApiResponse&lt;NetworkTopologyService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkTopologyService> retrieveContextNwTopologyServiceNwTopologyServiceWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNwTopologyServiceValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<NetworkTopologyService>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve nw-topology-service (asynchronously)
     * Retrieve operation of resource: nw-topology-service
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceNwTopologyServiceAsync(final ApiCallback<NetworkTopologyService> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNwTopologyServiceValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkTopologyService>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextNwTopologyServiceTopologyTopology
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceTopologyTopologyCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/nw-topology-service/topology/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextNwTopologyServiceTopologyTopologyValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceTopologyTopologyCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve topology
     * Retrieve operation of resource: topology
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextNwTopologyServiceTopologyTopology() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextNwTopologyServiceTopologyTopologyWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve topology
     * Retrieve operation of resource: topology
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextNwTopologyServiceTopologyTopologyWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceTopologyTopologyValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve topology (asynchronously)
     * Retrieve operation of resource: topology
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceTopologyTopologyAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceTopologyTopologyValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextNwTopologyServiceTopologyTopologyById
     * @param topologyId ID of topology_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceTopologyTopologyByIdCall(String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/nw-topology-service/topology/{topology_id}/"
            .replaceAll("\\{" + "topology_id" + "\\}", apiClient.escapeString(topologyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextNwTopologyServiceTopologyTopologyByIdValidateBeforeCall(String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topologyId' is set
        if (topologyId == null) {
            throw new ApiException("Missing the required parameter 'topologyId' when calling retrieveContextNwTopologyServiceTopologyTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceTopologyTopologyByIdCall(topologyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve topology by ID
     * Retrieve operation of resource: topology
     * @param topologyId ID of topology_id (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextNwTopologyServiceTopologyTopologyById(String topologyId) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextNwTopologyServiceTopologyTopologyByIdWithHttpInfo(topologyId);
        return resp.getData();
    }

    /**
     * Retrieve topology by ID
     * Retrieve operation of resource: topology
     * @param topologyId ID of topology_id (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextNwTopologyServiceTopologyTopologyByIdWithHttpInfo(String topologyId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceTopologyTopologyByIdValidateBeforeCall(topologyId, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve topology by ID (asynchronously)
     * Retrieve operation of resource: topology
     * @param topologyId ID of topology_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceTopologyTopologyByIdAsync(String topologyId, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceTopologyTopologyByIdValidateBeforeCall(topologyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacity(String uuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityAsync(String uuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(String uuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextServiceInterfacePointNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextServiceInterfacePointNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextServiceInterfacePointNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextServiceInterfacePointNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextServiceInterfacePointNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointServiceInterfacePoint
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextServiceInterfacePointServiceInterfacePoint() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextServiceInterfacePointServiceInterfacePointWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextServiceInterfacePointServiceInterfacePointWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve service-interface-point (asynchronously)
     * Retrieve operation of resource: service-interface-point
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve service-interface-point by ID
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @return ServiceInterfacePoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInterfacePoint retrieveContextServiceInterfacePointServiceInterfacePointById(String uuid) throws ApiException {
        ApiResponse<ServiceInterfacePoint> resp = retrieveContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve service-interface-point by ID
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;ServiceInterfacePoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInterfacePoint> retrieveContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<ServiceInterfacePoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve service-interface-point by ID (asynchronously)
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, final ApiCallback<ServiceInterfacePoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInterfacePoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(String uuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityAvailableCapacityCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityAvailableCapacityCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyLinkAvailableCapacityAvailableCapacity(String uuid, String linkUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyLinkAvailableCapacityAvailableCapacityWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyLinkAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityAvailableCapacityAsync(String uuid, String linkUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String linkUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String linkUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkCostCharacteristicCostCharacteristicCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyLinkCostCharacteristicCostCharacteristic(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyLinkCostCharacteristicCostCharacteristicWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkCostCharacteristicCostCharacteristicAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdCall(String uuid, String linkUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String linkUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextTopologyLinkCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdCall(uuid, linkUuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextTopologyLinkCostCharacteristicCostCharacteristicById(String uuid, String linkUuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, linkUuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String linkUuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, linkUuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdAsync(String uuid, String linkUuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, linkUuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristic(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String linkUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String linkUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, linkUuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(String uuid, String linkUuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, linkUuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String linkUuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, linkUuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String linkUuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, linkUuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkLink
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLinkCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkLinkValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkLink(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLinkCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve link
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyLinkLink(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyLinkLinkWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve link
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyLinkLinkWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLinkValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve link (asynchronously)
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLinkAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLinkValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkLinkById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLinkByIdCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkLinkByIdValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkLinkById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkLinkById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLinkByIdCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve link by ID
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return Link
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Link retrieveContextTopologyLinkLinkById(String uuid, String linkUuid) throws ApiException {
        ApiResponse<Link> resp = retrieveContextTopologyLinkLinkByIdWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve link by ID
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;Link&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Link> retrieveContextTopologyLinkLinkByIdWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLinkByIdValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<Link>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve link by ID (asynchronously)
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLinkByIdAsync(String uuid, String linkUuid, final ApiCallback<Link> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLinkByIdValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Link>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkNameName
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNameNameCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkNameNameValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkNameName(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNameNameCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyLinkNameName(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyLinkNameNameWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyLinkNameNameWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNameNameValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNameNameAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNameNameValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkNameNameById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNameNameByIdCall(String uuid, String linkUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkNameNameByIdValidateBeforeCall(String uuid, String linkUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkNameNameById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyLinkNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNameNameByIdCall(uuid, linkUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyLinkNameNameById(String uuid, String linkUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyLinkNameNameByIdWithHttpInfo(uuid, linkUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyLinkNameNameByIdWithHttpInfo(String uuid, String linkUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNameNameByIdValidateBeforeCall(uuid, linkUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNameNameByIdAsync(String uuid, String linkUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNameNameByIdValidateBeforeCall(uuid, linkUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkNodeEdgePointNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNodeEdgePointNodeEdgePointCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkNodeEdgePointNodeEdgePointValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkNodeEdgePointNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkNodeEdgePointNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-edge-point
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyLinkNodeEdgePointNodeEdgePoint(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve node-edge-point
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyLinkNodeEdgePointNodeEdgePointWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-edge-point (asynchronously)
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNodeEdgePointNodeEdgePointAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkNodeEdgePointNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdCall(String uuid, String linkUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/node-edge-point/{topology_id node_id owned_node_edge_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdValidateBeforeCall(String uuid, String linkUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkNodeEdgePointNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkNodeEdgePointNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' when calling retrieveContextTopologyLinkNodeEdgePointNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdCall(uuid, linkUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-edge-point by ID
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return OwnedNodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointRef retrieveContextTopologyLinkNodeEdgePointNodeEdgePointById(String uuid, String linkUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        ApiResponse<OwnedNodeEdgePointRef> resp = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdWithHttpInfo(uuid, linkUuid, topologyIdNodeIdOwnedNodeEdgePointId);
        return resp.getData();
    }

    /**
     * Retrieve node-edge-point by ID
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointRef> retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdWithHttpInfo(String uuid, String linkUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdValidateBeforeCall(uuid, linkUuid, topologyIdNodeIdOwnedNodeEdgePointId, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdAsync(String uuid, String linkUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ApiCallback<OwnedNodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdValidateBeforeCall(uuid, linkUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkResilienceTypeResilienceType
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkResilienceTypeResilienceTypeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/resilience-type/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkResilienceTypeResilienceTypeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkResilienceTypeResilienceType(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkResilienceTypeResilienceType(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkResilienceTypeResilienceTypeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ResilienceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResilienceType retrieveContextTopologyLinkResilienceTypeResilienceType(String uuid, String linkUuid) throws ApiException {
        ApiResponse<ResilienceType> resp = retrieveContextTopologyLinkResilienceTypeResilienceTypeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;ResilienceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResilienceType> retrieveContextTopologyLinkResilienceTypeResilienceTypeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkResilienceTypeResilienceTypeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve resilience-type (asynchronously)
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkResilienceTypeResilienceTypeAsync(String uuid, String linkUuid, final ApiCallback<ResilienceType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkResilienceTypeResilienceTypeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/risk-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristic(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdCall(String uuid, String linkUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/risk-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(String uuid, String linkUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdCall(uuid, linkUuid, riskCharacteristicName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return RiskCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RiskCharacteristic retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicById(String uuid, String linkUuid, String riskCharacteristicName) throws ApiException {
        ApiResponse<RiskCharacteristic> resp = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(uuid, linkUuid, riskCharacteristicName);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;RiskCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RiskCharacteristic> retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(String uuid, String linkUuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, linkUuid, riskCharacteristicName, null, null);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic by ID (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdAsync(String uuid, String linkUuid, String riskCharacteristicName, final ApiCallback<RiskCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, linkUuid, riskCharacteristicName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String linkUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String linkUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity(String uuid, String linkUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String linkUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkValidationMechanismValidationMechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkValidationMechanismValidationMechanismCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/validation-mechanism/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkValidationMechanismValidationMechanismValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkValidationMechanismValidationMechanism(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkValidationMechanismValidationMechanism(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkValidationMechanismValidationMechanismCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve validation-mechanism
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyLinkValidationMechanismValidationMechanism(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyLinkValidationMechanismValidationMechanismWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve validation-mechanism
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyLinkValidationMechanismValidationMechanismWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkValidationMechanismValidationMechanismValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve validation-mechanism (asynchronously)
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkValidationMechanismValidationMechanismAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkValidationMechanismValidationMechanismValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkValidationMechanismValidationMechanismById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param validationMechanism ID of validation_mechanism (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdCall(String uuid, String linkUuid, String validationMechanism, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/validation-mechanism/{validation_mechanism}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "validation_mechanism" + "\\}", apiClient.escapeString(validationMechanism.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdValidateBeforeCall(String uuid, String linkUuid, String validationMechanism, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkValidationMechanismValidationMechanismById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkValidationMechanismValidationMechanismById(Async)");
        }
        
        // verify the required parameter 'validationMechanism' is set
        if (validationMechanism == null) {
            throw new ApiException("Missing the required parameter 'validationMechanism' when calling retrieveContextTopologyLinkValidationMechanismValidationMechanismById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdCall(uuid, linkUuid, validationMechanism, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve validation-mechanism by ID
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param validationMechanism ID of validation_mechanism (required)
     * @return ValidationMechanism
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationMechanism retrieveContextTopologyLinkValidationMechanismValidationMechanismById(String uuid, String linkUuid, String validationMechanism) throws ApiException {
        ApiResponse<ValidationMechanism> resp = retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdWithHttpInfo(uuid, linkUuid, validationMechanism);
        return resp.getData();
    }

    /**
     * Retrieve validation-mechanism by ID
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param validationMechanism ID of validation_mechanism (required)
     * @return ApiResponse&lt;ValidationMechanism&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationMechanism> retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdWithHttpInfo(String uuid, String linkUuid, String validationMechanism) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdValidateBeforeCall(uuid, linkUuid, validationMechanism, null, null);
        Type localVarReturnType = new TypeToken<ValidationMechanism>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve validation-mechanism by ID (asynchronously)
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param validationMechanism ID of validation_mechanism (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdAsync(String uuid, String linkUuid, String validationMechanism, final ApiCallback<ValidationMechanism> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdValidateBeforeCall(uuid, linkUuid, validationMechanism, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationMechanism>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/aggregated-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-node-edge-point
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-node-edge-point
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-node-edge-point (asynchronously)
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdCall(String uuid, String nodeUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/aggregated-node-edge-point/{topology_id node_id owned_node_edge_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(String uuid, String nodeUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' when calling retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdCall(uuid, nodeUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-node-edge-point by ID
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return OwnedNodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointRef retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(String uuid, String nodeUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        ApiResponse<OwnedNodeEdgePointRef> resp = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdWithHttpInfo(uuid, nodeUuid, topologyIdNodeIdOwnedNodeEdgePointId);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-node-edge-point by ID
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointRef> retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdWithHttpInfo(String uuid, String nodeUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, topologyIdNodeIdOwnedNodeEdgePointId, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdAsync(String uuid, String nodeUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ApiCallback<OwnedNodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityAvailableCapacityCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityAvailableCapacityCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeAvailableCapacityAvailableCapacity(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeAvailableCapacityAvailableCapacityWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityAvailableCapacityAsync(String uuid, String nodeUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeCostCharacteristicCostCharacteristicCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeCostCharacteristicCostCharacteristic(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeCostCharacteristicCostCharacteristicWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeCostCharacteristicCostCharacteristicAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdCall(String uuid, String nodeUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextTopologyNodeCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdCall(uuid, nodeUuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextTopologyNodeCostCharacteristicCostCharacteristicById(String uuid, String nodeUuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, nodeUuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdAsync(String uuid, String nodeUuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeEncapTopologyEncapTopology
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeEncapTopologyEncapTopologyCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/encap-topology/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeEncapTopologyEncapTopologyValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeEncapTopologyEncapTopology(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeEncapTopologyEncapTopology(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeEncapTopologyEncapTopologyCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve encap-topology
     * Retrieve operation of resource: encap-topology
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextTopologyNodeEncapTopologyEncapTopology(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextTopologyNodeEncapTopologyEncapTopologyWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve encap-topology
     * Retrieve operation of resource: encap-topology
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextTopologyNodeEncapTopologyEncapTopologyWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeEncapTopologyEncapTopologyValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve encap-topology (asynchronously)
     * Retrieve operation of resource: encap-topology
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeEncapTopologyEncapTopologyAsync(String uuid, String nodeUuid, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeEncapTopologyEncapTopologyValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristic(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String nodeUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, nodeUuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(String uuid, String nodeUuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, nodeUuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String nodeUuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNameNameCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNameNameValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNameNameCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNameName(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNameNameWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNameNameWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNameNameValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNameNameAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNameNameValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNameNameByIdCall(String uuid, String nodeUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyNodeNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNameNameByIdCall(uuid, nodeUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyNodeNameNameById(String uuid, String nodeUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyNodeNameNameByIdWithHttpInfo(uuid, nodeUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyNodeNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNameNameByIdValidateBeforeCall(uuid, nodeUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNameNameByIdAsync(String uuid, String nodeUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNameNameByIdValidateBeforeCall(uuid, nodeUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNode
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNode(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNode(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve node
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node (asynchronously)
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeByIdCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeByIdValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeByIdCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node by ID
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return Node
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Node retrieveContextTopologyNodeNodeById(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<Node> resp = retrieveContextTopologyNodeNodeByIdWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve node by ID
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Node> retrieveContextTopologyNodeNodeByIdWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeByIdValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node by ID (asynchronously)
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeByIdAsync(String uuid, String nodeUuid, final ApiCallback<Node> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeByIdValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/composed-rule-group/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve composed-rule-group
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve composed-rule-group
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve composed-rule-group (asynchronously)
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/composed-rule-group/{topology_id node_id node_rule_group_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id node_rule_group_id" + "\\}", apiClient.escapeString(topologyIdNodeIdNodeRuleGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdNodeRuleGroupId' is set
        if (topologyIdNodeIdNodeRuleGroupId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdNodeRuleGroupId' when calling retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve composed-rule-group by ID
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @return NodeRuleGroupRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRuleGroupRef retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId) throws ApiException {
        ApiResponse<NodeRuleGroupRef> resp = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId);
        return resp.getData();
    }

    /**
     * Retrieve composed-rule-group by ID
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @return ApiResponse&lt;NodeRuleGroupRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRuleGroupRef> retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId, null, null);
        Type localVarReturnType = new TypeToken<NodeRuleGroupRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve composed-rule-group by ID (asynchronously)
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId, final ApiCallback<NodeRuleGroupRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRuleGroupRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/associated-node-rule-group/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve associated-node-rule-group
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve associated-node-rule-group
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve associated-node-rule-group (asynchronously)
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/associated-node-rule-group/{topology_id node_id node_rule_group_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id node_rule_group_id" + "\\}", apiClient.escapeString(topologyIdNodeIdNodeRuleGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdNodeRuleGroupId' is set
        if (topologyIdNodeIdNodeRuleGroupId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdNodeRuleGroupId' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve associated-node-rule-group by ID
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @return NodeRuleGroupRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRuleGroupRef retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId) throws ApiException {
        ApiResponse<NodeRuleGroupRef> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId);
        return resp.getData();
    }

    /**
     * Retrieve associated-node-rule-group by ID
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @return ApiResponse&lt;NodeRuleGroupRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRuleGroupRef> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId, null, null);
        Type localVarReturnType = new TypeToken<NodeRuleGroupRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve associated-node-rule-group by ID (asynchronously)
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId, final ApiCallback<NodeRuleGroupRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRuleGroupRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve inter-rule-group
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve inter-rule-group
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve inter-rule-group (asynchronously)
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve inter-rule-group by ID
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return InterRuleGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InterRuleGroup retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<InterRuleGroup> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve inter-rule-group by ID
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;InterRuleGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InterRuleGroup> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<InterRuleGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve inter-rule-group by ID (asynchronously)
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<InterRuleGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InterRuleGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/risk-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/risk-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return RiskCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RiskCharacteristic retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String riskCharacteristicName) throws ApiException {
        ApiResponse<RiskCharacteristic> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;RiskCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RiskCharacteristic> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName, null, null);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic by ID (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String riskCharacteristicName, final ApiCallback<RiskCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/rule/{local_id}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/rule/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/rule/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve rule
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve rule
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve rule (asynchronously)
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/rule/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve rule by ID
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rule retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId) throws ApiException {
        ApiResponse<Rule> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve rule by ID
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rule> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve rule by ID (asynchronously)
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ApiCallback<Rule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNameNameCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNameNameValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNameName(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNameNameCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupNameName(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupNameNameWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupNameNameWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNameNameAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNameNameByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyNodeNodeRuleGroupNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNameNameByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyNodeNodeRuleGroupNameNameById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyNodeNodeRuleGroupNameNameByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyNodeNodeRuleGroupNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNameNameByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-edge-point
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve node-edge-point
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-edge-point (asynchronously)
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/node-edge-point/{topology_id node_id owned_node_edge_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' when calling retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-edge-point by ID
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return OwnedNodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointRef retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        ApiResponse<OwnedNodeEdgePointRef> resp = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdOwnedNodeEdgePointId);
        return resp.getData();
    }

    /**
     * Retrieve node-edge-point by ID
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointRef> retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdOwnedNodeEdgePointId, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ApiCallback<OwnedNodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroup
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-rule-group
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroup(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve node-rule-group
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-rule-group (asynchronously)
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-rule-group by ID
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return NodeRuleGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRuleGroup retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupById(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<NodeRuleGroup> resp = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve node-rule-group by ID
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;NodeRuleGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRuleGroup> retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeRuleGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-rule-group by ID (asynchronously)
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<NodeRuleGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRuleGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/risk-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/risk-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return RiskCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RiskCharacteristic retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String riskCharacteristicName) throws ApiException {
        ApiResponse<RiskCharacteristic> resp = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;RiskCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RiskCharacteristic> retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName, null, null);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic by ID (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String riskCharacteristicName, final ApiCallback<RiskCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupRuleNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleNameNameCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/rule/{local_id}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleNameNameValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupRuleNameName(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupRuleNameNameWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleNameNameAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/rule/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupRuleRule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleRuleCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/rule/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleRuleValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleRule(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleRule(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleRule(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleRuleCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve rule
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupRuleRule(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupRuleRuleWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve rule
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupRuleRuleWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleRuleValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve rule (asynchronously)
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleRuleAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleRuleValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupRuleRuleById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/rule/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyNodeNodeRuleGroupRuleRuleById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve rule by ID
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rule retrieveContextTopologyNodeNodeRuleGroupRuleRuleById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId) throws ApiException {
        ApiResponse<Rule> resp = retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve rule by ID
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rule> retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve rule by ID (asynchronously)
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ApiCallback<Rule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/aggregated-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-node-edge-point
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-node-edge-point
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-node-edge-point (asynchronously)
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/aggregated-node-edge-point/{topology_id node_id owned_node_edge_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-node-edge-point by ID
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return OwnedNodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointRef retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        ApiResponse<OwnedNodeEdgePointRef> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyIdNodeIdOwnedNodeEdgePointId);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-node-edge-point by ID
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointRef> retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyIdNodeIdOwnedNodeEdgePointId, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ApiCallback<OwnedNodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/mapped-service-interface-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve mapped-service-interface-point
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve mapped-service-interface-point
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve mapped-service-interface-point (asynchronously)
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param serviceInterfacePointId ID of service_interface_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String serviceInterfacePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/mapped-service-interface-point/{service_interface_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "service_interface_point_id" + "\\}", apiClient.escapeString(serviceInterfacePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String serviceInterfacePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointId' is set
        if (serviceInterfacePointId == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve mapped-service-interface-point by ID
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param serviceInterfacePointId ID of service_interface_point_id (required)
     * @return ServiceInterfacePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInterfacePointRef retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String serviceInterfacePointId) throws ApiException {
        ApiResponse<ServiceInterfacePointRef> resp = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointId);
        return resp.getData();
    }

    /**
     * Retrieve mapped-service-interface-point by ID
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param serviceInterfacePointId ID of service_interface_point_id (required)
     * @return ApiResponse&lt;ServiceInterfacePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInterfacePointRef> retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String serviceInterfacePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve mapped-service-interface-point by ID (asynchronously)
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param serviceInterfacePointId ID of service_interface_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String serviceInterfacePointId, final ApiCallback<ServiceInterfacePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointNameNameCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointNameNameValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointNameName(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointNameName(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointNameNameWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointNameNameAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointNameNameById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyNodeOwnedNodeEdgePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyNodeOwnedNodeEdgePointNameNameById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve owned-node-edge-point
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve owned-node-edge-point
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve owned-node-edge-point (asynchronously)
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve owned-node-edge-point by ID
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return NodeEdgePoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEdgePoint retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<NodeEdgePoint> resp = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve owned-node-edge-point by ID
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;NodeEdgePoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEdgePoint> retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeEdgePoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve owned-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<NodeEdgePoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEdgePoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String nodeUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyTopology
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyTopologyCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyTopologyValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextTopologyTopologyCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve topology
     * Retrieve operation of resource: topology
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyTopology() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyTopologyWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve topology
     * Retrieve operation of resource: topology
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyTopologyWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyTopologyValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve topology (asynchronously)
     * Retrieve operation of resource: topology
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyTopologyAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyTopologyValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyTopologyById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyTopologyByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyTopologyByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyTopologyByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve topology by ID
     * Retrieve operation of resource: topology
     * @param uuid ID of uuid (required)
     * @return Topology
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topology retrieveContextTopologyTopologyById(String uuid) throws ApiException {
        ApiResponse<Topology> resp = retrieveContextTopologyTopologyByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve topology by ID
     * Retrieve operation of resource: topology
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Topology&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topology> retrieveContextTopologyTopologyByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyTopologyByIdValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Topology>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve topology by ID (asynchronously)
     * Retrieve operation of resource: topology
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyTopologyByIdAsync(String uuid, final ApiCallback<Topology> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyTopologyByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topology>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContextById
     * @param context contextbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextByIdCall(ContextSchema context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = context;

        // create path and map variables
        String localVarPath = "/config/context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextByIdValidateBeforeCall(ContextSchema context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling updateContextById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextByIdCall(context, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update context by ID
     * Update operation of resource: context
     * @param context contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextById(ContextSchema context) throws ApiException {
        updateContextByIdWithHttpInfo(context);
    }

    /**
     * Update context by ID
     * Update operation of resource: context
     * @param context contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextByIdWithHttpInfo(ContextSchema context) throws ApiException {
        com.squareup.okhttp.Call call = updateContextByIdValidateBeforeCall(context, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update context by ID (asynchronously)
     * Update operation of resource: context
     * @param context contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextByIdAsync(ContextSchema context, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextByIdValidateBeforeCall(context, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextNameNameById
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextNameNameByIdCall(String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/name/{value_name}/"
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextNameNameByIdValidateBeforeCall(String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextNameNameByIdCall(valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextNameNameById(String valueName, NameAndValue name) throws ApiException {
        updateContextNameNameByIdWithHttpInfo(valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextNameNameByIdWithHttpInfo(String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextNameNameByIdValidateBeforeCall(valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextNameNameByIdAsync(String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextNameNameByIdValidateBeforeCall(valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextServiceInterfacePointNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextServiceInterfacePointNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextServiceInterfacePointNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        updateContextServiceInterfacePointNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextServiceInterfacePointNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextServiceInterfacePointServiceInterfacePointByIdCall(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling updateContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, serviceInterfacePoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextServiceInterfacePointServiceInterfacePointById(String uuid, ServiceInterfacePoint serviceInterfacePoint) throws ApiException {
        updateContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, serviceInterfacePoint);
    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, ServiceInterfacePoint serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update service-interface-point by ID (asynchronously)
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
