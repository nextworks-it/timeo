/*
 * tapi-path-computation API
 * tapi-path-computation API generated from tapi-path-computation@2018-03-07.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.LocalClass;
import io.swagger.client.model.NameAndValue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * PathObjectiveFunction
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-07T13:54:55.433+02:00")
public class PathObjectiveFunction {
  @SerializedName("local-id")
  private String localId = null;

  @SerializedName("name")
  private List<NameAndValue> name = null;

  /**
   * Gets or Sets concurrentPaths
   */
  @JsonAdapter(ConcurrentPathsEnum.Adapter.class)
  public enum ConcurrentPathsEnum {
    MINIMIZE("MINIMIZE"),
    
    MAXIMIZE("MAXIMIZE"),
    
    ALLOW("ALLOW"),
    
    DISALLOW("DISALLOW"),
    
    DONT_CARE("DONT_CARE");

    private String value;

    ConcurrentPathsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConcurrentPathsEnum fromValue(String text) {
      for (ConcurrentPathsEnum b : ConcurrentPathsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ConcurrentPathsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConcurrentPathsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConcurrentPathsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ConcurrentPathsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("concurrent-paths")
  private ConcurrentPathsEnum concurrentPaths = null;

  /**
   * Gets or Sets linkUtilization
   */
  @JsonAdapter(LinkUtilizationEnum.Adapter.class)
  public enum LinkUtilizationEnum {
    MINIMIZE("MINIMIZE"),
    
    MAXIMIZE("MAXIMIZE"),
    
    ALLOW("ALLOW"),
    
    DISALLOW("DISALLOW"),
    
    DONT_CARE("DONT_CARE");

    private String value;

    LinkUtilizationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LinkUtilizationEnum fromValue(String text) {
      for (LinkUtilizationEnum b : LinkUtilizationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LinkUtilizationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinkUtilizationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinkUtilizationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LinkUtilizationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("link-utilization")
  private LinkUtilizationEnum linkUtilization = null;

  /**
   * Gets or Sets bandwidthOptimization
   */
  @JsonAdapter(BandwidthOptimizationEnum.Adapter.class)
  public enum BandwidthOptimizationEnum {
    MINIMIZE("MINIMIZE"),
    
    MAXIMIZE("MAXIMIZE"),
    
    ALLOW("ALLOW"),
    
    DISALLOW("DISALLOW"),
    
    DONT_CARE("DONT_CARE");

    private String value;

    BandwidthOptimizationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BandwidthOptimizationEnum fromValue(String text) {
      for (BandwidthOptimizationEnum b : BandwidthOptimizationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BandwidthOptimizationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BandwidthOptimizationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BandwidthOptimizationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BandwidthOptimizationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("bandwidth-optimization")
  private BandwidthOptimizationEnum bandwidthOptimization = null;

  /**
   * Gets or Sets costOptimization
   */
  @JsonAdapter(CostOptimizationEnum.Adapter.class)
  public enum CostOptimizationEnum {
    MINIMIZE("MINIMIZE"),
    
    MAXIMIZE("MAXIMIZE"),
    
    ALLOW("ALLOW"),
    
    DISALLOW("DISALLOW"),
    
    DONT_CARE("DONT_CARE");

    private String value;

    CostOptimizationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CostOptimizationEnum fromValue(String text) {
      for (CostOptimizationEnum b : CostOptimizationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CostOptimizationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CostOptimizationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CostOptimizationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CostOptimizationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("cost-optimization")
  private CostOptimizationEnum costOptimization = null;

  /**
   * Gets or Sets resourceSharing
   */
  @JsonAdapter(ResourceSharingEnum.Adapter.class)
  public enum ResourceSharingEnum {
    MINIMIZE("MINIMIZE"),
    
    MAXIMIZE("MAXIMIZE"),
    
    ALLOW("ALLOW"),
    
    DISALLOW("DISALLOW"),
    
    DONT_CARE("DONT_CARE");

    private String value;

    ResourceSharingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceSharingEnum fromValue(String text) {
      for (ResourceSharingEnum b : ResourceSharingEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ResourceSharingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceSharingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceSharingEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ResourceSharingEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("resource-sharing")
  private ResourceSharingEnum resourceSharing = null;

  public PathObjectiveFunction localId(String localId) {
    this.localId = localId;
    return this;
  }

   /**
   * Get localId
   * @return localId
  **/
  @ApiModelProperty(value = "")
  public String getLocalId() {
    return localId;
  }

  public void setLocalId(String localId) {
    this.localId = localId;
  }

  public PathObjectiveFunction name(List<NameAndValue> name) {
    this.name = name;
    return this;
  }

  public PathObjectiveFunction addNameItem(NameAndValue nameItem) {
    if (this.name == null) {
      this.name = new ArrayList<NameAndValue>();
    }
    this.name.add(nameItem);
    return this;
  }

   /**
   * List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.
   * @return name
  **/
  @ApiModelProperty(value = "List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.")
  public List<NameAndValue> getName() {
    return name;
  }

  public void setName(List<NameAndValue> name) {
    this.name = name;
  }

  public PathObjectiveFunction concurrentPaths(ConcurrentPathsEnum concurrentPaths) {
    this.concurrentPaths = concurrentPaths;
    return this;
  }

   /**
   * Get concurrentPaths
   * @return concurrentPaths
  **/
  @ApiModelProperty(value = "")
  public ConcurrentPathsEnum getConcurrentPaths() {
    return concurrentPaths;
  }

  public void setConcurrentPaths(ConcurrentPathsEnum concurrentPaths) {
    this.concurrentPaths = concurrentPaths;
  }

  public PathObjectiveFunction linkUtilization(LinkUtilizationEnum linkUtilization) {
    this.linkUtilization = linkUtilization;
    return this;
  }

   /**
   * Get linkUtilization
   * @return linkUtilization
  **/
  @ApiModelProperty(value = "")
  public LinkUtilizationEnum getLinkUtilization() {
    return linkUtilization;
  }

  public void setLinkUtilization(LinkUtilizationEnum linkUtilization) {
    this.linkUtilization = linkUtilization;
  }

  public PathObjectiveFunction bandwidthOptimization(BandwidthOptimizationEnum bandwidthOptimization) {
    this.bandwidthOptimization = bandwidthOptimization;
    return this;
  }

   /**
   * Get bandwidthOptimization
   * @return bandwidthOptimization
  **/
  @ApiModelProperty(value = "")
  public BandwidthOptimizationEnum getBandwidthOptimization() {
    return bandwidthOptimization;
  }

  public void setBandwidthOptimization(BandwidthOptimizationEnum bandwidthOptimization) {
    this.bandwidthOptimization = bandwidthOptimization;
  }

  public PathObjectiveFunction costOptimization(CostOptimizationEnum costOptimization) {
    this.costOptimization = costOptimization;
    return this;
  }

   /**
   * Get costOptimization
   * @return costOptimization
  **/
  @ApiModelProperty(value = "")
  public CostOptimizationEnum getCostOptimization() {
    return costOptimization;
  }

  public void setCostOptimization(CostOptimizationEnum costOptimization) {
    this.costOptimization = costOptimization;
  }

  public PathObjectiveFunction resourceSharing(ResourceSharingEnum resourceSharing) {
    this.resourceSharing = resourceSharing;
    return this;
  }

   /**
   * Get resourceSharing
   * @return resourceSharing
  **/
  @ApiModelProperty(value = "")
  public ResourceSharingEnum getResourceSharing() {
    return resourceSharing;
  }

  public void setResourceSharing(ResourceSharingEnum resourceSharing) {
    this.resourceSharing = resourceSharing;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PathObjectiveFunction pathObjectiveFunction = (PathObjectiveFunction) o;
    return Objects.equals(this.localId, pathObjectiveFunction.localId) &&
        Objects.equals(this.name, pathObjectiveFunction.name) &&
        Objects.equals(this.concurrentPaths, pathObjectiveFunction.concurrentPaths) &&
        Objects.equals(this.linkUtilization, pathObjectiveFunction.linkUtilization) &&
        Objects.equals(this.bandwidthOptimization, pathObjectiveFunction.bandwidthOptimization) &&
        Objects.equals(this.costOptimization, pathObjectiveFunction.costOptimization) &&
        Objects.equals(this.resourceSharing, pathObjectiveFunction.resourceSharing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localId, name, concurrentPaths, linkUtilization, bandwidthOptimization, costOptimization, resourceSharing);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PathObjectiveFunction {\n");
    
    sb.append("    localId: ").append(toIndentedString(localId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    concurrentPaths: ").append(toIndentedString(concurrentPaths)).append("\n");
    sb.append("    linkUtilization: ").append(toIndentedString(linkUtilization)).append("\n");
    sb.append("    bandwidthOptimization: ").append(toIndentedString(bandwidthOptimization)).append("\n");
    sb.append("    costOptimization: ").append(toIndentedString(costOptimization)).append("\n");
    sb.append("    resourceSharing: ").append(toIndentedString(resourceSharing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

