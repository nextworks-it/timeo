/**
 * tapi-connectivity API
 * tapi-connectivity API generated from tapi-connectivity@2018-12-10.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.TopologyContext;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.NetworkTopologyService;
import io.swagger.client.model.TopologyRef;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.BandwidthProfile;
import io.swagger.client.model.CapacityValue;
import io.swagger.client.model.CostCharacteristic;
import io.swagger.client.model.LatencyCharacteristic;
import io.swagger.client.model.Link;
import io.swagger.client.model.NodeEdgePointRef;
import io.swagger.client.model.ResilienceType;
import io.swagger.client.model.RiskCharacteristic;
import io.swagger.client.model.ValidationMechanism;
import io.swagger.client.model.Node;
import io.swagger.client.model.NodeRuleGroupRef;
import io.swagger.client.model.InterRuleGroup;
import io.swagger.client.model.Rule;
import io.swagger.client.model.NodeRuleGroup;
import io.swagger.client.model.CepList;
import io.swagger.client.model.ConnectionEndPointRef;
import io.swagger.client.model.ConnectionEndPoint;
import io.swagger.client.model.ServiceInterfacePointRef;
import io.swagger.client.model.OwnedNodeEdgePointSchema;
import io.swagger.client.model.Topology;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TopologycontextApi
 */
public class TopologycontextApiTest {

    private final TopologycontextApi api = new TopologycontextApi();

    
    /**
     * Create topology-context by ID
     *
     * Create operation of resource: topology-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextTopologyContextTopologyContextByIdTest() throws ApiException {
        TopologyContext topologyContext = null;
        // api.createContextTopologyContextTopologyContextById(topologyContext);

        // TODO: test validations
    }
    
    /**
     * Delete topology-context by ID
     *
     * Delete operation of resource: topology-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextTopologyContextTopologyContextByIdTest() throws ApiException {
        // api.deleteContextTopologyContextTopologyContextById();

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextNwTopologyServiceNameNameTest() throws ApiException {
        // List<String> response = api.retrieveContextTopologyContextNwTopologyServiceNameName();

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextNwTopologyServiceNameNameByIdTest() throws ApiException {
        String valueName = null;
        // NameAndValue response = api.retrieveContextTopologyContextNwTopologyServiceNameNameById(valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve nw-topology-service
     *
     * Retrieve operation of resource: nw-topology-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextNwTopologyServiceNwTopologyServiceTest() throws ApiException {
        // NetworkTopologyService response = api.retrieveContextTopologyContextNwTopologyServiceNwTopologyService();

        // TODO: test validations
    }
    
    /**
     * Retrieve topology
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextNwTopologyServiceTopologyTopologyTest() throws ApiException {
        // List<String> response = api.retrieveContextTopologyContextNwTopologyServiceTopologyTopology();

        // TODO: test validations
    }
    
    /**
     * Retrieve topology by ID
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextNwTopologyServiceTopologyTopologyByIdTest() throws ApiException {
        String topologyUuid = null;
        // TopologyRef response = api.retrieveContextTopologyContextNwTopologyServiceTopologyTopologyById(topologyUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve topology-context
     *
     * Retrieve operation of resource: topology-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyContextTest() throws ApiException {
        // TopologyContext response = api.retrieveContextTopologyContextTopologyContext();

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // Capacity response = api.retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacity(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // BandwidthProfile response = api.retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristic(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String costName = null;
        // CostCharacteristic response = api.retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicById(uuid, linkUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristic(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String trafficPropertyName = null;
        // LatencyCharacteristic response = api.retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(uuid, linkUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve link
     *
     * Retrieve operation of resource: link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkLinkTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyLinkLink(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve link by ID
     *
     * Retrieve operation of resource: link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkLinkByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // Link response = api.retrieveContextTopologyContextTopologyLinkLinkById(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkNameNameTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyLinkNameName(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkNameNameByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextTopologyContextTopologyLinkNameNameById(uuid, linkUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePoint(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point by ID
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        // NodeEdgePointRef response = api.retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointById(uuid, linkUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve resilience-type
     *
     * Retrieve operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceTypeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // ResilienceType response = api.retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceType(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristic(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic by ID
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String riskCharacteristicName = null;
        // RiskCharacteristic response = api.retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicById(uuid, linkUuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // BandwidthProfile response = api.retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // Capacity response = api.retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve validation-mechanism
     *
     * Retrieve operation of resource: validation-mechanism
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanism(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve validation-mechanism by ID
     *
     * Retrieve operation of resource: validation-mechanism
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String validationMechanism = null;
        // ValidationMechanism response = api.retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismById(uuid, linkUuid, validationMechanism);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNameNameTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextTopologyContextTopologyNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point by ID
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        // NodeEdgePointRef response = api.retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(uuid, nodeUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // Capacity response = api.retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacity(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristic(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String costName = null;
        // CostCharacteristic response = api.retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicById(uuid, nodeUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve encap-topology
     *
     * Retrieve operation of resource: encap-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopologyTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // TopologyRef response = api.retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopology(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristic(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String trafficPropertyName = null;
        // LatencyCharacteristic response = api.retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(uuid, nodeUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNameName(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextTopologyContextTopologyNodeNameNameById(uuid, nodeUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve node
     *
     * Retrieve operation of resource: node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNode(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node by ID
     *
     * Retrieve operation of resource: node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // Node response = api.retrieveContextTopologyContextTopologyNodeNodeById(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // Capacity response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve composed-rule-group
     *
     * Retrieve operation of resource: composed-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve composed-rule-group by ID
     *
     * Retrieve operation of resource: composed-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String topologyUuidNodeUuidNodeRuleGroupUuid = null;
        // NodeRuleGroupRef response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid, topologyUuidNodeUuidNodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String costName = null;
        // CostCharacteristic response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve associated-node-rule-group
     *
     * Retrieve operation of resource: associated-node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve associated-node-rule-group by ID
     *
     * Retrieve operation of resource: associated-node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String topologyUuidNodeUuidNodeRuleGroupUuid = null;
        // NodeRuleGroupRef response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyUuidNodeUuidNodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // Capacity response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String costName = null;
        // CostCharacteristic response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve inter-rule-group
     *
     * Retrieve operation of resource: inter-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve inter-rule-group by ID
     *
     * Retrieve operation of resource: inter-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // InterRuleGroup response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String trafficPropertyName = null;
        // LatencyCharacteristic response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic by ID
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String riskCharacteristicName = null;
        // RiskCharacteristic response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String localId = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String localId = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule by ID
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String localId = null;
        // Rule response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // Capacity response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String trafficPropertyName = null;
        // LatencyCharacteristic response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameName(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point by ID
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        // NodeEdgePointRef response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(uuid, nodeUuid, nodeRuleGroupUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-rule-group
     *
     * Retrieve operation of resource: node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroup(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-rule-group by ID
     *
     * Retrieve operation of resource: node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // NodeRuleGroup response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic by ID
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String riskCharacteristicName = null;
        // RiskCharacteristic response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String localId = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameName(uuid, nodeUuid, nodeRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String localId = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRule(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule by ID
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String localId = null;
        // Rule response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleById(uuid, nodeUuid, nodeRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // Capacity response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point by ID
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        // NodeEdgePointRef response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // Capacity response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cep-list
     *
     * Retrieve operation of resource: cep-list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepListTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // CepList response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepList(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point by ID
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        // ConnectionEndPointRef response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point by ID
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        // NodeEdgePointRef response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPoint(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        // ConnectionEndPoint response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameName(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve parent-node-edge-point
     *
     * Retrieve operation of resource: parent-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        // NodeEdgePointRef response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve mapped-service-interface-point
     *
     * Retrieve operation of resource: mapped-service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve mapped-service-interface-point by ID
     *
     * Retrieve operation of resource: mapped-service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String serviceInterfacePointUuid = null;
        // ServiceInterfacePointRef response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameName(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameById(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve owned-node-edge-point
     *
     * Retrieve operation of resource: owned-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve owned-node-edge-point by ID
     *
     * Retrieve operation of resource: owned-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // OwnedNodeEdgePointSchema response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // Capacity response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // Capacity response = api.retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        // CapacityValue response = api.retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve topology
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyTopologyTest() throws ApiException {
        // List<String> response = api.retrieveContextTopologyContextTopologyTopology();

        // TODO: test validations
    }
    
    /**
     * Retrieve topology by ID
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyTopologyByIdTest() throws ApiException {
        String uuid = null;
        // Topology response = api.retrieveContextTopologyContextTopologyTopologyById(uuid);

        // TODO: test validations
    }
    
    /**
     * Update topology-context by ID
     *
     * Update operation of resource: topology-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextTopologyContextTopologyContextByIdTest() throws ApiException {
        TopologyContext topologyContext = null;
        // api.updateContextTopologyContextTopologyContextById(topologyContext);

        // TODO: test validations
    }
    
}
