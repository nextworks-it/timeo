/*
 * tapi-connectivity API
 * tapi-connectivity API generated from tapi-connectivity@2018-03-07.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.ConnectivityServiceRef;
import io.swagger.client.model.CostCharacteristic;
import io.swagger.client.model.LatencyCharacteristic;
import io.swagger.client.model.RouteComputePolicy;
import io.swagger.client.model.TimeRange;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ConnectivityConstraint
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-07T13:54:22.249+02:00")
public class ConnectivityConstraint {
  /**
   * Gets or Sets diversityPolicy
   */
  @JsonAdapter(DiversityPolicyEnum.Adapter.class)
  public enum DiversityPolicyEnum {
    SRLG("SRLG"),
    
    SRNG("SRNG"),
    
    SNG("SNG"),
    
    NODE("NODE"),
    
    LINK("LINK");

    private String value;

    DiversityPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiversityPolicyEnum fromValue(String text) {
      for (DiversityPolicyEnum b : DiversityPolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DiversityPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiversityPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiversityPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DiversityPolicyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("diversity-policy")
  private DiversityPolicyEnum diversityPolicy = null;

  /**
   * Gets or Sets routeObjectiveFunction
   */
  @JsonAdapter(RouteObjectiveFunctionEnum.Adapter.class)
  public enum RouteObjectiveFunctionEnum {
    MIN_WORK_ROUTE_HOP("MIN_WORK_ROUTE_HOP"),
    
    MIN_WORK_ROUTE_COST("MIN_WORK_ROUTE_COST"),
    
    MIN_WORK_ROUTE_LATENCY("MIN_WORK_ROUTE_LATENCY"),
    
    MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_HOP("MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_HOP"),
    
    MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_COST("MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_COST"),
    
    MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_LATENCY("MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_LATENCY"),
    
    LOAD_BALANCE_MAX_UNUSED_CAPACITY("LOAD_BALANCE_MAX_UNUSED_CAPACITY");

    private String value;

    RouteObjectiveFunctionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RouteObjectiveFunctionEnum fromValue(String text) {
      for (RouteObjectiveFunctionEnum b : RouteObjectiveFunctionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RouteObjectiveFunctionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RouteObjectiveFunctionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RouteObjectiveFunctionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RouteObjectiveFunctionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("route-objective-function")
  private RouteObjectiveFunctionEnum routeObjectiveFunction = null;

  /**
   * Gets or Sets serviceType
   */
  @JsonAdapter(ServiceTypeEnum.Adapter.class)
  public enum ServiceTypeEnum {
    POINT_TO_POINT_CONNECTIVITY("POINT_TO_POINT_CONNECTIVITY"),
    
    POINT_TO_MULTIPOINT_CONNECTIVITY("POINT_TO_MULTIPOINT_CONNECTIVITY"),
    
    MULTIPOINT_CONNECTIVITY("MULTIPOINT_CONNECTIVITY"),
    
    ROOTED_MULTIPOINT_CONNECTIVITY("ROOTED_MULTIPOINT_CONNECTIVITY");

    private String value;

    ServiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceTypeEnum fromValue(String text) {
      for (ServiceTypeEnum b : ServiceTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ServiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ServiceTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("service-type")
  private ServiceTypeEnum serviceType = null;

  @SerializedName("schedule")
  private TimeRange schedule = null;

  @SerializedName("requested-capacity")
  private Capacity requestedCapacity = null;

  @SerializedName("cost-characteristic")
  private List<CostCharacteristic> costCharacteristic = null;

  @SerializedName("is-exclusive")
  private Boolean isExclusive = null;

  @SerializedName("service-level")
  private String serviceLevel = null;

  @SerializedName("diversity-exclusion")
  private List<ConnectivityServiceRef> diversityExclusion = null;

  @SerializedName("latency-characteristic")
  private List<LatencyCharacteristic> latencyCharacteristic = null;

  @SerializedName("coroute-inclusion")
  private ConnectivityServiceRef corouteInclusion = null;

  public ConnectivityConstraint diversityPolicy(DiversityPolicyEnum diversityPolicy) {
    this.diversityPolicy = diversityPolicy;
    return this;
  }

   /**
   * Get diversityPolicy
   * @return diversityPolicy
  **/
  @ApiModelProperty(value = "")
  public DiversityPolicyEnum getDiversityPolicy() {
    return diversityPolicy;
  }

  public void setDiversityPolicy(DiversityPolicyEnum diversityPolicy) {
    this.diversityPolicy = diversityPolicy;
  }

  public ConnectivityConstraint routeObjectiveFunction(RouteObjectiveFunctionEnum routeObjectiveFunction) {
    this.routeObjectiveFunction = routeObjectiveFunction;
    return this;
  }

   /**
   * Get routeObjectiveFunction
   * @return routeObjectiveFunction
  **/
  @ApiModelProperty(value = "")
  public RouteObjectiveFunctionEnum getRouteObjectiveFunction() {
    return routeObjectiveFunction;
  }

  public void setRouteObjectiveFunction(RouteObjectiveFunctionEnum routeObjectiveFunction) {
    this.routeObjectiveFunction = routeObjectiveFunction;
  }

  public ConnectivityConstraint serviceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
    return this;
  }

   /**
   * Get serviceType
   * @return serviceType
  **/
  @ApiModelProperty(value = "")
  public ServiceTypeEnum getServiceType() {
    return serviceType;
  }

  public void setServiceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
  }

  public ConnectivityConstraint schedule(TimeRange schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Get schedule
   * @return schedule
  **/
  @ApiModelProperty(value = "")
  public TimeRange getSchedule() {
    return schedule;
  }

  public void setSchedule(TimeRange schedule) {
    this.schedule = schedule;
  }

  public ConnectivityConstraint requestedCapacity(Capacity requestedCapacity) {
    this.requestedCapacity = requestedCapacity;
    return this;
  }

   /**
   * Get requestedCapacity
   * @return requestedCapacity
  **/
  @ApiModelProperty(value = "")
  public Capacity getRequestedCapacity() {
    return requestedCapacity;
  }

  public void setRequestedCapacity(Capacity requestedCapacity) {
    this.requestedCapacity = requestedCapacity;
  }

  public ConnectivityConstraint costCharacteristic(List<CostCharacteristic> costCharacteristic) {
    this.costCharacteristic = costCharacteristic;
    return this;
  }

  public ConnectivityConstraint addCostCharacteristicItem(CostCharacteristic costCharacteristicItem) {
    if (this.costCharacteristic == null) {
      this.costCharacteristic = new ArrayList<CostCharacteristic>();
    }
    this.costCharacteristic.add(costCharacteristicItem);
    return this;
  }

   /**
   * The list of costs where each cost relates to some aspect of the TopologicalEntity.
   * @return costCharacteristic
  **/
  @ApiModelProperty(value = "The list of costs where each cost relates to some aspect of the TopologicalEntity.")
  public List<CostCharacteristic> getCostCharacteristic() {
    return costCharacteristic;
  }

  public void setCostCharacteristic(List<CostCharacteristic> costCharacteristic) {
    this.costCharacteristic = costCharacteristic;
  }

  public ConnectivityConstraint isExclusive(Boolean isExclusive) {
    this.isExclusive = isExclusive;
    return this;
  }

   /**
   * To distinguish if the resources are exclusive to the service  - for example between EPL(isExclusive&#x3D;true) and EVPL (isExclusive&#x3D;false), or between EPLAN (isExclusive&#x3D;true) and EVPLAN (isExclusive&#x3D;false)
   * @return isExclusive
  **/
  @ApiModelProperty(value = "To distinguish if the resources are exclusive to the service  - for example between EPL(isExclusive=true) and EVPL (isExclusive=false), or between EPLAN (isExclusive=true) and EVPLAN (isExclusive=false)")
  public Boolean isIsExclusive() {
    return isExclusive;
  }

  public void setIsExclusive(Boolean isExclusive) {
    this.isExclusive = isExclusive;
  }

  public ConnectivityConstraint serviceLevel(String serviceLevel) {
    this.serviceLevel = serviceLevel;
    return this;
  }

   /**
   * An abstract value the meaning of which is mutually agreed – typically represents metrics such as - Class of service, priority, resiliency, availability
   * @return serviceLevel
  **/
  @ApiModelProperty(value = "An abstract value the meaning of which is mutually agreed – typically represents metrics such as - Class of service, priority, resiliency, availability")
  public String getServiceLevel() {
    return serviceLevel;
  }

  public void setServiceLevel(String serviceLevel) {
    this.serviceLevel = serviceLevel;
  }

  public ConnectivityConstraint diversityExclusion(List<ConnectivityServiceRef> diversityExclusion) {
    this.diversityExclusion = diversityExclusion;
    return this;
  }

  public ConnectivityConstraint addDiversityExclusionItem(ConnectivityServiceRef diversityExclusionItem) {
    if (this.diversityExclusion == null) {
      this.diversityExclusion = new ArrayList<ConnectivityServiceRef>();
    }
    this.diversityExclusion.add(diversityExclusionItem);
    return this;
  }

   /**
   * Get diversityExclusion
   * @return diversityExclusion
  **/
  @ApiModelProperty(value = "")
  public List<ConnectivityServiceRef> getDiversityExclusion() {
    return diversityExclusion;
  }

  public void setDiversityExclusion(List<ConnectivityServiceRef> diversityExclusion) {
    this.diversityExclusion = diversityExclusion;
  }

  public ConnectivityConstraint latencyCharacteristic(List<LatencyCharacteristic> latencyCharacteristic) {
    this.latencyCharacteristic = latencyCharacteristic;
    return this;
  }

  public ConnectivityConstraint addLatencyCharacteristicItem(LatencyCharacteristic latencyCharacteristicItem) {
    if (this.latencyCharacteristic == null) {
      this.latencyCharacteristic = new ArrayList<LatencyCharacteristic>();
    }
    this.latencyCharacteristic.add(latencyCharacteristicItem);
    return this;
  }

   /**
   * The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.
   * @return latencyCharacteristic
  **/
  @ApiModelProperty(value = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.")
  public List<LatencyCharacteristic> getLatencyCharacteristic() {
    return latencyCharacteristic;
  }

  public void setLatencyCharacteristic(List<LatencyCharacteristic> latencyCharacteristic) {
    this.latencyCharacteristic = latencyCharacteristic;
  }

  public ConnectivityConstraint corouteInclusion(ConnectivityServiceRef corouteInclusion) {
    this.corouteInclusion = corouteInclusion;
    return this;
  }

   /**
   * Get corouteInclusion
   * @return corouteInclusion
  **/
  @ApiModelProperty(value = "")
  public ConnectivityServiceRef getCorouteInclusion() {
    return corouteInclusion;
  }

  public void setCorouteInclusion(ConnectivityServiceRef corouteInclusion) {
    this.corouteInclusion = corouteInclusion;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectivityConstraint connectivityConstraint = (ConnectivityConstraint) o;
    return Objects.equals(this.diversityPolicy, connectivityConstraint.diversityPolicy) &&
        Objects.equals(this.routeObjectiveFunction, connectivityConstraint.routeObjectiveFunction) &&
        Objects.equals(this.serviceType, connectivityConstraint.serviceType) &&
        Objects.equals(this.schedule, connectivityConstraint.schedule) &&
        Objects.equals(this.requestedCapacity, connectivityConstraint.requestedCapacity) &&
        Objects.equals(this.costCharacteristic, connectivityConstraint.costCharacteristic) &&
        Objects.equals(this.isExclusive, connectivityConstraint.isExclusive) &&
        Objects.equals(this.serviceLevel, connectivityConstraint.serviceLevel) &&
        Objects.equals(this.diversityExclusion, connectivityConstraint.diversityExclusion) &&
        Objects.equals(this.latencyCharacteristic, connectivityConstraint.latencyCharacteristic) &&
        Objects.equals(this.corouteInclusion, connectivityConstraint.corouteInclusion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diversityPolicy, routeObjectiveFunction, serviceType, schedule, requestedCapacity, costCharacteristic, isExclusive, serviceLevel, diversityExclusion, latencyCharacteristic, corouteInclusion);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectivityConstraint {\n");
    
    sb.append("    diversityPolicy: ").append(toIndentedString(diversityPolicy)).append("\n");
    sb.append("    routeObjectiveFunction: ").append(toIndentedString(routeObjectiveFunction)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    requestedCapacity: ").append(toIndentedString(requestedCapacity)).append("\n");
    sb.append("    costCharacteristic: ").append(toIndentedString(costCharacteristic)).append("\n");
    sb.append("    isExclusive: ").append(toIndentedString(isExclusive)).append("\n");
    sb.append("    serviceLevel: ").append(toIndentedString(serviceLevel)).append("\n");
    sb.append("    diversityExclusion: ").append(toIndentedString(diversityExclusion)).append("\n");
    sb.append("    latencyCharacteristic: ").append(toIndentedString(latencyCharacteristic)).append("\n");
    sb.append("    corouteInclusion: ").append(toIndentedString(corouteInclusion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

