/*
 * tapi-sdm API
 * tapi-sdm API generated from tapi-sdm.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.LinkRef;
import io.swagger.client.model.NodeRef;
import io.swagger.client.model.PathRef;
import io.swagger.client.model.TopologyRef;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * TopologyConstraint
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-08T09:23:18.099+02:00")
public class TopologyConstraint {
  @SerializedName("exclude-node")
  private List<NodeRef> excludeNode = null;

  @SerializedName("include-node")
  private List<NodeRef> includeNode = null;

  @SerializedName("include-path")
  private List<PathRef> includePath = null;

  @SerializedName("include-link")
  private List<LinkRef> includeLink = null;

  @SerializedName("exclude-path")
  private List<PathRef> excludePath = null;

  @SerializedName("exclude-link")
  private List<LinkRef> excludeLink = null;

  /**
   * soft constraint requested by client to indicate the layer(s) of transport connection that it prefers to carry the service. This could be same as the service layer or one of the supported server layers
   */
  @JsonAdapter(PreferredTransportLayerEnum.Adapter.class)
  public enum PreferredTransportLayerEnum {
    OTSIA("OTSiA"),
    
    OCH("OCH"),
    
    OTU("OTU"),
    
    ODU("ODU"),
    
    ETH("ETH"),
    
    ETY("ETY"),
    
    SDM("SDM"),
    
    DSR("DSR");

    private String value;

    PreferredTransportLayerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PreferredTransportLayerEnum fromValue(String text) {
      for (PreferredTransportLayerEnum b : PreferredTransportLayerEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PreferredTransportLayerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreferredTransportLayerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PreferredTransportLayerEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PreferredTransportLayerEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("preferred-transport-layer")
  private List<PreferredTransportLayerEnum> preferredTransportLayer = null;

  @SerializedName("avoid-topology")
  private List<TopologyRef> avoidTopology = null;

  @SerializedName("include-topology")
  private List<TopologyRef> includeTopology = null;

  public TopologyConstraint excludeNode(List<NodeRef> excludeNode) {
    this.excludeNode = excludeNode;
    return this;
  }

  public TopologyConstraint addExcludeNodeItem(NodeRef excludeNodeItem) {
    if (this.excludeNode == null) {
      this.excludeNode = new ArrayList<NodeRef>();
    }
    this.excludeNode.add(excludeNodeItem);
    return this;
  }

   /**
   * Get excludeNode
   * @return excludeNode
  **/
  @ApiModelProperty(value = "")
  public List<NodeRef> getExcludeNode() {
    return excludeNode;
  }

  public void setExcludeNode(List<NodeRef> excludeNode) {
    this.excludeNode = excludeNode;
  }

  public TopologyConstraint includeNode(List<NodeRef> includeNode) {
    this.includeNode = includeNode;
    return this;
  }

  public TopologyConstraint addIncludeNodeItem(NodeRef includeNodeItem) {
    if (this.includeNode == null) {
      this.includeNode = new ArrayList<NodeRef>();
    }
    this.includeNode.add(includeNodeItem);
    return this;
  }

   /**
   * This is a loose constraint - that is it is unordered and could be a partial list
   * @return includeNode
  **/
  @ApiModelProperty(value = "This is a loose constraint - that is it is unordered and could be a partial list")
  public List<NodeRef> getIncludeNode() {
    return includeNode;
  }

  public void setIncludeNode(List<NodeRef> includeNode) {
    this.includeNode = includeNode;
  }

  public TopologyConstraint includePath(List<PathRef> includePath) {
    this.includePath = includePath;
    return this;
  }

  public TopologyConstraint addIncludePathItem(PathRef includePathItem) {
    if (this.includePath == null) {
      this.includePath = new ArrayList<PathRef>();
    }
    this.includePath.add(includePathItem);
    return this;
  }

   /**
   * Get includePath
   * @return includePath
  **/
  @ApiModelProperty(value = "")
  public List<PathRef> getIncludePath() {
    return includePath;
  }

  public void setIncludePath(List<PathRef> includePath) {
    this.includePath = includePath;
  }

  public TopologyConstraint includeLink(List<LinkRef> includeLink) {
    this.includeLink = includeLink;
    return this;
  }

  public TopologyConstraint addIncludeLinkItem(LinkRef includeLinkItem) {
    if (this.includeLink == null) {
      this.includeLink = new ArrayList<LinkRef>();
    }
    this.includeLink.add(includeLinkItem);
    return this;
  }

   /**
   * This is a loose constraint - that is it is unordered and could be a partial list 
   * @return includeLink
  **/
  @ApiModelProperty(value = "This is a loose constraint - that is it is unordered and could be a partial list ")
  public List<LinkRef> getIncludeLink() {
    return includeLink;
  }

  public void setIncludeLink(List<LinkRef> includeLink) {
    this.includeLink = includeLink;
  }

  public TopologyConstraint excludePath(List<PathRef> excludePath) {
    this.excludePath = excludePath;
    return this;
  }

  public TopologyConstraint addExcludePathItem(PathRef excludePathItem) {
    if (this.excludePath == null) {
      this.excludePath = new ArrayList<PathRef>();
    }
    this.excludePath.add(excludePathItem);
    return this;
  }

   /**
   * Get excludePath
   * @return excludePath
  **/
  @ApiModelProperty(value = "")
  public List<PathRef> getExcludePath() {
    return excludePath;
  }

  public void setExcludePath(List<PathRef> excludePath) {
    this.excludePath = excludePath;
  }

  public TopologyConstraint excludeLink(List<LinkRef> excludeLink) {
    this.excludeLink = excludeLink;
    return this;
  }

  public TopologyConstraint addExcludeLinkItem(LinkRef excludeLinkItem) {
    if (this.excludeLink == null) {
      this.excludeLink = new ArrayList<LinkRef>();
    }
    this.excludeLink.add(excludeLinkItem);
    return this;
  }

   /**
   * Get excludeLink
   * @return excludeLink
  **/
  @ApiModelProperty(value = "")
  public List<LinkRef> getExcludeLink() {
    return excludeLink;
  }

  public void setExcludeLink(List<LinkRef> excludeLink) {
    this.excludeLink = excludeLink;
  }

  public TopologyConstraint preferredTransportLayer(List<PreferredTransportLayerEnum> preferredTransportLayer) {
    this.preferredTransportLayer = preferredTransportLayer;
    return this;
  }

  public TopologyConstraint addPreferredTransportLayerItem(PreferredTransportLayerEnum preferredTransportLayerItem) {
    if (this.preferredTransportLayer == null) {
      this.preferredTransportLayer = new ArrayList<PreferredTransportLayerEnum>();
    }
    this.preferredTransportLayer.add(preferredTransportLayerItem);
    return this;
  }

   /**
   * Get preferredTransportLayer
   * @return preferredTransportLayer
  **/
  @ApiModelProperty(value = "")
  public List<PreferredTransportLayerEnum> getPreferredTransportLayer() {
    return preferredTransportLayer;
  }

  public void setPreferredTransportLayer(List<PreferredTransportLayerEnum> preferredTransportLayer) {
    this.preferredTransportLayer = preferredTransportLayer;
  }

  public TopologyConstraint avoidTopology(List<TopologyRef> avoidTopology) {
    this.avoidTopology = avoidTopology;
    return this;
  }

  public TopologyConstraint addAvoidTopologyItem(TopologyRef avoidTopologyItem) {
    if (this.avoidTopology == null) {
      this.avoidTopology = new ArrayList<TopologyRef>();
    }
    this.avoidTopology.add(avoidTopologyItem);
    return this;
  }

   /**
   * Get avoidTopology
   * @return avoidTopology
  **/
  @ApiModelProperty(value = "")
  public List<TopologyRef> getAvoidTopology() {
    return avoidTopology;
  }

  public void setAvoidTopology(List<TopologyRef> avoidTopology) {
    this.avoidTopology = avoidTopology;
  }

  public TopologyConstraint includeTopology(List<TopologyRef> includeTopology) {
    this.includeTopology = includeTopology;
    return this;
  }

  public TopologyConstraint addIncludeTopologyItem(TopologyRef includeTopologyItem) {
    if (this.includeTopology == null) {
      this.includeTopology = new ArrayList<TopologyRef>();
    }
    this.includeTopology.add(includeTopologyItem);
    return this;
  }

   /**
   * Get includeTopology
   * @return includeTopology
  **/
  @ApiModelProperty(value = "")
  public List<TopologyRef> getIncludeTopology() {
    return includeTopology;
  }

  public void setIncludeTopology(List<TopologyRef> includeTopology) {
    this.includeTopology = includeTopology;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopologyConstraint topologyConstraint = (TopologyConstraint) o;
    return Objects.equals(this.excludeNode, topologyConstraint.excludeNode) &&
        Objects.equals(this.includeNode, topologyConstraint.includeNode) &&
        Objects.equals(this.includePath, topologyConstraint.includePath) &&
        Objects.equals(this.includeLink, topologyConstraint.includeLink) &&
        Objects.equals(this.excludePath, topologyConstraint.excludePath) &&
        Objects.equals(this.excludeLink, topologyConstraint.excludeLink) &&
        Objects.equals(this.preferredTransportLayer, topologyConstraint.preferredTransportLayer) &&
        Objects.equals(this.avoidTopology, topologyConstraint.avoidTopology) &&
        Objects.equals(this.includeTopology, topologyConstraint.includeTopology);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludeNode, includeNode, includePath, includeLink, excludePath, excludeLink, preferredTransportLayer, avoidTopology, includeTopology);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopologyConstraint {\n");
    
    sb.append("    excludeNode: ").append(toIndentedString(excludeNode)).append("\n");
    sb.append("    includeNode: ").append(toIndentedString(includeNode)).append("\n");
    sb.append("    includePath: ").append(toIndentedString(includePath)).append("\n");
    sb.append("    includeLink: ").append(toIndentedString(includeLink)).append("\n");
    sb.append("    excludePath: ").append(toIndentedString(excludePath)).append("\n");
    sb.append("    excludeLink: ").append(toIndentedString(excludeLink)).append("\n");
    sb.append("    preferredTransportLayer: ").append(toIndentedString(preferredTransportLayer)).append("\n");
    sb.append("    avoidTopology: ").append(toIndentedString(avoidTopology)).append("\n");
    sb.append("    includeTopology: ").append(toIndentedString(includeTopology)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

