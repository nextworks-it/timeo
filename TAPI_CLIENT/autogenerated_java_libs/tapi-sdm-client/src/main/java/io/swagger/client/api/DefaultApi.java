/*
 * tapi-sdm API
 * tapi-sdm API generated from tapi-sdm.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AvailableTransceiver;
import io.swagger.client.model.BandwidthProfile;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.CapacityValue;
import io.swagger.client.model.Connection;
import io.swagger.client.model.ConnectionEndPointRef;
import io.swagger.client.model.ConnectionEndPointSchema;
import io.swagger.client.model.ConnectionRef;
import io.swagger.client.model.ConnectivityServiceEndPoint;
import io.swagger.client.model.ConnectivityServiceEndPointRef;
import io.swagger.client.model.ConnectivityServiceRef;
import io.swagger.client.model.ConnectivityServiceSchema;
import io.swagger.client.model.ContextSchema;
import io.swagger.client.model.CoreSlot;
import io.swagger.client.model.CostCharacteristic;
import io.swagger.client.model.CreateConnectivityServiceRPCInputSchema;
import io.swagger.client.model.CreateConnectivityServiceRPCOutputSchema;
import io.swagger.client.model.DeleteConnectivityServiceRPCInputSchema;
import io.swagger.client.model.DeleteConnectivityServiceRPCOutputSchema;
import io.swagger.client.model.FrequencySlot;
import io.swagger.client.model.GetConnectionDetailsRPCInputSchema;
import io.swagger.client.model.GetConnectionDetailsRPCOutputSchema;
import io.swagger.client.model.GetConnectivityServiceDetailsRPCInputSchema;
import io.swagger.client.model.GetConnectivityServiceDetailsRPCOutputSchema;
import io.swagger.client.model.GetConnectivityServiceListRPCOutputSchema;
import io.swagger.client.model.GetLinkDetailsRPCInputSchema;
import io.swagger.client.model.GetLinkDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeDetailsRPCInputSchema;
import io.swagger.client.model.GetNodeDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCInputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCInputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetServiceInterfacePointListRPCOutputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCInputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCOutputSchema;
import io.swagger.client.model.GetTopologyListRPCOutputSchema;
import io.swagger.client.model.InterRuleGroup;
import io.swagger.client.model.LatencyCharacteristic;
import io.swagger.client.model.Link;
import io.swagger.client.model.LinkRef;
import io.swagger.client.model.ModelSwitch;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.NetworkTopologyService;
import io.swagger.client.model.Node;
import io.swagger.client.model.NodeRef;
import io.swagger.client.model.NodeRuleGroup;
import io.swagger.client.model.NodeRuleGroupRef;
import io.swagger.client.model.NominalCentralFrequencyOrWavelength;
import io.swagger.client.model.OwnedNodeEdgePointRef;
import io.swagger.client.model.OwnedNodeEdgePointSchema;
import io.swagger.client.model.Path;
import io.swagger.client.model.PathComputationService;
import io.swagger.client.model.PathObjectiveFunction;
import io.swagger.client.model.PathOptimizationConstraint;
import io.swagger.client.model.PathRef;
import io.swagger.client.model.PathServiceEndPoint;
import io.swagger.client.model.ResilienceType;
import io.swagger.client.model.RiskCharacteristic;
import io.swagger.client.model.Route;
import io.swagger.client.model.RouteRef;
import io.swagger.client.model.RoutingConstraint;
import io.swagger.client.model.Rule;
import io.swagger.client.model.SdmPoolPac;
import io.swagger.client.model.SdmTerminationPac;
import io.swagger.client.model.ServiceInterfacePoint;
import io.swagger.client.model.ServiceInterfacePointRef;
import io.swagger.client.model.SupportedBandwidthSchema;
import io.swagger.client.model.SupportedCenterFrequencyRangeSchema;
import io.swagger.client.model.SupportedModulationFormatSchema;
import io.swagger.client.model.SwitchControl;
import io.swagger.client.model.SwitchControlRef;
import io.swagger.client.model.TimeRange;
import io.swagger.client.model.Topology;
import io.swagger.client.model.TopologyRef;
import io.swagger.client.model.UpdateConnectivityServiceRPCInputSchema;
import io.swagger.client.model.UpdateConnectivityServiceRPCOutputSchema;
import io.swagger.client.model.UpdateServiceInterfacePointRPCInputSchema;
import io.swagger.client.model.ValidationMechanism;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createContextById
     * @param context contextbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextByIdCall(ContextSchema context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = context;

        // create path and map variables
        String localVarPath = "/config/context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextByIdValidateBeforeCall(ContextSchema context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling createContextById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextByIdCall(context, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create context by ID
     * Create operation of resource: context
     * @param context contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextById(ContextSchema context) throws ApiException {
        createContextByIdWithHttpInfo(context);
    }

    /**
     * Create context by ID
     * Create operation of resource: context
     * @param context contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextByIdWithHttpInfo(ContextSchema context) throws ApiException {
        com.squareup.okhttp.Call call = createContextByIdValidateBeforeCall(context, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create context by ID (asynchronously)
     * Create operation of resource: context
     * @param context contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextByIdAsync(ContextSchema context, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextByIdValidateBeforeCall(context, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectionConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectionConnectionEndPointConnectionEndPointByIdCall(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectionEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPoint' is set
        if (connectionEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPoint' when calling createContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectionConnectionEndPointConnectionEndPointByIdCall(uuid, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create connection-end-point by ID
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectionConnectionEndPointConnectionEndPointById(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        createContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, connectionEndPointUuid, connectionEndPoint);
    }

    /**
     * Create connection-end-point by ID
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, connectionEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create connection-end-point by ID (asynchronously)
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectionConnectionEndPointConnectionEndPointByIdAsync(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdCall(String uuid, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectivityServiceEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/connectivity-service-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceEndPoint' is set
        if (connectivityServiceEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceEndPoint' when calling createContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdCall(uuid, connectionEndPointUuid, connectivityServiceEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create connectivity-service-end-point by ID
     * Create operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(String uuid, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint) throws ApiException {
        createContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdWithHttpInfo(uuid, connectionEndPointUuid, connectivityServiceEndPoint);
    }

    /**
     * Create connectivity-service-end-point by ID
     * Create operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdWithHttpInfo(String uuid, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, connectivityServiceEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create connectivity-service-end-point by ID (asynchronously)
     * Create operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdAsync(String uuid, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, connectivityServiceEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectionConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectionConnectionEndPointNameNameByIdCall(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextConnectionConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectionConnectionEndPointNameNameByIdCall(uuid, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectionConnectionEndPointNameNameById(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        createContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(uuid, connectionEndPointUuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectionConnectionEndPointNameNameByIdAsync(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectionRouteConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectionEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPoint' is set
        if (connectionEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPoint' when calling createContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create connection-end-point by ID
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectionRouteConnectionEndPointConnectionEndPointById(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        createContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, connectionEndPoint);
    }

    /**
     * Create connection-end-point by ID
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create connection-end-point by ID (asynchronously)
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectionRouteConnectionEndPointConnectionEndPointByIdAsync(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdCall(String uuid, String localId, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectivityServiceEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/connectivity-service-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceEndPoint' is set
        if (connectivityServiceEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceEndPoint' when calling createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdCall(uuid, localId, connectionEndPointUuid, connectivityServiceEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create connectivity-service-end-point by ID
     * Create operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(String uuid, String localId, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint) throws ApiException {
        createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, connectivityServiceEndPoint);
    }

    /**
     * Create connectivity-service-end-point by ID
     * Create operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectivityServiceEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create connectivity-service-end-point by ID (asynchronously)
     * Create operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdAsync(String uuid, String localId, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectivityServiceEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectionRouteConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectionRouteConnectionEndPointNameNameByIdCall(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectionRouteConnectionEndPointNameNameByIdCall(uuid, localId, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectionRouteConnectionEndPointNameNameById(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        createContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectionRouteConnectionEndPointNameNameByIdAsync(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceConnectivityServiceById
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceConnectivityServiceByIdCall(String uuid, ConnectivityServiceSchema connectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectivityService;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(String uuid, ConnectivityServiceSchema connectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceConnectivityServiceById(Async)");
        }
        
        // verify the required parameter 'connectivityService' is set
        if (connectivityService == null) {
            throw new ApiException("Missing the required parameter 'connectivityService' when calling createContextConnectivityServiceConnectivityServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceConnectivityServiceByIdCall(uuid, connectivityService, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create connectivity-service by ID
     * Create operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceConnectivityServiceById(String uuid, ConnectivityServiceSchema connectivityService) throws ApiException {
        createContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(uuid, connectivityService);
    }

    /**
     * Create connectivity-service by ID
     * Create operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(String uuid, ConnectivityServiceSchema connectivityService) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, connectivityService, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create connectivity-service by ID (asynchronously)
     * Create operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceConnectivityServiceByIdAsync(String uuid, ConnectivityServiceSchema connectivityService, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, connectivityService, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceCorouteInclusionCorouteInclusionById
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(String uuid, ConnectivityServiceRef corouteInclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = corouteInclusion;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/coroute-inclusion/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(String uuid, ConnectivityServiceRef corouteInclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceCorouteInclusionCorouteInclusionById(Async)");
        }
        
        // verify the required parameter 'corouteInclusion' is set
        if (corouteInclusion == null) {
            throw new ApiException("Missing the required parameter 'corouteInclusion' when calling createContextConnectivityServiceCorouteInclusionCorouteInclusionById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(uuid, corouteInclusion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create coroute-inclusion by ID
     * Create operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceCorouteInclusionCorouteInclusionById(String uuid, ConnectivityServiceRef corouteInclusion) throws ApiException {
        createContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(uuid, corouteInclusion);
    }

    /**
     * Create coroute-inclusion by ID
     * Create operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(String uuid, ConnectivityServiceRef corouteInclusion) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(uuid, corouteInclusion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create coroute-inclusion by ID (asynchronously)
     * Create operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceCorouteInclusionCorouteInclusionByIdAsync(String uuid, ConnectivityServiceRef corouteInclusion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(uuid, corouteInclusion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, CostCharacteristic costCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = costCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String costName, CostCharacteristic costCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling createContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costCharacteristic' is set
        if (costCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'costCharacteristic' when calling createContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, costCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create cost-characteristic by ID
     * Create operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceCostCharacteristicCostCharacteristicById(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        createContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName, costCharacteristic);
    }

    /**
     * Create cost-characteristic by ID
     * Create operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, costCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create cost-characteristic by ID (asynchronously)
     * Create operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, CostCharacteristic costCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, costCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceDiversityExclusionDiversityExclusionById
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(String uuid, String connectivityServiceId, ConnectivityServiceRef diversityExclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = diversityExclusion;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/diversity-exclusion/{connectivity_service_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connectivity_service_id" + "\\}", apiClient.escapeString(connectivityServiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(String uuid, String connectivityServiceId, ConnectivityServiceRef diversityExclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceId' is set
        if (connectivityServiceId == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceId' when calling createContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'diversityExclusion' is set
        if (diversityExclusion == null) {
            throw new ApiException("Missing the required parameter 'diversityExclusion' when calling createContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceId, diversityExclusion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create diversity-exclusion by ID
     * Create operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceDiversityExclusionDiversityExclusionById(String uuid, String connectivityServiceId, ConnectivityServiceRef diversityExclusion) throws ApiException {
        createContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(uuid, connectivityServiceId, diversityExclusion);
    }

    /**
     * Create diversity-exclusion by ID
     * Create operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(String uuid, String connectivityServiceId, ConnectivityServiceRef diversityExclusion) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceId, diversityExclusion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create diversity-exclusion by ID (asynchronously)
     * Create operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceDiversityExclusionDiversityExclusionByIdAsync(String uuid, String connectivityServiceId, ConnectivityServiceRef diversityExclusion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceId, diversityExclusion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, String localId, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bandwidthProfile;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(String uuid, String localId, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'bandwidthProfile' is set
        if (bandwidthProfile == null) {
            throw new ApiException("Missing the required parameter 'bandwidthProfile' when calling createContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, localId, bandwidthProfile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create bandwidth-profile by ID
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        createContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, localId, bandwidthProfile);
    }

    /**
     * Create bandwidth-profile by ID
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, bandwidthProfile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create bandwidth-profile by ID (asynchronously)
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, String localId, BandwidthProfile bandwidthProfile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, bandwidthProfile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, String localId, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'committedBurstSize' is set
        if (committedBurstSize == null) {
            throw new ApiException("Missing the required parameter 'committedBurstSize' when calling createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, localId, committedBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create committed-burst-size by ID
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, localId, committedBurstSize);
    }

    /**
     * Create committed-burst-size by ID
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, committedBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create committed-burst-size by ID (asynchronously)
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, String localId, CapacityValue committedBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, committedBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, String localId, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(String uuid, String localId, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'committedInformationRate' is set
        if (committedInformationRate == null) {
            throw new ApiException("Missing the required parameter 'committedInformationRate' when calling createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, localId, committedInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create committed-information-rate by ID
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, localId, committedInformationRate);
    }

    /**
     * Create committed-information-rate by ID
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, committedInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create committed-information-rate by ID (asynchronously)
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, String localId, CapacityValue committedInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, committedInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, String localId, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'peakBurstSize' is set
        if (peakBurstSize == null) {
            throw new ApiException("Missing the required parameter 'peakBurstSize' when calling createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, localId, peakBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create peak-burst-size by ID
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, localId, peakBurstSize);
    }

    /**
     * Create peak-burst-size by ID
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, peakBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create peak-burst-size by ID (asynchronously)
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, String localId, CapacityValue peakBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, peakBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, String localId, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(String uuid, String localId, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'peakInformationRate' is set
        if (peakInformationRate == null) {
            throw new ApiException("Missing the required parameter 'peakInformationRate' when calling createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, localId, peakInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create peak-information-rate by ID
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, localId, peakInformationRate);
    }

    /**
     * Create peak-information-rate by ID
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, peakInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create peak-information-rate by ID (asynchronously)
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, String localId, CapacityValue peakInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, peakInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceEndPointCapacityCapacityById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityCapacityByIdCall(String uuid, String localId, Capacity capacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = capacity;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(String uuid, String localId, Capacity capacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'capacity' is set
        if (capacity == null) {
            throw new ApiException("Missing the required parameter 'capacity' when calling createContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityCapacityByIdCall(uuid, localId, capacity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create capacity by ID
     * Create operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceEndPointCapacityCapacityById(String uuid, String localId, Capacity capacity) throws ApiException {
        createContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(uuid, localId, capacity);
    }

    /**
     * Create capacity by ID
     * Create operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(String uuid, String localId, Capacity capacity) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, capacity, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create capacity by ID (asynchronously)
     * Create operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityCapacityByIdAsync(String uuid, String localId, Capacity capacity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, capacity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(String uuid, String localId, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = totalSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'totalSize' is set
        if (totalSize == null) {
            throw new ApiException("Missing the required parameter 'totalSize' when calling createContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(uuid, localId, totalSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create total-size by ID
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        createContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, localId, totalSize);
    }

    /**
     * Create total-size by ID
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, totalSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create total-size by ID (asynchronously)
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdAsync(String uuid, String localId, CapacityValue totalSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, totalSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointEndPointByIdCall(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = endPoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'endPoint' is set
        if (endPoint == null) {
            throw new ApiException("Missing the required parameter 'endPoint' when calling createContextConnectivityServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create end-point by ID
     * Create operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceEndPointEndPointById(String uuid, String localId, ConnectivityServiceEndPoint endPoint) throws ApiException {
        createContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(uuid, localId, endPoint);
    }

    /**
     * Create end-point by ID
     * Create operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId, ConnectivityServiceEndPoint endPoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create end-point by ID (asynchronously)
     * Create operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointEndPointByIdAsync(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextConnectivityServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceEndPointNameNameById(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        createContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling createContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, serviceInterfacePoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint) throws ApiException {
        createContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, localId, serviceInterfacePoint);
    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create service-interface-point by ID (asynchronously)
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceIncludeCoreIncludeCoreById
     * @param uuid ID of uuid (required)
     * @param includeCore include-corebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceIncludeCoreIncludeCoreByIdCall(String uuid, SdmTerminationPac includeCore, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = includeCore;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/include-core/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceIncludeCoreIncludeCoreByIdValidateBeforeCall(String uuid, SdmTerminationPac includeCore, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceIncludeCoreIncludeCoreById(Async)");
        }
        
        // verify the required parameter 'includeCore' is set
        if (includeCore == null) {
            throw new ApiException("Missing the required parameter 'includeCore' when calling createContextConnectivityServiceIncludeCoreIncludeCoreById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceIncludeCoreIncludeCoreByIdCall(uuid, includeCore, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create include-core by ID
     * Create operation of resource: include-core
     * @param uuid ID of uuid (required)
     * @param includeCore include-corebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceIncludeCoreIncludeCoreById(String uuid, SdmTerminationPac includeCore) throws ApiException {
        createContextConnectivityServiceIncludeCoreIncludeCoreByIdWithHttpInfo(uuid, includeCore);
    }

    /**
     * Create include-core by ID
     * Create operation of resource: include-core
     * @param uuid ID of uuid (required)
     * @param includeCore include-corebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceIncludeCoreIncludeCoreByIdWithHttpInfo(String uuid, SdmTerminationPac includeCore) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceIncludeCoreIncludeCoreByIdValidateBeforeCall(uuid, includeCore, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create include-core by ID (asynchronously)
     * Create operation of resource: include-core
     * @param uuid ID of uuid (required)
     * @param includeCore include-corebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceIncludeCoreIncludeCoreByIdAsync(String uuid, SdmTerminationPac includeCore, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceIncludeCoreIncludeCoreByIdValidateBeforeCall(uuid, includeCore, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = latencyCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling createContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'latencyCharacteristic' is set
        if (latencyCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'latencyCharacteristic' when calling createContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, latencyCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create latency-characteristic by ID
     * Create operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        createContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName, latencyCharacteristic);
    }

    /**
     * Create latency-characteristic by ID
     * Create operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, latencyCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create latency-characteristic by ID (asynchronously)
     * Create operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, latencyCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextConnectivityServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        createContextConnectivityServiceNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bandwidthProfile;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(String uuid, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'bandwidthProfile' is set
        if (bandwidthProfile == null) {
            throw new ApiException("Missing the required parameter 'bandwidthProfile' when calling createContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, bandwidthProfile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create bandwidth-profile by ID
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(String uuid, BandwidthProfile bandwidthProfile) throws ApiException {
        createContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, bandwidthProfile);
    }

    /**
     * Create bandwidth-profile by ID
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, BandwidthProfile bandwidthProfile) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, bandwidthProfile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create bandwidth-profile by ID (asynchronously)
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, BandwidthProfile bandwidthProfile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, bandwidthProfile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(String uuid, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'committedBurstSize' is set
        if (committedBurstSize == null) {
            throw new ApiException("Missing the required parameter 'committedBurstSize' when calling createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, committedBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create committed-burst-size by ID
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, CapacityValue committedBurstSize) throws ApiException {
        createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, committedBurstSize);
    }

    /**
     * Create committed-burst-size by ID
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, CapacityValue committedBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, committedBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create committed-burst-size by ID (asynchronously)
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, CapacityValue committedBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, committedBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(String uuid, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'committedInformationRate' is set
        if (committedInformationRate == null) {
            throw new ApiException("Missing the required parameter 'committedInformationRate' when calling createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, committedInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create committed-information-rate by ID
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, CapacityValue committedInformationRate) throws ApiException {
        createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, committedInformationRate);
    }

    /**
     * Create committed-information-rate by ID
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, CapacityValue committedInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, committedInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create committed-information-rate by ID (asynchronously)
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, CapacityValue committedInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, committedInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(String uuid, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'peakBurstSize' is set
        if (peakBurstSize == null) {
            throw new ApiException("Missing the required parameter 'peakBurstSize' when calling createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, peakBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create peak-burst-size by ID
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, CapacityValue peakBurstSize) throws ApiException {
        createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, peakBurstSize);
    }

    /**
     * Create peak-burst-size by ID
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, CapacityValue peakBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, peakBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create peak-burst-size by ID (asynchronously)
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, CapacityValue peakBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, peakBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(String uuid, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'peakInformationRate' is set
        if (peakInformationRate == null) {
            throw new ApiException("Missing the required parameter 'peakInformationRate' when calling createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, peakInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create peak-information-rate by ID
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, CapacityValue peakInformationRate) throws ApiException {
        createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, peakInformationRate);
    }

    /**
     * Create peak-information-rate by ID
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, CapacityValue peakInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, peakInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create peak-information-rate by ID (asynchronously)
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, CapacityValue peakInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, peakInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceRequestedCapacityRequestedCapacityById
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(String uuid, Capacity requestedCapacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestedCapacity;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(String uuid, Capacity requestedCapacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceRequestedCapacityRequestedCapacityById(Async)");
        }
        
        // verify the required parameter 'requestedCapacity' is set
        if (requestedCapacity == null) {
            throw new ApiException("Missing the required parameter 'requestedCapacity' when calling createContextConnectivityServiceRequestedCapacityRequestedCapacityById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(uuid, requestedCapacity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create requested-capacity by ID
     * Create operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceRequestedCapacityRequestedCapacityById(String uuid, Capacity requestedCapacity) throws ApiException {
        createContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(uuid, requestedCapacity);
    }

    /**
     * Create requested-capacity by ID
     * Create operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(String uuid, Capacity requestedCapacity) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(uuid, requestedCapacity, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create requested-capacity by ID (asynchronously)
     * Create operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityRequestedCapacityByIdAsync(String uuid, Capacity requestedCapacity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(uuid, requestedCapacity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(String uuid, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = totalSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(String uuid, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'totalSize' is set
        if (totalSize == null) {
            throw new ApiException("Missing the required parameter 'totalSize' when calling createContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(uuid, totalSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create total-size by ID
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(String uuid, CapacityValue totalSize) throws ApiException {
        createContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, totalSize);
    }

    /**
     * Create total-size by ID
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, CapacityValue totalSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, totalSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create total-size by ID (asynchronously)
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdAsync(String uuid, CapacityValue totalSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, totalSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceResilienceTypeResilienceTypeById
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(String uuid, ResilienceType resilienceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resilienceType;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/resilience-type/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(String uuid, ResilienceType resilienceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceResilienceTypeResilienceTypeById(Async)");
        }
        
        // verify the required parameter 'resilienceType' is set
        if (resilienceType == null) {
            throw new ApiException("Missing the required parameter 'resilienceType' when calling createContextConnectivityServiceResilienceTypeResilienceTypeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(uuid, resilienceType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create resilience-type by ID
     * Create operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceResilienceTypeResilienceTypeById(String uuid, ResilienceType resilienceType) throws ApiException {
        createContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(uuid, resilienceType);
    }

    /**
     * Create resilience-type by ID
     * Create operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(String uuid, ResilienceType resilienceType) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(uuid, resilienceType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create resilience-type by ID (asynchronously)
     * Create operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceResilienceTypeResilienceTypeByIdAsync(String uuid, ResilienceType resilienceType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(uuid, resilienceType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityServiceScheduleScheduleById
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceScheduleScheduleByIdCall(String uuid, TimeRange schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = schedule;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/schedule/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(String uuid, TimeRange schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityServiceScheduleScheduleById(Async)");
        }
        
        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling createContextConnectivityServiceScheduleScheduleById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityServiceScheduleScheduleByIdCall(uuid, schedule, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create schedule by ID
     * Create operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityServiceScheduleScheduleById(String uuid, TimeRange schedule) throws ApiException {
        createContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(uuid, schedule);
    }

    /**
     * Create schedule by ID
     * Create operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(String uuid, TimeRange schedule) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(uuid, schedule, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create schedule by ID (asynchronously)
     * Create operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityServiceScheduleScheduleByIdAsync(String uuid, TimeRange schedule, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(uuid, schedule, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextNameNameById
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextNameNameByIdCall(String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/name/{value_name}/"
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextNameNameByIdValidateBeforeCall(String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextNameNameByIdCall(valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextNameNameById(String valueName, NameAndValue name) throws ApiException {
        createContextNameNameByIdWithHttpInfo(valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextNameNameByIdWithHttpInfo(String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextNameNameByIdValidateBeforeCall(valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextNameNameByIdAsync(String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextNameNameByIdValidateBeforeCall(valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathCompServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceEndPointEndPointByIdCall(String uuid, String localId, PathServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = endPoint;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, PathServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathCompServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextPathCompServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'endPoint' is set
        if (endPoint == null) {
            throw new ApiException("Missing the required parameter 'endPoint' when calling createContextPathCompServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathCompServiceEndPointEndPointByIdCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create end-point by ID
     * Create operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathCompServiceEndPointEndPointById(String uuid, String localId, PathServiceEndPoint endPoint) throws ApiException {
        createContextPathCompServiceEndPointEndPointByIdWithHttpInfo(uuid, localId, endPoint);
    }

    /**
     * Create end-point by ID
     * Create operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathCompServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId, PathServiceEndPoint endPoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create end-point by ID (asynchronously)
     * Create operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceEndPointEndPointByIdAsync(String uuid, String localId, PathServiceEndPoint endPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathCompServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextPathCompServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathCompServiceEndPointNameNameByIdCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathCompServiceEndPointNameNameById(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        createContextPathCompServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathCompServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathCompServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathCompServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathCompServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextPathCompServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextPathCompServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathCompServiceNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathCompServiceNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        createContextPathCompServiceNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathCompServiceNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathCompServiceObjectiveFunctionNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceObjectiveFunctionNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/objective-function/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathCompServiceObjectiveFunctionNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathCompServiceObjectiveFunctionNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        createContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceObjectiveFunctionNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathCompServiceObjectiveFunctionObjectiveFunctionById
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdCall(String uuid, PathObjectiveFunction objectiveFunction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = objectiveFunction;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/objective-function/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(String uuid, PathObjectiveFunction objectiveFunction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathCompServiceObjectiveFunctionObjectiveFunctionById(Async)");
        }
        
        // verify the required parameter 'objectiveFunction' is set
        if (objectiveFunction == null) {
            throw new ApiException("Missing the required parameter 'objectiveFunction' when calling createContextPathCompServiceObjectiveFunctionObjectiveFunctionById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdCall(uuid, objectiveFunction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create objective-function by ID
     * Create operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathCompServiceObjectiveFunctionObjectiveFunctionById(String uuid, PathObjectiveFunction objectiveFunction) throws ApiException {
        createContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdWithHttpInfo(uuid, objectiveFunction);
    }

    /**
     * Create objective-function by ID
     * Create operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdWithHttpInfo(String uuid, PathObjectiveFunction objectiveFunction) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(uuid, objectiveFunction, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create objective-function by ID (asynchronously)
     * Create operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdAsync(String uuid, PathObjectiveFunction objectiveFunction, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(uuid, objectiveFunction, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathCompServiceOptimizationConstraintNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceOptimizationConstraintNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/optimization-constraint/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathCompServiceOptimizationConstraintNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathCompServiceOptimizationConstraintNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        createContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceOptimizationConstraintNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathCompServiceOptimizationConstraintOptimizationConstraintById
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdCall(String uuid, PathOptimizationConstraint optimizationConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = optimizationConstraint;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/optimization-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(String uuid, PathOptimizationConstraint optimizationConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathCompServiceOptimizationConstraintOptimizationConstraintById(Async)");
        }
        
        // verify the required parameter 'optimizationConstraint' is set
        if (optimizationConstraint == null) {
            throw new ApiException("Missing the required parameter 'optimizationConstraint' when calling createContextPathCompServiceOptimizationConstraintOptimizationConstraintById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdCall(uuid, optimizationConstraint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create optimization-constraint by ID
     * Create operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathCompServiceOptimizationConstraintOptimizationConstraintById(String uuid, PathOptimizationConstraint optimizationConstraint) throws ApiException {
        createContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdWithHttpInfo(uuid, optimizationConstraint);
    }

    /**
     * Create optimization-constraint by ID
     * Create operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdWithHttpInfo(String uuid, PathOptimizationConstraint optimizationConstraint) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(uuid, optimizationConstraint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create optimization-constraint by ID (asynchronously)
     * Create operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdAsync(String uuid, PathOptimizationConstraint optimizationConstraint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(uuid, optimizationConstraint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathCompServicePathCompServiceById
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServicePathCompServiceByIdCall(String uuid, PathComputationService pathCompService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pathCompService;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathCompServicePathCompServiceByIdValidateBeforeCall(String uuid, PathComputationService pathCompService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathCompServicePathCompServiceById(Async)");
        }
        
        // verify the required parameter 'pathCompService' is set
        if (pathCompService == null) {
            throw new ApiException("Missing the required parameter 'pathCompService' when calling createContextPathCompServicePathCompServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathCompServicePathCompServiceByIdCall(uuid, pathCompService, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create path-comp-service by ID
     * Create operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathCompServicePathCompServiceById(String uuid, PathComputationService pathCompService) throws ApiException {
        createContextPathCompServicePathCompServiceByIdWithHttpInfo(uuid, pathCompService);
    }

    /**
     * Create path-comp-service by ID
     * Create operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathCompServicePathCompServiceByIdWithHttpInfo(String uuid, PathComputationService pathCompService) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, pathCompService, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create path-comp-service by ID (asynchronously)
     * Create operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServicePathCompServiceByIdAsync(String uuid, PathComputationService pathCompService, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, pathCompService, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathCompServiceRoutingConstraintNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceRoutingConstraintNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathCompServiceRoutingConstraintNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathCompServiceRoutingConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextPathCompServiceRoutingConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextPathCompServiceRoutingConstraintNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathCompServiceRoutingConstraintNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathCompServiceRoutingConstraintNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        createContextPathCompServiceRoutingConstraintNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathCompServiceRoutingConstraintNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathCompServiceRoutingConstraintNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceRoutingConstraintNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathCompServiceRoutingConstraintNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathCompServiceRoutingConstraintRoutingConstraintById
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceRoutingConstraintRoutingConstraintByIdCall(String uuid, RoutingConstraint routingConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = routingConstraint;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(String uuid, RoutingConstraint routingConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathCompServiceRoutingConstraintRoutingConstraintById(Async)");
        }
        
        // verify the required parameter 'routingConstraint' is set
        if (routingConstraint == null) {
            throw new ApiException("Missing the required parameter 'routingConstraint' when calling createContextPathCompServiceRoutingConstraintRoutingConstraintById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathCompServiceRoutingConstraintRoutingConstraintByIdCall(uuid, routingConstraint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create routing-constraint by ID
     * Create operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathCompServiceRoutingConstraintRoutingConstraintById(String uuid, RoutingConstraint routingConstraint) throws ApiException {
        createContextPathCompServiceRoutingConstraintRoutingConstraintByIdWithHttpInfo(uuid, routingConstraint);
    }

    /**
     * Create routing-constraint by ID
     * Create operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathCompServiceRoutingConstraintRoutingConstraintByIdWithHttpInfo(String uuid, RoutingConstraint routingConstraint) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(uuid, routingConstraint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create routing-constraint by ID (asynchronously)
     * Create operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathCompServiceRoutingConstraintRoutingConstraintByIdAsync(String uuid, RoutingConstraint routingConstraint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(uuid, routingConstraint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextServiceInterfacePointNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextServiceInterfacePointNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextServiceInterfacePointNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        createContextServiceInterfacePointNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextServiceInterfacePointNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextServiceInterfacePointServiceInterfacePointByIdCall(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling createContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, serviceInterfacePoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextServiceInterfacePointServiceInterfacePointById(String uuid, ServiceInterfacePoint serviceInterfacePoint) throws ApiException {
        createContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, serviceInterfacePoint);
    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, ServiceInterfacePoint serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create service-interface-point by ID (asynchronously)
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createCreateConnectivityServiceById
     * @param createConnectivityService create-connectivity-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCreateConnectivityServiceByIdCall(CreateConnectivityServiceRPCInputSchema createConnectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createConnectivityService;

        // create path and map variables
        String localVarPath = "/operations/create-connectivity-service/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCreateConnectivityServiceByIdValidateBeforeCall(CreateConnectivityServiceRPCInputSchema createConnectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createConnectivityService' is set
        if (createConnectivityService == null) {
            throw new ApiException("Missing the required parameter 'createConnectivityService' when calling createCreateConnectivityServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = createCreateConnectivityServiceByIdCall(createConnectivityService, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create create-connectivity-service by ID
     * Create operation of resource: create-connectivity-service
     * @param createConnectivityService create-connectivity-servicebody object (required)
     * @return CreateConnectivityServiceRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateConnectivityServiceRPCOutputSchema createCreateConnectivityServiceById(CreateConnectivityServiceRPCInputSchema createConnectivityService) throws ApiException {
        ApiResponse<CreateConnectivityServiceRPCOutputSchema> resp = createCreateConnectivityServiceByIdWithHttpInfo(createConnectivityService);
        return resp.getData();
    }

    /**
     * Create create-connectivity-service by ID
     * Create operation of resource: create-connectivity-service
     * @param createConnectivityService create-connectivity-servicebody object (required)
     * @return ApiResponse&lt;CreateConnectivityServiceRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateConnectivityServiceRPCOutputSchema> createCreateConnectivityServiceByIdWithHttpInfo(CreateConnectivityServiceRPCInputSchema createConnectivityService) throws ApiException {
        com.squareup.okhttp.Call call = createCreateConnectivityServiceByIdValidateBeforeCall(createConnectivityService, null, null);
        Type localVarReturnType = new TypeToken<CreateConnectivityServiceRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create create-connectivity-service by ID (asynchronously)
     * Create operation of resource: create-connectivity-service
     * @param createConnectivityService create-connectivity-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCreateConnectivityServiceByIdAsync(CreateConnectivityServiceRPCInputSchema createConnectivityService, final ApiCallback<CreateConnectivityServiceRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCreateConnectivityServiceByIdValidateBeforeCall(createConnectivityService, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateConnectivityServiceRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDeleteConnectivityServiceById
     * @param deleteConnectivityService delete-connectivity-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDeleteConnectivityServiceByIdCall(DeleteConnectivityServiceRPCInputSchema deleteConnectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteConnectivityService;

        // create path and map variables
        String localVarPath = "/operations/delete-connectivity-service/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDeleteConnectivityServiceByIdValidateBeforeCall(DeleteConnectivityServiceRPCInputSchema deleteConnectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deleteConnectivityService' is set
        if (deleteConnectivityService == null) {
            throw new ApiException("Missing the required parameter 'deleteConnectivityService' when calling createDeleteConnectivityServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = createDeleteConnectivityServiceByIdCall(deleteConnectivityService, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create delete-connectivity-service by ID
     * Create operation of resource: delete-connectivity-service
     * @param deleteConnectivityService delete-connectivity-servicebody object (required)
     * @return DeleteConnectivityServiceRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteConnectivityServiceRPCOutputSchema createDeleteConnectivityServiceById(DeleteConnectivityServiceRPCInputSchema deleteConnectivityService) throws ApiException {
        ApiResponse<DeleteConnectivityServiceRPCOutputSchema> resp = createDeleteConnectivityServiceByIdWithHttpInfo(deleteConnectivityService);
        return resp.getData();
    }

    /**
     * Create delete-connectivity-service by ID
     * Create operation of resource: delete-connectivity-service
     * @param deleteConnectivityService delete-connectivity-servicebody object (required)
     * @return ApiResponse&lt;DeleteConnectivityServiceRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteConnectivityServiceRPCOutputSchema> createDeleteConnectivityServiceByIdWithHttpInfo(DeleteConnectivityServiceRPCInputSchema deleteConnectivityService) throws ApiException {
        com.squareup.okhttp.Call call = createDeleteConnectivityServiceByIdValidateBeforeCall(deleteConnectivityService, null, null);
        Type localVarReturnType = new TypeToken<DeleteConnectivityServiceRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create delete-connectivity-service by ID (asynchronously)
     * Create operation of resource: delete-connectivity-service
     * @param deleteConnectivityService delete-connectivity-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDeleteConnectivityServiceByIdAsync(DeleteConnectivityServiceRPCInputSchema deleteConnectivityService, final ApiCallback<DeleteConnectivityServiceRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDeleteConnectivityServiceByIdValidateBeforeCall(deleteConnectivityService, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteConnectivityServiceRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetConnectionDetailsById
     * @param getConnectionDetails get-connection-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetConnectionDetailsByIdCall(GetConnectionDetailsRPCInputSchema getConnectionDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getConnectionDetails;

        // create path and map variables
        String localVarPath = "/operations/get-connection-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetConnectionDetailsByIdValidateBeforeCall(GetConnectionDetailsRPCInputSchema getConnectionDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getConnectionDetails' is set
        if (getConnectionDetails == null) {
            throw new ApiException("Missing the required parameter 'getConnectionDetails' when calling createGetConnectionDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetConnectionDetailsByIdCall(getConnectionDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-connection-details by ID
     * Create operation of resource: get-connection-details
     * @param getConnectionDetails get-connection-detailsbody object (required)
     * @return GetConnectionDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetConnectionDetailsRPCOutputSchema createGetConnectionDetailsById(GetConnectionDetailsRPCInputSchema getConnectionDetails) throws ApiException {
        ApiResponse<GetConnectionDetailsRPCOutputSchema> resp = createGetConnectionDetailsByIdWithHttpInfo(getConnectionDetails);
        return resp.getData();
    }

    /**
     * Create get-connection-details by ID
     * Create operation of resource: get-connection-details
     * @param getConnectionDetails get-connection-detailsbody object (required)
     * @return ApiResponse&lt;GetConnectionDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetConnectionDetailsRPCOutputSchema> createGetConnectionDetailsByIdWithHttpInfo(GetConnectionDetailsRPCInputSchema getConnectionDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetConnectionDetailsByIdValidateBeforeCall(getConnectionDetails, null, null);
        Type localVarReturnType = new TypeToken<GetConnectionDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-connection-details by ID (asynchronously)
     * Create operation of resource: get-connection-details
     * @param getConnectionDetails get-connection-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetConnectionDetailsByIdAsync(GetConnectionDetailsRPCInputSchema getConnectionDetails, final ApiCallback<GetConnectionDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetConnectionDetailsByIdValidateBeforeCall(getConnectionDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetConnectionDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetConnectivityServiceDetailsById
     * @param getConnectivityServiceDetails get-connectivity-service-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetConnectivityServiceDetailsByIdCall(GetConnectivityServiceDetailsRPCInputSchema getConnectivityServiceDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getConnectivityServiceDetails;

        // create path and map variables
        String localVarPath = "/operations/get-connectivity-service-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetConnectivityServiceDetailsByIdValidateBeforeCall(GetConnectivityServiceDetailsRPCInputSchema getConnectivityServiceDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getConnectivityServiceDetails' is set
        if (getConnectivityServiceDetails == null) {
            throw new ApiException("Missing the required parameter 'getConnectivityServiceDetails' when calling createGetConnectivityServiceDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetConnectivityServiceDetailsByIdCall(getConnectivityServiceDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-connectivity-service-details by ID
     * Create operation of resource: get-connectivity-service-details
     * @param getConnectivityServiceDetails get-connectivity-service-detailsbody object (required)
     * @return GetConnectivityServiceDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetConnectivityServiceDetailsRPCOutputSchema createGetConnectivityServiceDetailsById(GetConnectivityServiceDetailsRPCInputSchema getConnectivityServiceDetails) throws ApiException {
        ApiResponse<GetConnectivityServiceDetailsRPCOutputSchema> resp = createGetConnectivityServiceDetailsByIdWithHttpInfo(getConnectivityServiceDetails);
        return resp.getData();
    }

    /**
     * Create get-connectivity-service-details by ID
     * Create operation of resource: get-connectivity-service-details
     * @param getConnectivityServiceDetails get-connectivity-service-detailsbody object (required)
     * @return ApiResponse&lt;GetConnectivityServiceDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetConnectivityServiceDetailsRPCOutputSchema> createGetConnectivityServiceDetailsByIdWithHttpInfo(GetConnectivityServiceDetailsRPCInputSchema getConnectivityServiceDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetConnectivityServiceDetailsByIdValidateBeforeCall(getConnectivityServiceDetails, null, null);
        Type localVarReturnType = new TypeToken<GetConnectivityServiceDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-connectivity-service-details by ID (asynchronously)
     * Create operation of resource: get-connectivity-service-details
     * @param getConnectivityServiceDetails get-connectivity-service-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetConnectivityServiceDetailsByIdAsync(GetConnectivityServiceDetailsRPCInputSchema getConnectivityServiceDetails, final ApiCallback<GetConnectivityServiceDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetConnectivityServiceDetailsByIdValidateBeforeCall(getConnectivityServiceDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetConnectivityServiceDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetConnectivityServiceListById
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetConnectivityServiceListByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/get-connectivity-service-list/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetConnectivityServiceListByIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createGetConnectivityServiceListByIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-connectivity-service-list by ID
     * Create operation of resource: get-connectivity-service-list
     * @return GetConnectivityServiceListRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetConnectivityServiceListRPCOutputSchema createGetConnectivityServiceListById() throws ApiException {
        ApiResponse<GetConnectivityServiceListRPCOutputSchema> resp = createGetConnectivityServiceListByIdWithHttpInfo();
        return resp.getData();
    }

    /**
     * Create get-connectivity-service-list by ID
     * Create operation of resource: get-connectivity-service-list
     * @return ApiResponse&lt;GetConnectivityServiceListRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetConnectivityServiceListRPCOutputSchema> createGetConnectivityServiceListByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = createGetConnectivityServiceListByIdValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetConnectivityServiceListRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-connectivity-service-list by ID (asynchronously)
     * Create operation of resource: get-connectivity-service-list
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetConnectivityServiceListByIdAsync(final ApiCallback<GetConnectivityServiceListRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetConnectivityServiceListByIdValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetConnectivityServiceListRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetLinkDetailsById
     * @param getLinkDetails get-link-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetLinkDetailsByIdCall(GetLinkDetailsRPCInputSchema getLinkDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getLinkDetails;

        // create path and map variables
        String localVarPath = "/operations/get-link-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetLinkDetailsByIdValidateBeforeCall(GetLinkDetailsRPCInputSchema getLinkDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getLinkDetails' is set
        if (getLinkDetails == null) {
            throw new ApiException("Missing the required parameter 'getLinkDetails' when calling createGetLinkDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetLinkDetailsByIdCall(getLinkDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-link-details by ID
     * Create operation of resource: get-link-details
     * @param getLinkDetails get-link-detailsbody object (required)
     * @return GetLinkDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetLinkDetailsRPCOutputSchema createGetLinkDetailsById(GetLinkDetailsRPCInputSchema getLinkDetails) throws ApiException {
        ApiResponse<GetLinkDetailsRPCOutputSchema> resp = createGetLinkDetailsByIdWithHttpInfo(getLinkDetails);
        return resp.getData();
    }

    /**
     * Create get-link-details by ID
     * Create operation of resource: get-link-details
     * @param getLinkDetails get-link-detailsbody object (required)
     * @return ApiResponse&lt;GetLinkDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetLinkDetailsRPCOutputSchema> createGetLinkDetailsByIdWithHttpInfo(GetLinkDetailsRPCInputSchema getLinkDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetLinkDetailsByIdValidateBeforeCall(getLinkDetails, null, null);
        Type localVarReturnType = new TypeToken<GetLinkDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-link-details by ID (asynchronously)
     * Create operation of resource: get-link-details
     * @param getLinkDetails get-link-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetLinkDetailsByIdAsync(GetLinkDetailsRPCInputSchema getLinkDetails, final ApiCallback<GetLinkDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetLinkDetailsByIdValidateBeforeCall(getLinkDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetLinkDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetNodeDetailsById
     * @param getNodeDetails get-node-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetNodeDetailsByIdCall(GetNodeDetailsRPCInputSchema getNodeDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getNodeDetails;

        // create path and map variables
        String localVarPath = "/operations/get-node-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetNodeDetailsByIdValidateBeforeCall(GetNodeDetailsRPCInputSchema getNodeDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getNodeDetails' is set
        if (getNodeDetails == null) {
            throw new ApiException("Missing the required parameter 'getNodeDetails' when calling createGetNodeDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetNodeDetailsByIdCall(getNodeDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-node-details by ID
     * Create operation of resource: get-node-details
     * @param getNodeDetails get-node-detailsbody object (required)
     * @return GetNodeDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetNodeDetailsRPCOutputSchema createGetNodeDetailsById(GetNodeDetailsRPCInputSchema getNodeDetails) throws ApiException {
        ApiResponse<GetNodeDetailsRPCOutputSchema> resp = createGetNodeDetailsByIdWithHttpInfo(getNodeDetails);
        return resp.getData();
    }

    /**
     * Create get-node-details by ID
     * Create operation of resource: get-node-details
     * @param getNodeDetails get-node-detailsbody object (required)
     * @return ApiResponse&lt;GetNodeDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetNodeDetailsRPCOutputSchema> createGetNodeDetailsByIdWithHttpInfo(GetNodeDetailsRPCInputSchema getNodeDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetNodeDetailsByIdValidateBeforeCall(getNodeDetails, null, null);
        Type localVarReturnType = new TypeToken<GetNodeDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-node-details by ID (asynchronously)
     * Create operation of resource: get-node-details
     * @param getNodeDetails get-node-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetNodeDetailsByIdAsync(GetNodeDetailsRPCInputSchema getNodeDetails, final ApiCallback<GetNodeDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetNodeDetailsByIdValidateBeforeCall(getNodeDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetNodeDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetNodeEdgePointDetailsById
     * @param getNodeEdgePointDetails get-node-edge-point-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetNodeEdgePointDetailsByIdCall(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getNodeEdgePointDetails;

        // create path and map variables
        String localVarPath = "/operations/get-node-edge-point-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetNodeEdgePointDetailsByIdValidateBeforeCall(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getNodeEdgePointDetails' is set
        if (getNodeEdgePointDetails == null) {
            throw new ApiException("Missing the required parameter 'getNodeEdgePointDetails' when calling createGetNodeEdgePointDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetNodeEdgePointDetailsByIdCall(getNodeEdgePointDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-node-edge-point-details by ID
     * Create operation of resource: get-node-edge-point-details
     * @param getNodeEdgePointDetails get-node-edge-point-detailsbody object (required)
     * @return GetNodeEdgePointDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetNodeEdgePointDetailsRPCOutputSchema createGetNodeEdgePointDetailsById(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails) throws ApiException {
        ApiResponse<GetNodeEdgePointDetailsRPCOutputSchema> resp = createGetNodeEdgePointDetailsByIdWithHttpInfo(getNodeEdgePointDetails);
        return resp.getData();
    }

    /**
     * Create get-node-edge-point-details by ID
     * Create operation of resource: get-node-edge-point-details
     * @param getNodeEdgePointDetails get-node-edge-point-detailsbody object (required)
     * @return ApiResponse&lt;GetNodeEdgePointDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetNodeEdgePointDetailsRPCOutputSchema> createGetNodeEdgePointDetailsByIdWithHttpInfo(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetNodeEdgePointDetailsByIdValidateBeforeCall(getNodeEdgePointDetails, null, null);
        Type localVarReturnType = new TypeToken<GetNodeEdgePointDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-node-edge-point-details by ID (asynchronously)
     * Create operation of resource: get-node-edge-point-details
     * @param getNodeEdgePointDetails get-node-edge-point-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetNodeEdgePointDetailsByIdAsync(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails, final ApiCallback<GetNodeEdgePointDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetNodeEdgePointDetailsByIdValidateBeforeCall(getNodeEdgePointDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetNodeEdgePointDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetServiceInterfacePointDetailsById
     * @param getServiceInterfacePointDetails get-service-interface-point-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetServiceInterfacePointDetailsByIdCall(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getServiceInterfacePointDetails;

        // create path and map variables
        String localVarPath = "/operations/get-service-interface-point-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetServiceInterfacePointDetailsByIdValidateBeforeCall(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getServiceInterfacePointDetails' is set
        if (getServiceInterfacePointDetails == null) {
            throw new ApiException("Missing the required parameter 'getServiceInterfacePointDetails' when calling createGetServiceInterfacePointDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetServiceInterfacePointDetailsByIdCall(getServiceInterfacePointDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-service-interface-point-details by ID
     * Create operation of resource: get-service-interface-point-details
     * @param getServiceInterfacePointDetails get-service-interface-point-detailsbody object (required)
     * @return GetServiceInterfacePointDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetServiceInterfacePointDetailsRPCOutputSchema createGetServiceInterfacePointDetailsById(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails) throws ApiException {
        ApiResponse<GetServiceInterfacePointDetailsRPCOutputSchema> resp = createGetServiceInterfacePointDetailsByIdWithHttpInfo(getServiceInterfacePointDetails);
        return resp.getData();
    }

    /**
     * Create get-service-interface-point-details by ID
     * Create operation of resource: get-service-interface-point-details
     * @param getServiceInterfacePointDetails get-service-interface-point-detailsbody object (required)
     * @return ApiResponse&lt;GetServiceInterfacePointDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetServiceInterfacePointDetailsRPCOutputSchema> createGetServiceInterfacePointDetailsByIdWithHttpInfo(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetServiceInterfacePointDetailsByIdValidateBeforeCall(getServiceInterfacePointDetails, null, null);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-service-interface-point-details by ID (asynchronously)
     * Create operation of resource: get-service-interface-point-details
     * @param getServiceInterfacePointDetails get-service-interface-point-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetServiceInterfacePointDetailsByIdAsync(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails, final ApiCallback<GetServiceInterfacePointDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetServiceInterfacePointDetailsByIdValidateBeforeCall(getServiceInterfacePointDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetServiceInterfacePointListById
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetServiceInterfacePointListByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/get-service-interface-point-list/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetServiceInterfacePointListByIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createGetServiceInterfacePointListByIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-service-interface-point-list by ID
     * Create operation of resource: get-service-interface-point-list
     * @return GetServiceInterfacePointListRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetServiceInterfacePointListRPCOutputSchema createGetServiceInterfacePointListById() throws ApiException {
        ApiResponse<GetServiceInterfacePointListRPCOutputSchema> resp = createGetServiceInterfacePointListByIdWithHttpInfo();
        return resp.getData();
    }

    /**
     * Create get-service-interface-point-list by ID
     * Create operation of resource: get-service-interface-point-list
     * @return ApiResponse&lt;GetServiceInterfacePointListRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetServiceInterfacePointListRPCOutputSchema> createGetServiceInterfacePointListByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = createGetServiceInterfacePointListByIdValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointListRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-service-interface-point-list by ID (asynchronously)
     * Create operation of resource: get-service-interface-point-list
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetServiceInterfacePointListByIdAsync(final ApiCallback<GetServiceInterfacePointListRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetServiceInterfacePointListByIdValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointListRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetTopologyDetailsById
     * @param getTopologyDetails get-topology-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetTopologyDetailsByIdCall(GetTopologyDetailsRPCInputSchema getTopologyDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getTopologyDetails;

        // create path and map variables
        String localVarPath = "/operations/get-topology-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetTopologyDetailsByIdValidateBeforeCall(GetTopologyDetailsRPCInputSchema getTopologyDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getTopologyDetails' is set
        if (getTopologyDetails == null) {
            throw new ApiException("Missing the required parameter 'getTopologyDetails' when calling createGetTopologyDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetTopologyDetailsByIdCall(getTopologyDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-topology-details by ID
     * Create operation of resource: get-topology-details
     * @param getTopologyDetails get-topology-detailsbody object (required)
     * @return GetTopologyDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTopologyDetailsRPCOutputSchema createGetTopologyDetailsById(GetTopologyDetailsRPCInputSchema getTopologyDetails) throws ApiException {
        ApiResponse<GetTopologyDetailsRPCOutputSchema> resp = createGetTopologyDetailsByIdWithHttpInfo(getTopologyDetails);
        return resp.getData();
    }

    /**
     * Create get-topology-details by ID
     * Create operation of resource: get-topology-details
     * @param getTopologyDetails get-topology-detailsbody object (required)
     * @return ApiResponse&lt;GetTopologyDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTopologyDetailsRPCOutputSchema> createGetTopologyDetailsByIdWithHttpInfo(GetTopologyDetailsRPCInputSchema getTopologyDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetTopologyDetailsByIdValidateBeforeCall(getTopologyDetails, null, null);
        Type localVarReturnType = new TypeToken<GetTopologyDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-topology-details by ID (asynchronously)
     * Create operation of resource: get-topology-details
     * @param getTopologyDetails get-topology-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetTopologyDetailsByIdAsync(GetTopologyDetailsRPCInputSchema getTopologyDetails, final ApiCallback<GetTopologyDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetTopologyDetailsByIdValidateBeforeCall(getTopologyDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTopologyDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetTopologyListById
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetTopologyListByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/get-topology-list/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetTopologyListByIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createGetTopologyListByIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-topology-list by ID
     * Create operation of resource: get-topology-list
     * @return GetTopologyListRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTopologyListRPCOutputSchema createGetTopologyListById() throws ApiException {
        ApiResponse<GetTopologyListRPCOutputSchema> resp = createGetTopologyListByIdWithHttpInfo();
        return resp.getData();
    }

    /**
     * Create get-topology-list by ID
     * Create operation of resource: get-topology-list
     * @return ApiResponse&lt;GetTopologyListRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTopologyListRPCOutputSchema> createGetTopologyListByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = createGetTopologyListByIdValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetTopologyListRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-topology-list by ID (asynchronously)
     * Create operation of resource: get-topology-list
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetTopologyListByIdAsync(final ApiCallback<GetTopologyListRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetTopologyListByIdValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTopologyListRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUpdateConnectivityServiceById
     * @param updateConnectivityService update-connectivity-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUpdateConnectivityServiceByIdCall(UpdateConnectivityServiceRPCInputSchema updateConnectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateConnectivityService;

        // create path and map variables
        String localVarPath = "/operations/update-connectivity-service/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUpdateConnectivityServiceByIdValidateBeforeCall(UpdateConnectivityServiceRPCInputSchema updateConnectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateConnectivityService' is set
        if (updateConnectivityService == null) {
            throw new ApiException("Missing the required parameter 'updateConnectivityService' when calling createUpdateConnectivityServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = createUpdateConnectivityServiceByIdCall(updateConnectivityService, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create update-connectivity-service by ID
     * Create operation of resource: update-connectivity-service
     * @param updateConnectivityService update-connectivity-servicebody object (required)
     * @return UpdateConnectivityServiceRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateConnectivityServiceRPCOutputSchema createUpdateConnectivityServiceById(UpdateConnectivityServiceRPCInputSchema updateConnectivityService) throws ApiException {
        ApiResponse<UpdateConnectivityServiceRPCOutputSchema> resp = createUpdateConnectivityServiceByIdWithHttpInfo(updateConnectivityService);
        return resp.getData();
    }

    /**
     * Create update-connectivity-service by ID
     * Create operation of resource: update-connectivity-service
     * @param updateConnectivityService update-connectivity-servicebody object (required)
     * @return ApiResponse&lt;UpdateConnectivityServiceRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateConnectivityServiceRPCOutputSchema> createUpdateConnectivityServiceByIdWithHttpInfo(UpdateConnectivityServiceRPCInputSchema updateConnectivityService) throws ApiException {
        com.squareup.okhttp.Call call = createUpdateConnectivityServiceByIdValidateBeforeCall(updateConnectivityService, null, null);
        Type localVarReturnType = new TypeToken<UpdateConnectivityServiceRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create update-connectivity-service by ID (asynchronously)
     * Create operation of resource: update-connectivity-service
     * @param updateConnectivityService update-connectivity-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUpdateConnectivityServiceByIdAsync(UpdateConnectivityServiceRPCInputSchema updateConnectivityService, final ApiCallback<UpdateConnectivityServiceRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUpdateConnectivityServiceByIdValidateBeforeCall(updateConnectivityService, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateConnectivityServiceRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUpdateServiceInterfacePointById
     * @param updateServiceInterfacePoint update-service-interface-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUpdateServiceInterfacePointByIdCall(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateServiceInterfacePoint;

        // create path and map variables
        String localVarPath = "/operations/update-service-interface-point/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUpdateServiceInterfacePointByIdValidateBeforeCall(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateServiceInterfacePoint' is set
        if (updateServiceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'updateServiceInterfacePoint' when calling createUpdateServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createUpdateServiceInterfacePointByIdCall(updateServiceInterfacePoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create update-service-interface-point by ID
     * Create operation of resource: update-service-interface-point
     * @param updateServiceInterfacePoint update-service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createUpdateServiceInterfacePointById(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint) throws ApiException {
        createUpdateServiceInterfacePointByIdWithHttpInfo(updateServiceInterfacePoint);
    }

    /**
     * Create update-service-interface-point by ID
     * Create operation of resource: update-service-interface-point
     * @param updateServiceInterfacePoint update-service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createUpdateServiceInterfacePointByIdWithHttpInfo(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = createUpdateServiceInterfacePointByIdValidateBeforeCall(updateServiceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create update-service-interface-point by ID (asynchronously)
     * Create operation of resource: update-service-interface-point
     * @param updateServiceInterfacePoint update-service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUpdateServiceInterfacePointByIdAsync(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUpdateServiceInterfacePointByIdValidateBeforeCall(updateServiceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextById
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextByIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteContextByIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete context by ID
     * Delete operation of resource: context
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextById() throws ApiException {
        deleteContextByIdWithHttpInfo();
    }

    /**
     * Delete context by ID
     * Delete operation of resource: context
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteContextByIdValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete context by ID (asynchronously)
     * Delete operation of resource: context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextByIdAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextByIdValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectionConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectionConnectionEndPointConnectionEndPointByIdCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectionConnectionEndPointConnectionEndPointByIdCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete connection-end-point by ID
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectionConnectionEndPointConnectionEndPointById(String uuid, String connectionEndPointUuid) throws ApiException {
        deleteContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, connectionEndPointUuid);
    }

    /**
     * Delete connection-end-point by ID
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete connection-end-point by ID (asynchronously)
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectionConnectionEndPointConnectionEndPointByIdAsync(String uuid, String connectionEndPointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/connectivity-service-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete connectivity-service-end-point by ID
     * Delete operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(String uuid, String connectionEndPointUuid) throws ApiException {
        deleteContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdWithHttpInfo(uuid, connectionEndPointUuid);
    }

    /**
     * Delete connectivity-service-end-point by ID
     * Delete operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete connectivity-service-end-point by ID (asynchronously)
     * Delete operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdAsync(String uuid, String connectionEndPointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectionConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectionConnectionEndPointNameNameByIdCall(String uuid, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextConnectionConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectionConnectionEndPointNameNameByIdCall(uuid, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectionConnectionEndPointNameNameById(String uuid, String connectionEndPointUuid, String valueName) throws ApiException {
        deleteContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(uuid, connectionEndPointUuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String connectionEndPointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectionConnectionEndPointNameNameByIdAsync(String uuid, String connectionEndPointUuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectionRouteConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete connection-end-point by ID
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectionRouteConnectionEndPointConnectionEndPointById(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        deleteContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid);
    }

    /**
     * Delete connection-end-point by ID
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete connection-end-point by ID (asynchronously)
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectionRouteConnectionEndPointConnectionEndPointByIdAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/connectivity-service-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete connectivity-service-end-point by ID
     * Delete operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        deleteContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid);
    }

    /**
     * Delete connectivity-service-end-point by ID
     * Delete operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete connectivity-service-end-point by ID (asynchronously)
     * Delete operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectionRouteConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectionRouteConnectionEndPointNameNameByIdCall(String uuid, String localId, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectionRouteConnectionEndPointNameNameByIdCall(uuid, localId, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectionRouteConnectionEndPointNameNameById(String uuid, String localId, String connectionEndPointUuid, String valueName) throws ApiException {
        deleteContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectionRouteConnectionEndPointNameNameByIdAsync(String uuid, String localId, String connectionEndPointUuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceConnectivityServiceById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceConnectivityServiceByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceConnectivityServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceConnectivityServiceByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete connectivity-service by ID
     * Delete operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceConnectivityServiceById(String uuid) throws ApiException {
        deleteContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(uuid);
    }

    /**
     * Delete connectivity-service by ID
     * Delete operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete connectivity-service by ID (asynchronously)
     * Delete operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceConnectivityServiceByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceCorouteInclusionCorouteInclusionById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/coroute-inclusion/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceCorouteInclusionCorouteInclusionById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete coroute-inclusion by ID
     * Delete operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceCorouteInclusionCorouteInclusionById(String uuid) throws ApiException {
        deleteContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(uuid);
    }

    /**
     * Delete coroute-inclusion by ID
     * Delete operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete coroute-inclusion by ID (asynchronously)
     * Delete operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceCorouteInclusionCorouteInclusionByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling deleteContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete cost-characteristic by ID
     * Delete operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceCostCharacteristicCostCharacteristicById(String uuid, String costName) throws ApiException {
        deleteContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName);
    }

    /**
     * Delete cost-characteristic by ID
     * Delete operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete cost-characteristic by ID (asynchronously)
     * Delete operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceDiversityExclusionDiversityExclusionById
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(String uuid, String connectivityServiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/diversity-exclusion/{connectivity_service_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connectivity_service_id" + "\\}", apiClient.escapeString(connectivityServiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(String uuid, String connectivityServiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceId' is set
        if (connectivityServiceId == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceId' when calling deleteContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete diversity-exclusion by ID
     * Delete operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceDiversityExclusionDiversityExclusionById(String uuid, String connectivityServiceId) throws ApiException {
        deleteContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(uuid, connectivityServiceId);
    }

    /**
     * Delete diversity-exclusion by ID
     * Delete operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(String uuid, String connectivityServiceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete diversity-exclusion by ID (asynchronously)
     * Delete operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceDiversityExclusionDiversityExclusionByIdAsync(String uuid, String connectivityServiceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete bandwidth-profile by ID
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete bandwidth-profile by ID
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete bandwidth-profile by ID (asynchronously)
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete committed-burst-size by ID
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete committed-burst-size by ID
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete committed-burst-size by ID (asynchronously)
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete committed-information-rate by ID
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete committed-information-rate by ID
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete committed-information-rate by ID (asynchronously)
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete peak-burst-size by ID
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete peak-burst-size by ID
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete peak-burst-size by ID (asynchronously)
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete peak-information-rate by ID
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete peak-information-rate by ID
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete peak-information-rate by ID (asynchronously)
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceEndPointCapacityCapacityById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityCapacityByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityCapacityByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete capacity by ID
     * Delete operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceEndPointCapacityCapacityById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete capacity by ID
     * Delete operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete capacity by ID (asynchronously)
     * Delete operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityCapacityByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete total-size by ID
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete total-size by ID
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete total-size by ID (asynchronously)
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointEndPointByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete end-point by ID
     * Delete operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceEndPointEndPointById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete end-point by ID
     * Delete operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete end-point by ID (asynchronously)
     * Delete operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointEndPointByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextConnectivityServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceEndPointNameNameById(String uuid, String localId, String valueName) throws ApiException {
        deleteContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete service-interface-point by ID (asynchronously)
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceIncludeCoreIncludeCoreById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceIncludeCoreIncludeCoreByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/include-core/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceIncludeCoreIncludeCoreByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceIncludeCoreIncludeCoreById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceIncludeCoreIncludeCoreByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete include-core by ID
     * Delete operation of resource: include-core
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceIncludeCoreIncludeCoreById(String uuid) throws ApiException {
        deleteContextConnectivityServiceIncludeCoreIncludeCoreByIdWithHttpInfo(uuid);
    }

    /**
     * Delete include-core by ID
     * Delete operation of resource: include-core
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceIncludeCoreIncludeCoreByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceIncludeCoreIncludeCoreByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete include-core by ID (asynchronously)
     * Delete operation of resource: include-core
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceIncludeCoreIncludeCoreByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceIncludeCoreIncludeCoreByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling deleteContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete latency-characteristic by ID
     * Delete operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName) throws ApiException {
        deleteContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName);
    }

    /**
     * Delete latency-characteristic by ID
     * Delete operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete latency-characteristic by ID (asynchronously)
     * Delete operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextConnectivityServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceNameNameById(String uuid, String valueName) throws ApiException {
        deleteContextConnectivityServiceNameNameByIdWithHttpInfo(uuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceNameNameByIdAsync(String uuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete bandwidth-profile by ID
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(String uuid) throws ApiException {
        deleteContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid);
    }

    /**
     * Delete bandwidth-profile by ID
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete bandwidth-profile by ID (asynchronously)
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete committed-burst-size by ID
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid) throws ApiException {
        deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid);
    }

    /**
     * Delete committed-burst-size by ID
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete committed-burst-size by ID (asynchronously)
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete committed-information-rate by ID
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid) throws ApiException {
        deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid);
    }

    /**
     * Delete committed-information-rate by ID
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete committed-information-rate by ID (asynchronously)
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete peak-burst-size by ID
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid) throws ApiException {
        deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid);
    }

    /**
     * Delete peak-burst-size by ID
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete peak-burst-size by ID (asynchronously)
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete peak-information-rate by ID
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid) throws ApiException {
        deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid);
    }

    /**
     * Delete peak-information-rate by ID
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete peak-information-rate by ID (asynchronously)
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceRequestedCapacityRequestedCapacityById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceRequestedCapacityRequestedCapacityById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete requested-capacity by ID
     * Delete operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceRequestedCapacityRequestedCapacityById(String uuid) throws ApiException {
        deleteContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(uuid);
    }

    /**
     * Delete requested-capacity by ID
     * Delete operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete requested-capacity by ID (asynchronously)
     * Delete operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityRequestedCapacityByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete total-size by ID
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(String uuid) throws ApiException {
        deleteContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid);
    }

    /**
     * Delete total-size by ID
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete total-size by ID (asynchronously)
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceResilienceTypeResilienceTypeById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/resilience-type/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceResilienceTypeResilienceTypeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete resilience-type by ID
     * Delete operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceResilienceTypeResilienceTypeById(String uuid) throws ApiException {
        deleteContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(uuid);
    }

    /**
     * Delete resilience-type by ID
     * Delete operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete resilience-type by ID (asynchronously)
     * Delete operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceResilienceTypeResilienceTypeByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityServiceScheduleScheduleById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceScheduleScheduleByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/schedule/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityServiceScheduleScheduleById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceScheduleScheduleByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete schedule by ID
     * Delete operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityServiceScheduleScheduleById(String uuid) throws ApiException {
        deleteContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(uuid);
    }

    /**
     * Delete schedule by ID
     * Delete operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete schedule by ID (asynchronously)
     * Delete operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityServiceScheduleScheduleByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextNameNameById
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextNameNameByIdCall(String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/name/{value_name}/"
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextNameNameByIdValidateBeforeCall(String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextNameNameByIdCall(valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextNameNameById(String valueName) throws ApiException {
        deleteContextNameNameByIdWithHttpInfo(valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextNameNameByIdWithHttpInfo(String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextNameNameByIdValidateBeforeCall(valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextNameNameByIdAsync(String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextNameNameByIdValidateBeforeCall(valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathCompServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceEndPointEndPointByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathCompServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextPathCompServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathCompServiceEndPointEndPointByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete end-point by ID
     * Delete operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathCompServiceEndPointEndPointById(String uuid, String localId) throws ApiException {
        deleteContextPathCompServiceEndPointEndPointByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete end-point by ID
     * Delete operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathCompServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete end-point by ID (asynchronously)
     * Delete operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceEndPointEndPointByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathCompServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextPathCompServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathCompServiceEndPointNameNameByIdCall(uuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathCompServiceEndPointNameNameById(String uuid, String localId, String valueName) throws ApiException {
        deleteContextPathCompServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathCompServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathCompServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathCompServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathCompServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextPathCompServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathCompServiceNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathCompServiceNameNameById(String uuid, String valueName) throws ApiException {
        deleteContextPathCompServiceNameNameByIdWithHttpInfo(uuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathCompServiceNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceNameNameByIdAsync(String uuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathCompServiceObjectiveFunctionNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceObjectiveFunctionNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/objective-function/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathCompServiceObjectiveFunctionNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathCompServiceObjectiveFunctionNameNameById(String uuid, String valueName) throws ApiException {
        deleteContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(uuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceObjectiveFunctionNameNameByIdAsync(String uuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathCompServiceObjectiveFunctionObjectiveFunctionById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/objective-function/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathCompServiceObjectiveFunctionObjectiveFunctionById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete objective-function by ID
     * Delete operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathCompServiceObjectiveFunctionObjectiveFunctionById(String uuid) throws ApiException {
        deleteContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdWithHttpInfo(uuid);
    }

    /**
     * Delete objective-function by ID
     * Delete operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete objective-function by ID (asynchronously)
     * Delete operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathCompServiceOptimizationConstraintNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceOptimizationConstraintNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/optimization-constraint/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathCompServiceOptimizationConstraintNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathCompServiceOptimizationConstraintNameNameById(String uuid, String valueName) throws ApiException {
        deleteContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(uuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceOptimizationConstraintNameNameByIdAsync(String uuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathCompServiceOptimizationConstraintOptimizationConstraintById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/optimization-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathCompServiceOptimizationConstraintOptimizationConstraintById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete optimization-constraint by ID
     * Delete operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathCompServiceOptimizationConstraintOptimizationConstraintById(String uuid) throws ApiException {
        deleteContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdWithHttpInfo(uuid);
    }

    /**
     * Delete optimization-constraint by ID
     * Delete operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete optimization-constraint by ID (asynchronously)
     * Delete operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathCompServicePathCompServiceById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServicePathCompServiceByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathCompServicePathCompServiceByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathCompServicePathCompServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathCompServicePathCompServiceByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete path-comp-service by ID
     * Delete operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathCompServicePathCompServiceById(String uuid) throws ApiException {
        deleteContextPathCompServicePathCompServiceByIdWithHttpInfo(uuid);
    }

    /**
     * Delete path-comp-service by ID
     * Delete operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathCompServicePathCompServiceByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete path-comp-service by ID (asynchronously)
     * Delete operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServicePathCompServiceByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathCompServiceRoutingConstraintNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceRoutingConstraintNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathCompServiceRoutingConstraintNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathCompServiceRoutingConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextPathCompServiceRoutingConstraintNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathCompServiceRoutingConstraintNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathCompServiceRoutingConstraintNameNameById(String uuid, String valueName) throws ApiException {
        deleteContextPathCompServiceRoutingConstraintNameNameByIdWithHttpInfo(uuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathCompServiceRoutingConstraintNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathCompServiceRoutingConstraintNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceRoutingConstraintNameNameByIdAsync(String uuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathCompServiceRoutingConstraintNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathCompServiceRoutingConstraintRoutingConstraintById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceRoutingConstraintRoutingConstraintByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathCompServiceRoutingConstraintRoutingConstraintById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathCompServiceRoutingConstraintRoutingConstraintByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete routing-constraint by ID
     * Delete operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathCompServiceRoutingConstraintRoutingConstraintById(String uuid) throws ApiException {
        deleteContextPathCompServiceRoutingConstraintRoutingConstraintByIdWithHttpInfo(uuid);
    }

    /**
     * Delete routing-constraint by ID
     * Delete operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathCompServiceRoutingConstraintRoutingConstraintByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete routing-constraint by ID (asynchronously)
     * Delete operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathCompServiceRoutingConstraintRoutingConstraintByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextServiceInterfacePointNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextServiceInterfacePointNameNameById(String uuid, String valueName) throws ApiException {
        deleteContextServiceInterfacePointNameNameByIdWithHttpInfo(uuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextServiceInterfacePointNameNameByIdAsync(String uuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextServiceInterfacePointServiceInterfacePointByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextServiceInterfacePointServiceInterfacePointById(String uuid) throws ApiException {
        deleteContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid);
    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete service-interface-point by ID (asynchronously)
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for retrieveContext
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve context
     * Retrieve operation of resource: context
     * @return ContextSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContextSchema retrieveContext() throws ApiException {
        ApiResponse<ContextSchema> resp = retrieveContextWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve context
     * Retrieve operation of resource: context
     * @return ApiResponse&lt;ContextSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContextSchema> retrieveContextWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ContextSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve context (asynchronously)
     * Retrieve operation of resource: context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextAsync(final ApiCallback<ContextSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContextSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnection
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection
     * Retrieve operation of resource: connection
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionConnection() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionConnectionWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve connection
     * Retrieve operation of resource: connection
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionConnectionWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection (asynchronously)
     * Retrieve operation of resource: connection
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnectionById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionConnectionById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection by ID
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @return Connection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Connection retrieveContextConnectionConnectionById(String uuid) throws ApiException {
        ApiResponse<Connection> resp = retrieveContextConnectionConnectionByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve connection by ID
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Connection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Connection> retrieveContextConnectionConnectionByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionByIdValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection by ID (asynchronously)
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionByIdAsync(String uuid, final ApiCallback<Connection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/client-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve client-node-edge-point
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointWithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve client-node-edge-point
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve client-node-edge-point (asynchronously)
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointAsync(String uuid, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdCall(String uuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/client-node-edge-point/{topology_id node_id owned_node_edge_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' when calling retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdCall(uuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve client-node-edge-point by ID
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return OwnedNodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointRef retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(String uuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        ApiResponse<OwnedNodeEdgePointRef> resp = retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdWithHttpInfo(uuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId);
        return resp.getData();
    }

    /**
     * Retrieve client-node-edge-point by ID
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointRef> retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdWithHttpInfo(String uuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(uuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve client-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdAsync(String uuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ApiCallback<OwnedNodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(uuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnectionEndPointConnectionEndPoint
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointConnectionEndPointCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointConnectionEndPointValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionConnectionEndPointConnectionEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointConnectionEndPointCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionConnectionEndPointConnectionEndPoint(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionConnectionEndPointConnectionEndPointWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionConnectionEndPointConnectionEndPointWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointConnectionEndPointValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointConnectionEndPointAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointConnectionEndPointValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId ID of topology_id node_id owned_node_edge_point_id connection_end_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointConnectionEndPointByIdCall(String uuid, String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{topology_id node_id owned_node_edge_point_id connection_end_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id connection_end_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId' when calling retrieveContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointConnectionEndPointByIdCall(uuid, topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId ID of topology_id node_id owned_node_edge_point_id connection_end_point_id (required)
     * @return ConnectionEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointRef retrieveContextConnectionConnectionEndPointConnectionEndPointById(String uuid, String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId) throws ApiException {
        ApiResponse<ConnectionEndPointRef> resp = retrieveContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId ID of topology_id node_id owned_node_edge_point_id connection_end_point_id (required)
     * @return ApiResponse&lt;ConnectionEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointRef> retrieveContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId ID of topology_id node_id owned_node_edge_point_id connection_end_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointConnectionEndPointByIdAsync(String uuid, String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, final ApiCallback<ConnectionEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnectionEndPointConnectionEndPointById_0
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointConnectionEndPointById_0Call(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointConnectionEndPointById_0ValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionConnectionEndPointConnectionEndPointById_0(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionConnectionEndPointConnectionEndPointById_0(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointConnectionEndPointById_0Call(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ConnectionEndPointSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointSchema retrieveContextConnectionConnectionEndPointConnectionEndPointById_0(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointSchema> resp = retrieveContextConnectionConnectionEndPointConnectionEndPointById_0WithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointSchema> retrieveContextConnectionConnectionEndPointConnectionEndPointById_0WithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointConnectionEndPointById_0ValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointConnectionEndPointById_0Async(String uuid, String connectionEndPointUuid, final ApiCallback<ConnectionEndPointSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointConnectionEndPointById_0ValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/connectivity-service-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connectivity-service-end-point
     * Retrieve operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ConnectivityServiceEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityServiceEndPointRef retrieveContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectivityServiceEndPointRef> resp = retrieveContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointWithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connectivity-service-end-point
     * Retrieve operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectivityServiceEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityServiceEndPointRef> retrieveContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectivityServiceEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connectivity-service-end-point (asynchronously)
     * Retrieve operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointAsync(String uuid, String connectionEndPointUuid, final ApiCallback<ConnectivityServiceEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityServiceEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnectionEndPointNameName
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointNameNameCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointNameNameValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionConnectionEndPointNameName(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionConnectionEndPointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointNameNameCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionConnectionEndPointNameName(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionConnectionEndPointNameNameWithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionConnectionEndPointNameNameWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointNameNameValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointNameNameAsync(String uuid, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointNameNameValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointNameNameByIdCall(String uuid, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectionConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointNameNameByIdCall(uuid, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectionConnectionEndPointNameNameById(String uuid, String connectionEndPointUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(uuid, connectionEndPointUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String connectionEndPointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointNameNameByIdAsync(String uuid, String connectionEndPointUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/parent-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve parent-node-edge-point
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointWithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve parent-node-edge-point
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve parent-node-edge-point (asynchronously)
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointAsync(String uuid, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdCall(String uuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/parent-node-edge-point/{topology_id node_id owned_node_edge_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' when calling retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdCall(uuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve parent-node-edge-point by ID
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return OwnedNodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointRef retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(String uuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        ApiResponse<OwnedNodeEdgePointRef> resp = retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdWithHttpInfo(uuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId);
        return resp.getData();
    }

    /**
     * Retrieve parent-node-edge-point by ID
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointRef> retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdWithHttpInfo(String uuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdValidateBeforeCall(uuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve parent-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdAsync(String uuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ApiCallback<OwnedNodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdValidateBeforeCall(uuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnectionEndPointSdmTerminationSdmTermination
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointSdmTerminationSdmTerminationCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/sdm-termination/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointSdmTerminationSdmTerminationValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionConnectionEndPointSdmTerminationSdmTermination(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionConnectionEndPointSdmTerminationSdmTermination(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointSdmTerminationSdmTerminationCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve sdm-termination
     * Retrieve operation of resource: sdm-termination
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return SdmTerminationPac
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SdmTerminationPac retrieveContextConnectionConnectionEndPointSdmTerminationSdmTermination(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<SdmTerminationPac> resp = retrieveContextConnectionConnectionEndPointSdmTerminationSdmTerminationWithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve sdm-termination
     * Retrieve operation of resource: sdm-termination
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;SdmTerminationPac&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SdmTerminationPac> retrieveContextConnectionConnectionEndPointSdmTerminationSdmTerminationWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointSdmTerminationSdmTerminationValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<SdmTerminationPac>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve sdm-termination (asynchronously)
     * Retrieve operation of resource: sdm-termination
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointSdmTerminationSdmTerminationAsync(String uuid, String connectionEndPointUuid, final ApiCallback<SdmTerminationPac> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointSdmTerminationSdmTerminationValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SdmTerminationPac>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyCall(String uuid, String connectionEndPointUuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/sdm-termination/selected-frequency-slot/{slot_id}/nominal-central-frequency/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "slot_id" + "\\}", apiClient.escapeString(slotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(String uuid, String connectionEndPointUuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'slotId' is set
        if (slotId == null) {
            throw new ApiException("Missing the required parameter 'slotId' when calling retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyCall(uuid, connectionEndPointUuid, slotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve nominal-central-frequency
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @return NominalCentralFrequencyOrWavelength
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NominalCentralFrequencyOrWavelength retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(String uuid, String connectionEndPointUuid, String slotId) throws ApiException {
        ApiResponse<NominalCentralFrequencyOrWavelength> resp = retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyWithHttpInfo(uuid, connectionEndPointUuid, slotId);
        return resp.getData();
    }

    /**
     * Retrieve nominal-central-frequency
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @return ApiResponse&lt;NominalCentralFrequencyOrWavelength&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NominalCentralFrequencyOrWavelength> retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyWithHttpInfo(String uuid, String connectionEndPointUuid, String slotId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(uuid, connectionEndPointUuid, slotId, null, null);
        Type localVarReturnType = new TypeToken<NominalCentralFrequencyOrWavelength>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve nominal-central-frequency (asynchronously)
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyAsync(String uuid, String connectionEndPointUuid, String slotId, final ApiCallback<NominalCentralFrequencyOrWavelength> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(uuid, connectionEndPointUuid, slotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NominalCentralFrequencyOrWavelength>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/sdm-termination/selected-frequency-slot/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-frequency-slot
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotWithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve selected-frequency-slot
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-frequency-slot (asynchronously)
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotAsync(String uuid, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdCall(String uuid, String connectionEndPointUuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/sdm-termination/selected-frequency-slot/{slot_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "slot_id" + "\\}", apiClient.escapeString(slotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'slotId' is set
        if (slotId == null) {
            throw new ApiException("Missing the required parameter 'slotId' when calling retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdCall(uuid, connectionEndPointUuid, slotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-frequency-slot by ID
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @return FrequencySlot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FrequencySlot retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(String uuid, String connectionEndPointUuid, String slotId) throws ApiException {
        ApiResponse<FrequencySlot> resp = retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdWithHttpInfo(uuid, connectionEndPointUuid, slotId);
        return resp.getData();
    }

    /**
     * Retrieve selected-frequency-slot by ID
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @return ApiResponse&lt;FrequencySlot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FrequencySlot> retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdWithHttpInfo(String uuid, String connectionEndPointUuid, String slotId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdValidateBeforeCall(uuid, connectionEndPointUuid, slotId, null, null);
        Type localVarReturnType = new TypeToken<FrequencySlot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-frequency-slot by ID (asynchronously)
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdAsync(String uuid, String connectionEndPointUuid, String slotId, final ApiCallback<FrequencySlot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdValidateBeforeCall(uuid, connectionEndPointUuid, slotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FrequencySlot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionLowerConnectionLowerConnection
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionLowerConnectionLowerConnectionCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/lower-connection/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionLowerConnectionLowerConnectionValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionLowerConnectionLowerConnection(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionLowerConnectionLowerConnectionCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve lower-connection
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionLowerConnectionLowerConnection(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionLowerConnectionLowerConnectionWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve lower-connection
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionLowerConnectionLowerConnectionWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionLowerConnectionLowerConnectionValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve lower-connection (asynchronously)
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionLowerConnectionLowerConnectionAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionLowerConnectionLowerConnectionValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionLowerConnectionLowerConnectionById
     * @param uuid ID of uuid (required)
     * @param connectionId ID of connection_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionLowerConnectionLowerConnectionByIdCall(String uuid, String connectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/lower-connection/{connection_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_id" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionLowerConnectionLowerConnectionByIdValidateBeforeCall(String uuid, String connectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionLowerConnectionLowerConnectionById(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling retrieveContextConnectionLowerConnectionLowerConnectionById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionLowerConnectionLowerConnectionByIdCall(uuid, connectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve lower-connection by ID
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @param connectionId ID of connection_id (required)
     * @return ConnectionRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionRef retrieveContextConnectionLowerConnectionLowerConnectionById(String uuid, String connectionId) throws ApiException {
        ApiResponse<ConnectionRef> resp = retrieveContextConnectionLowerConnectionLowerConnectionByIdWithHttpInfo(uuid, connectionId);
        return resp.getData();
    }

    /**
     * Retrieve lower-connection by ID
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @param connectionId ID of connection_id (required)
     * @return ApiResponse&lt;ConnectionRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionRef> retrieveContextConnectionLowerConnectionLowerConnectionByIdWithHttpInfo(String uuid, String connectionId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionLowerConnectionLowerConnectionByIdValidateBeforeCall(uuid, connectionId, null, null);
        Type localVarReturnType = new TypeToken<ConnectionRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve lower-connection by ID (asynchronously)
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @param connectionId ID of connection_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionLowerConnectionLowerConnectionByIdAsync(String uuid, String connectionId, final ApiCallback<ConnectionRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionLowerConnectionLowerConnectionByIdValidateBeforeCall(uuid, connectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectionNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectionNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectionNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectionNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/client-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve client-node-edge-point
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve client-node-edge-point
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve client-node-edge-point (asynchronously)
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdCall(String uuid, String localId, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/client-node-edge-point/{topology_id node_id owned_node_edge_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' when calling retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdCall(uuid, localId, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve client-node-edge-point by ID
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return OwnedNodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointRef retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(String uuid, String localId, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        ApiResponse<OwnedNodeEdgePointRef> resp = retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId);
        return resp.getData();
    }

    /**
     * Retrieve client-node-edge-point by ID
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointRef> retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve client-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdAsync(String uuid, String localId, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ApiCallback<OwnedNodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteConnectionEndPointConnectionEndPoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointConnectionEndPointCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointConnectionEndPointValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteConnectionEndPointConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteConnectionEndPointConnectionEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointConnectionEndPointCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionRouteConnectionEndPointConnectionEndPoint(String uuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionRouteConnectionEndPointConnectionEndPointWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionRouteConnectionEndPointConnectionEndPointWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointConnectionEndPointValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointConnectionEndPointAsync(String uuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointConnectionEndPointValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId ID of topology_id node_id owned_node_edge_point_id connection_end_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(String uuid, String localId, String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{topology_id node_id owned_node_edge_point_id connection_end_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id connection_end_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String localId, String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId' when calling retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(uuid, localId, topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId ID of topology_id node_id owned_node_edge_point_id connection_end_point_id (required)
     * @return ConnectionEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointRef retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById(String uuid, String localId, String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId) throws ApiException {
        ApiResponse<ConnectionEndPointRef> resp = retrieveContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, localId, topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId ID of topology_id node_id owned_node_edge_point_id connection_end_point_id (required)
     * @return ApiResponse&lt;ConnectionEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointRef> retrieveContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId ID of topology_id node_id owned_node_edge_point_id connection_end_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointConnectionEndPointByIdAsync(String uuid, String localId, String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, final ApiCallback<ConnectionEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById_0
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById_0Call(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById_0ValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById_0(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById_0(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById_0(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById_0Call(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ConnectionEndPointSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointSchema retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById_0(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointSchema> resp = retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById_0WithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointSchema> retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById_0WithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById_0ValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById_0Async(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<ConnectionEndPointSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById_0ValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/connectivity-service-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connectivity-service-end-point
     * Retrieve operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ConnectivityServiceEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityServiceEndPointRef retrieveContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectivityServiceEndPointRef> resp = retrieveContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connectivity-service-end-point
     * Retrieve operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectivityServiceEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityServiceEndPointRef> retrieveContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectivityServiceEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connectivity-service-end-point (asynchronously)
     * Retrieve operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<ConnectivityServiceEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityServiceEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteConnectionEndPointNameName
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointNameNameCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointNameNameValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteConnectionEndPointNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteConnectionEndPointNameName(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionRouteConnectionEndPointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointNameNameCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionRouteConnectionEndPointNameName(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionRouteConnectionEndPointNameNameWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionRouteConnectionEndPointNameNameWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointNameNameValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointNameNameAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointNameNameValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointNameNameByIdCall(String uuid, String localId, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointNameNameByIdCall(uuid, localId, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectionRouteConnectionEndPointNameNameById(String uuid, String localId, String connectionEndPointUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointNameNameByIdAsync(String uuid, String localId, String connectionEndPointUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/parent-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve parent-node-edge-point
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve parent-node-edge-point
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve parent-node-edge-point (asynchronously)
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdCall(String uuid, String localId, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/parent-node-edge-point/{topology_id node_id owned_node_edge_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' when calling retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdCall(uuid, localId, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve parent-node-edge-point by ID
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return OwnedNodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointRef retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(String uuid, String localId, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        ApiResponse<OwnedNodeEdgePointRef> resp = retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId);
        return resp.getData();
    }

    /**
     * Retrieve parent-node-edge-point by ID
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointRef> retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve parent-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdAsync(String uuid, String localId, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ApiCallback<OwnedNodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteConnectionEndPointSdmTerminationSdmTermination
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointSdmTerminationSdmTerminationCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/sdm-termination/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointSdmTerminationSdmTerminationValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteConnectionEndPointSdmTerminationSdmTermination(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteConnectionEndPointSdmTerminationSdmTermination(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionRouteConnectionEndPointSdmTerminationSdmTermination(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSdmTerminationCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve sdm-termination
     * Retrieve operation of resource: sdm-termination
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return SdmTerminationPac
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SdmTerminationPac retrieveContextConnectionRouteConnectionEndPointSdmTerminationSdmTermination(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<SdmTerminationPac> resp = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSdmTerminationWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve sdm-termination
     * Retrieve operation of resource: sdm-termination
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;SdmTerminationPac&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SdmTerminationPac> retrieveContextConnectionRouteConnectionEndPointSdmTerminationSdmTerminationWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSdmTerminationValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<SdmTerminationPac>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve sdm-termination (asynchronously)
     * Retrieve operation of resource: sdm-termination
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointSdmTerminationSdmTerminationAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<SdmTerminationPac> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSdmTerminationValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SdmTerminationPac>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyCall(String uuid, String localId, String connectionEndPointUuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/sdm-termination/selected-frequency-slot/{slot_id}/nominal-central-frequency/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "slot_id" + "\\}", apiClient.escapeString(slotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'slotId' is set
        if (slotId == null) {
            throw new ApiException("Missing the required parameter 'slotId' when calling retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyCall(uuid, localId, connectionEndPointUuid, slotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve nominal-central-frequency
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @return NominalCentralFrequencyOrWavelength
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NominalCentralFrequencyOrWavelength retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(String uuid, String localId, String connectionEndPointUuid, String slotId) throws ApiException {
        ApiResponse<NominalCentralFrequencyOrWavelength> resp = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyWithHttpInfo(uuid, localId, connectionEndPointUuid, slotId);
        return resp.getData();
    }

    /**
     * Retrieve nominal-central-frequency
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @return ApiResponse&lt;NominalCentralFrequencyOrWavelength&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NominalCentralFrequencyOrWavelength> retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String slotId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(uuid, localId, connectionEndPointUuid, slotId, null, null);
        Type localVarReturnType = new TypeToken<NominalCentralFrequencyOrWavelength>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve nominal-central-frequency (asynchronously)
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyAsync(String uuid, String localId, String connectionEndPointUuid, String slotId, final ApiCallback<NominalCentralFrequencyOrWavelength> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(uuid, localId, connectionEndPointUuid, slotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NominalCentralFrequencyOrWavelength>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/sdm-termination/selected-frequency-slot/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-frequency-slot
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve selected-frequency-slot
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-frequency-slot (asynchronously)
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdCall(String uuid, String localId, String connectionEndPointUuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/sdm-termination/selected-frequency-slot/{slot_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "slot_id" + "\\}", apiClient.escapeString(slotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'slotId' is set
        if (slotId == null) {
            throw new ApiException("Missing the required parameter 'slotId' when calling retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdCall(uuid, localId, connectionEndPointUuid, slotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-frequency-slot by ID
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @return FrequencySlot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FrequencySlot retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(String uuid, String localId, String connectionEndPointUuid, String slotId) throws ApiException {
        ApiResponse<FrequencySlot> resp = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, slotId);
        return resp.getData();
    }

    /**
     * Retrieve selected-frequency-slot by ID
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @return ApiResponse&lt;FrequencySlot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FrequencySlot> retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String slotId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, slotId, null, null);
        Type localVarReturnType = new TypeToken<FrequencySlot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-frequency-slot by ID (asynchronously)
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdAsync(String uuid, String localId, String connectionEndPointUuid, String slotId, final ApiCallback<FrequencySlot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, slotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FrequencySlot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteNameName
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteNameNameCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteNameNameValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteNameNameCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionRouteNameName(String uuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionRouteNameNameWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionRouteNameNameWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteNameNameValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteNameNameAsync(String uuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteNameNameValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteNameNameByIdCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectionRouteNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteNameNameByIdCall(uuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectionRouteNameNameById(String uuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectionRouteNameNameByIdWithHttpInfo(uuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectionRouteNameNameByIdWithHttpInfo(String uuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteNameNameByIdValidateBeforeCall(uuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteNameNameByIdAsync(String uuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteNameNameByIdValidateBeforeCall(uuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteRoute
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteRouteCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteRouteValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteRoute(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteRouteCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve route
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionRouteRoute(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionRouteRouteWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve route
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionRouteRouteWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteRouteValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve route (asynchronously)
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteRouteAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteRouteValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionRouteRouteById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteRouteByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionRouteRouteByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionRouteRouteById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionRouteRouteById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteRouteByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve route by ID
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return Route
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Route retrieveContextConnectionRouteRouteById(String uuid, String localId) throws ApiException {
        ApiResponse<Route> resp = retrieveContextConnectionRouteRouteByIdWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve route by ID
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Route&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Route> retrieveContextConnectionRouteRouteByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionRouteRouteByIdValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<Route>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve route by ID (asynchronously)
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionRouteRouteByIdAsync(String uuid, String localId, final ApiCallback<Route> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionRouteRouteByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Route>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionSwitchControlNameName
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlNameNameCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/switch-control/{switch_control_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionSwitchControlNameNameValidateBeforeCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionSwitchControlNameName(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectionSwitchControlNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlNameNameCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionSwitchControlNameName(String uuid, String switchControlUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionSwitchControlNameNameWithHttpInfo(uuid, switchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionSwitchControlNameNameWithHttpInfo(String uuid, String switchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlNameNameValidateBeforeCall(uuid, switchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlNameNameAsync(String uuid, String switchControlUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlNameNameValidateBeforeCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionSwitchControlNameNameById
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlNameNameByIdCall(String uuid, String switchControlUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/switch-control/{switch_control_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionSwitchControlNameNameByIdValidateBeforeCall(String uuid, String switchControlUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionSwitchControlNameNameById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectionSwitchControlNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectionSwitchControlNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlNameNameByIdCall(uuid, switchControlUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectionSwitchControlNameNameById(String uuid, String switchControlUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectionSwitchControlNameNameByIdWithHttpInfo(uuid, switchControlUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectionSwitchControlNameNameByIdWithHttpInfo(String uuid, String switchControlUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlNameNameByIdValidateBeforeCall(uuid, switchControlUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlNameNameByIdAsync(String uuid, String switchControlUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlNameNameByIdValidateBeforeCall(uuid, switchControlUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionSwitchControlResilienceTypeResilienceType
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlResilienceTypeResilienceTypeCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/switch-control/{switch_control_uuid}/resilience-type/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionSwitchControlResilienceTypeResilienceTypeValidateBeforeCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionSwitchControlResilienceTypeResilienceType(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectionSwitchControlResilienceTypeResilienceType(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlResilienceTypeResilienceTypeCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ResilienceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResilienceType retrieveContextConnectionSwitchControlResilienceTypeResilienceType(String uuid, String switchControlUuid) throws ApiException {
        ApiResponse<ResilienceType> resp = retrieveContextConnectionSwitchControlResilienceTypeResilienceTypeWithHttpInfo(uuid, switchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ApiResponse&lt;ResilienceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResilienceType> retrieveContextConnectionSwitchControlResilienceTypeResilienceTypeWithHttpInfo(String uuid, String switchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlResilienceTypeResilienceTypeValidateBeforeCall(uuid, switchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve resilience-type (asynchronously)
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlResilienceTypeResilienceTypeAsync(String uuid, String switchControlUuid, final ApiCallback<ResilienceType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlResilienceTypeResilienceTypeValidateBeforeCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControl
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/switch-control/{switch_control_uuid}/sub-switch-control/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlValidateBeforeCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControl(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControl(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve sub-switch-control
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControl(String uuid, String switchControlUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlWithHttpInfo(uuid, switchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve sub-switch-control
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlWithHttpInfo(String uuid, String switchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlValidateBeforeCall(uuid, switchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve sub-switch-control (asynchronously)
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlAsync(String uuid, String switchControlUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlValidateBeforeCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlById
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param connectionIdSwitchControlId ID of connection_id switch_control_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdCall(String uuid, String switchControlUuid, String connectionIdSwitchControlId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/switch-control/{switch_control_uuid}/sub-switch-control/{connection_id switch_control_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "connection_id switch_control_id" + "\\}", apiClient.escapeString(connectionIdSwitchControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdValidateBeforeCall(String uuid, String switchControlUuid, String connectionIdSwitchControlId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlById(Async)");
        }
        
        // verify the required parameter 'connectionIdSwitchControlId' is set
        if (connectionIdSwitchControlId == null) {
            throw new ApiException("Missing the required parameter 'connectionIdSwitchControlId' when calling retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdCall(uuid, switchControlUuid, connectionIdSwitchControlId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve sub-switch-control by ID
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param connectionIdSwitchControlId ID of connection_id switch_control_id (required)
     * @return SwitchControlRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwitchControlRef retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlById(String uuid, String switchControlUuid, String connectionIdSwitchControlId) throws ApiException {
        ApiResponse<SwitchControlRef> resp = retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdWithHttpInfo(uuid, switchControlUuid, connectionIdSwitchControlId);
        return resp.getData();
    }

    /**
     * Retrieve sub-switch-control by ID
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param connectionIdSwitchControlId ID of connection_id switch_control_id (required)
     * @return ApiResponse&lt;SwitchControlRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwitchControlRef> retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdWithHttpInfo(String uuid, String switchControlUuid, String connectionIdSwitchControlId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdValidateBeforeCall(uuid, switchControlUuid, connectionIdSwitchControlId, null, null);
        Type localVarReturnType = new TypeToken<SwitchControlRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve sub-switch-control by ID (asynchronously)
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param connectionIdSwitchControlId ID of connection_id switch_control_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdAsync(String uuid, String switchControlUuid, String connectionIdSwitchControlId, final ApiCallback<SwitchControlRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdValidateBeforeCall(uuid, switchControlUuid, connectionIdSwitchControlId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwitchControlRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionSwitchControlSwitchControl
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchControlCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/switch-control/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchControlValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionSwitchControlSwitchControl(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchControlCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve switch-control
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionSwitchControlSwitchControl(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionSwitchControlSwitchControlWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve switch-control
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionSwitchControlSwitchControlWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchControlValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve switch-control (asynchronously)
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchControlAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchControlValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionSwitchControlSwitchControlById
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchControlByIdCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/switch-control/{switch_control_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchControlByIdValidateBeforeCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionSwitchControlSwitchControlById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectionSwitchControlSwitchControlById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchControlByIdCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve switch-control by ID
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return SwitchControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwitchControl retrieveContextConnectionSwitchControlSwitchControlById(String uuid, String switchControlUuid) throws ApiException {
        ApiResponse<SwitchControl> resp = retrieveContextConnectionSwitchControlSwitchControlByIdWithHttpInfo(uuid, switchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve switch-control by ID
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ApiResponse&lt;SwitchControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwitchControl> retrieveContextConnectionSwitchControlSwitchControlByIdWithHttpInfo(String uuid, String switchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchControlByIdValidateBeforeCall(uuid, switchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<SwitchControl>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve switch-control by ID (asynchronously)
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchControlByIdAsync(String uuid, String switchControlUuid, final ApiCallback<SwitchControl> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchControlByIdValidateBeforeCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwitchControl>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionSwitchControlSwitchNameName
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchNameNameCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchNameNameValidateBeforeCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionSwitchControlSwitchNameName(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectionSwitchControlSwitchNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionSwitchControlSwitchNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchNameNameCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionSwitchControlSwitchNameName(String uuid, String switchControlUuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionSwitchControlSwitchNameNameWithHttpInfo(uuid, switchControlUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionSwitchControlSwitchNameNameWithHttpInfo(String uuid, String switchControlUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchNameNameValidateBeforeCall(uuid, switchControlUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchNameNameAsync(String uuid, String switchControlUuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchNameNameValidateBeforeCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionSwitchControlSwitchNameNameById
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchNameNameByIdCall(String uuid, String switchControlUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchNameNameByIdValidateBeforeCall(String uuid, String switchControlUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionSwitchControlSwitchNameNameById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectionSwitchControlSwitchNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionSwitchControlSwitchNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectionSwitchControlSwitchNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchNameNameByIdCall(uuid, switchControlUuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectionSwitchControlSwitchNameNameById(String uuid, String switchControlUuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectionSwitchControlSwitchNameNameByIdWithHttpInfo(uuid, switchControlUuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectionSwitchControlSwitchNameNameByIdWithHttpInfo(String uuid, String switchControlUuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchNameNameByIdValidateBeforeCall(uuid, switchControlUuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchNameNameByIdAsync(String uuid, String switchControlUuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchNameNameByIdValidateBeforeCall(uuid, switchControlUuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/selected-connection-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointValidateBeforeCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-connection-end-point
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint(String uuid, String switchControlUuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointWithHttpInfo(uuid, switchControlUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve selected-connection-end-point
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointWithHttpInfo(String uuid, String switchControlUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointValidateBeforeCall(uuid, switchControlUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-connection-end-point (asynchronously)
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointAsync(String uuid, String switchControlUuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointValidateBeforeCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId ID of topology_id node_id owned_node_edge_point_id connection_end_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdCall(String uuid, String switchControlUuid, String localId, String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/selected-connection-end-point/{topology_id node_id owned_node_edge_point_id connection_end_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id connection_end_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdValidateBeforeCall(String uuid, String switchControlUuid, String localId, String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId' when calling retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdCall(uuid, switchControlUuid, localId, topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-connection-end-point by ID
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId ID of topology_id node_id owned_node_edge_point_id connection_end_point_id (required)
     * @return ConnectionEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointRef retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(String uuid, String switchControlUuid, String localId, String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId) throws ApiException {
        ApiResponse<ConnectionEndPointRef> resp = retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdWithHttpInfo(uuid, switchControlUuid, localId, topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId);
        return resp.getData();
    }

    /**
     * Retrieve selected-connection-end-point by ID
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId ID of topology_id node_id owned_node_edge_point_id connection_end_point_id (required)
     * @return ApiResponse&lt;ConnectionEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointRef> retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdWithHttpInfo(String uuid, String switchControlUuid, String localId, String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdValidateBeforeCall(uuid, switchControlUuid, localId, topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId ID of topology_id node_id owned_node_edge_point_id connection_end_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdAsync(String uuid, String switchControlUuid, String localId, String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, final ApiCallback<ConnectionEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdValidateBeforeCall(uuid, switchControlUuid, localId, topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/selected-route/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteValidateBeforeCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-route
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute(String uuid, String switchControlUuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteWithHttpInfo(uuid, switchControlUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve selected-route
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteWithHttpInfo(String uuid, String switchControlUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteValidateBeforeCall(uuid, switchControlUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-route (asynchronously)
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteAsync(String uuid, String switchControlUuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteValidateBeforeCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionIdRouteId ID of connection_id route_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdCall(String uuid, String switchControlUuid, String localId, String connectionIdRouteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/selected-route/{connection_id route_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_id route_id" + "\\}", apiClient.escapeString(connectionIdRouteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdValidateBeforeCall(String uuid, String switchControlUuid, String localId, String connectionIdRouteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(Async)");
        }
        
        // verify the required parameter 'connectionIdRouteId' is set
        if (connectionIdRouteId == null) {
            throw new ApiException("Missing the required parameter 'connectionIdRouteId' when calling retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdCall(uuid, switchControlUuid, localId, connectionIdRouteId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-route by ID
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionIdRouteId ID of connection_id route_id (required)
     * @return RouteRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RouteRef retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(String uuid, String switchControlUuid, String localId, String connectionIdRouteId) throws ApiException {
        ApiResponse<RouteRef> resp = retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdWithHttpInfo(uuid, switchControlUuid, localId, connectionIdRouteId);
        return resp.getData();
    }

    /**
     * Retrieve selected-route by ID
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionIdRouteId ID of connection_id route_id (required)
     * @return ApiResponse&lt;RouteRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RouteRef> retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdWithHttpInfo(String uuid, String switchControlUuid, String localId, String connectionIdRouteId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdValidateBeforeCall(uuid, switchControlUuid, localId, connectionIdRouteId, null, null);
        Type localVarReturnType = new TypeToken<RouteRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-route by ID (asynchronously)
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionIdRouteId ID of connection_id route_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdAsync(String uuid, String switchControlUuid, String localId, String connectionIdRouteId, final ApiCallback<RouteRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdValidateBeforeCall(uuid, switchControlUuid, localId, connectionIdRouteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RouteRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionSwitchControlSwitchSwitch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSwitchCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSwitchValidateBeforeCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionSwitchControlSwitchSwitch(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectionSwitchControlSwitchSwitch(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSwitchCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve switch
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectionSwitchControlSwitchSwitch(String uuid, String switchControlUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectionSwitchControlSwitchSwitchWithHttpInfo(uuid, switchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve switch
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectionSwitchControlSwitchSwitchWithHttpInfo(String uuid, String switchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSwitchValidateBeforeCall(uuid, switchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve switch (asynchronously)
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSwitchAsync(String uuid, String switchControlUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSwitchValidateBeforeCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectionSwitchControlSwitchSwitchById
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSwitchByIdCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSwitchByIdValidateBeforeCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectionSwitchControlSwitchSwitchById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectionSwitchControlSwitchSwitchById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectionSwitchControlSwitchSwitchById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSwitchByIdCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve switch by ID
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return ModelSwitch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelSwitch retrieveContextConnectionSwitchControlSwitchSwitchById(String uuid, String switchControlUuid, String localId) throws ApiException {
        ApiResponse<ModelSwitch> resp = retrieveContextConnectionSwitchControlSwitchSwitchByIdWithHttpInfo(uuid, switchControlUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve switch by ID
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;ModelSwitch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelSwitch> retrieveContextConnectionSwitchControlSwitchSwitchByIdWithHttpInfo(String uuid, String switchControlUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSwitchByIdValidateBeforeCall(uuid, switchControlUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<ModelSwitch>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve switch by ID (asynchronously)
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectionSwitchControlSwitchSwitchByIdAsync(String uuid, String switchControlUuid, String localId, final ApiCallback<ModelSwitch> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectionSwitchControlSwitchSwitchByIdValidateBeforeCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelSwitch>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceAvoidTopologyAvoidTopology
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/avoid-topology/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceAvoidTopologyAvoidTopology(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve avoid-topology
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceAvoidTopologyAvoidTopology(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve avoid-topology
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve avoid-topology (asynchronously)
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyById
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyByIdCall(String uuid, String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/avoid-topology/{topology_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_id" + "\\}", apiClient.escapeString(topologyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyByIdValidateBeforeCall(String uuid, String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyById(Async)");
        }
        
        // verify the required parameter 'topologyId' is set
        if (topologyId == null) {
            throw new ApiException("Missing the required parameter 'topologyId' when calling retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyByIdCall(uuid, topologyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve avoid-topology by ID
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyById(String uuid, String topologyId) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyByIdWithHttpInfo(uuid, topologyId);
        return resp.getData();
    }

    /**
     * Retrieve avoid-topology by ID
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyByIdWithHttpInfo(String uuid, String topologyId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyByIdValidateBeforeCall(uuid, topologyId, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve avoid-topology by ID (asynchronously)
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyByIdAsync(String uuid, String topologyId, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyByIdValidateBeforeCall(uuid, topologyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceConnectionConnection
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceConnectionConnectionCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/connection/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceConnectionConnectionValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceConnectionConnection(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceConnectionConnectionCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceConnectionConnection(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceConnectionConnectionWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve connection
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceConnectionConnectionWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceConnectionConnectionValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection (asynchronously)
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceConnectionConnectionAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceConnectionConnectionValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceConnectionConnectionById
     * @param uuid ID of uuid (required)
     * @param connectionId ID of connection_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceConnectionConnectionByIdCall(String uuid, String connectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/connection/{connection_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_id" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceConnectionConnectionByIdValidateBeforeCall(String uuid, String connectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceConnectionConnectionById(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling retrieveContextConnectivityServiceConnectionConnectionById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceConnectionConnectionByIdCall(uuid, connectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection by ID
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @param connectionId ID of connection_id (required)
     * @return ConnectionRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionRef retrieveContextConnectivityServiceConnectionConnectionById(String uuid, String connectionId) throws ApiException {
        ApiResponse<ConnectionRef> resp = retrieveContextConnectivityServiceConnectionConnectionByIdWithHttpInfo(uuid, connectionId);
        return resp.getData();
    }

    /**
     * Retrieve connection by ID
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @param connectionId ID of connection_id (required)
     * @return ApiResponse&lt;ConnectionRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionRef> retrieveContextConnectivityServiceConnectionConnectionByIdWithHttpInfo(String uuid, String connectionId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceConnectionConnectionByIdValidateBeforeCall(uuid, connectionId, null, null);
        Type localVarReturnType = new TypeToken<ConnectionRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection by ID (asynchronously)
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @param connectionId ID of connection_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceConnectionConnectionByIdAsync(String uuid, String connectionId, final ApiCallback<ConnectionRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceConnectionConnectionByIdValidateBeforeCall(uuid, connectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceConnectivityService
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceConnectivityServiceCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceConnectivityServiceValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceConnectivityServiceCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connectivity-service
     * Retrieve operation of resource: connectivity-service
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceConnectivityService() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceConnectivityServiceWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve connectivity-service
     * Retrieve operation of resource: connectivity-service
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceConnectivityServiceWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceConnectivityServiceValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connectivity-service (asynchronously)
     * Retrieve operation of resource: connectivity-service
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceConnectivityServiceAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceConnectivityServiceValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceConnectivityServiceById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceConnectivityServiceByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceConnectivityServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceConnectivityServiceByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connectivity-service by ID
     * Retrieve operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @return ConnectivityServiceSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityServiceSchema retrieveContextConnectivityServiceConnectivityServiceById(String uuid) throws ApiException {
        ApiResponse<ConnectivityServiceSchema> resp = retrieveContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve connectivity-service by ID
     * Retrieve operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;ConnectivityServiceSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityServiceSchema> retrieveContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectivityServiceSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connectivity-service by ID (asynchronously)
     * Retrieve operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceConnectivityServiceByIdAsync(String uuid, final ApiCallback<ConnectivityServiceSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityServiceSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceCorouteInclusionCorouteInclusion
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceCorouteInclusionCorouteInclusionCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/coroute-inclusion/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceCorouteInclusionCorouteInclusionValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceCorouteInclusionCorouteInclusion(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceCorouteInclusionCorouteInclusionCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve coroute-inclusion
     * Retrieve operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @return ConnectivityServiceRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityServiceRef retrieveContextConnectivityServiceCorouteInclusionCorouteInclusion(String uuid) throws ApiException {
        ApiResponse<ConnectivityServiceRef> resp = retrieveContextConnectivityServiceCorouteInclusionCorouteInclusionWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve coroute-inclusion
     * Retrieve operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;ConnectivityServiceRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityServiceRef> retrieveContextConnectivityServiceCorouteInclusionCorouteInclusionWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceCorouteInclusionCorouteInclusionValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectivityServiceRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve coroute-inclusion (asynchronously)
     * Retrieve operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceCorouteInclusionCorouteInclusionAsync(String uuid, final ApiCallback<ConnectivityServiceRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceCorouteInclusionCorouteInclusionValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityServiceRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceCostCharacteristicCostCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicById(String uuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceDiversityExclusionDiversityExclusion
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/diversity-exclusion/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceDiversityExclusionDiversityExclusion(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve diversity-exclusion
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceDiversityExclusionDiversityExclusion(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve diversity-exclusion
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve diversity-exclusion (asynchronously)
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionById
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(String uuid, String connectivityServiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/diversity-exclusion/{connectivity_service_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connectivity_service_id" + "\\}", apiClient.escapeString(connectivityServiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(String uuid, String connectivityServiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceId' is set
        if (connectivityServiceId == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceId' when calling retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve diversity-exclusion by ID
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @return ConnectivityServiceRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityServiceRef retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionById(String uuid, String connectivityServiceId) throws ApiException {
        ApiResponse<ConnectivityServiceRef> resp = retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(uuid, connectivityServiceId);
        return resp.getData();
    }

    /**
     * Retrieve diversity-exclusion by ID
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @return ApiResponse&lt;ConnectivityServiceRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityServiceRef> retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(String uuid, String connectivityServiceId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceId, null, null);
        Type localVarReturnType = new TypeToken<ConnectivityServiceRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve diversity-exclusion by ID (asynchronously)
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionByIdAsync(String uuid, String connectivityServiceId, final ApiCallback<ConnectivityServiceRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityServiceRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfile(String uuid, String localId) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String localId, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceEndPointCapacityCapacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityCapacityCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityCapacityValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceEndPointCapacityCapacity(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityServiceEndPointCapacityCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityCapacityCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve capacity
     * Retrieve operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextConnectivityServiceEndPointCapacityCapacity(String uuid, String localId) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextConnectivityServiceEndPointCapacityCapacityWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve capacity
     * Retrieve operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextConnectivityServiceEndPointCapacityCapacityWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityCapacityValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve capacity (asynchronously)
     * Retrieve operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityCapacityAsync(String uuid, String localId, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityCapacityValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceEndPointCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceEndPointCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityServiceEndPointCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityServiceEndPointCapacityTotalSizeTotalSize(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceEndPointEndPoint
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointEndPointCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointEndPointValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceEndPointEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointEndPointCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve end-point
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceEndPointEndPoint(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceEndPointEndPointWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve end-point
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceEndPointEndPointWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointEndPointValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve end-point (asynchronously)
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointEndPointAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointEndPointValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointEndPointByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve end-point by ID
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ConnectivityServiceEndPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityServiceEndPoint retrieveContextConnectivityServiceEndPointEndPointById(String uuid, String localId) throws ApiException {
        ApiResponse<ConnectivityServiceEndPoint> resp = retrieveContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve end-point by ID
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;ConnectivityServiceEndPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityServiceEndPoint> retrieveContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<ConnectivityServiceEndPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve end-point by ID (asynchronously)
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointEndPointByIdAsync(String uuid, String localId, final ApiCallback<ConnectivityServiceEndPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityServiceEndPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceEndPointNameName
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointNameNameCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointNameNameValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceEndPointNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityServiceEndPointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointNameNameCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceEndPointNameName(String uuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceEndPointNameNameWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceEndPointNameNameWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointNameNameValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointNameNameAsync(String uuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointNameNameValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityServiceEndPointNameNameById(String uuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ServiceInterfacePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInterfacePointRef retrieveContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePoint(String uuid, String localId) throws ApiException {
        ApiResponse<ServiceInterfacePointRef> resp = retrieveContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;ServiceInterfacePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInterfacePointRef> retrieveContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve service-interface-point (asynchronously)
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointAsync(String uuid, String localId, final ApiCallback<ServiceInterfacePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceExcludeLinkExcludeLink
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludeLinkExcludeLinkCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/exclude-link/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludeLinkExcludeLinkValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceExcludeLinkExcludeLink(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludeLinkExcludeLinkCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-link
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceExcludeLinkExcludeLink(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceExcludeLinkExcludeLinkWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-link
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceExcludeLinkExcludeLinkWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludeLinkExcludeLinkValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-link (asynchronously)
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludeLinkExcludeLinkAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludeLinkExcludeLinkValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceExcludeLinkExcludeLinkById
     * @param uuid ID of uuid (required)
     * @param topologyIdLinkId ID of topology_id link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludeLinkExcludeLinkByIdCall(String uuid, String topologyIdLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/exclude-link/{topology_id link_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_id link_id" + "\\}", apiClient.escapeString(topologyIdLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludeLinkExcludeLinkByIdValidateBeforeCall(String uuid, String topologyIdLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceExcludeLinkExcludeLinkById(Async)");
        }
        
        // verify the required parameter 'topologyIdLinkId' is set
        if (topologyIdLinkId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdLinkId' when calling retrieveContextConnectivityServiceExcludeLinkExcludeLinkById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludeLinkExcludeLinkByIdCall(uuid, topologyIdLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-link by ID
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param topologyIdLinkId ID of topology_id link_id (required)
     * @return LinkRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkRef retrieveContextConnectivityServiceExcludeLinkExcludeLinkById(String uuid, String topologyIdLinkId) throws ApiException {
        ApiResponse<LinkRef> resp = retrieveContextConnectivityServiceExcludeLinkExcludeLinkByIdWithHttpInfo(uuid, topologyIdLinkId);
        return resp.getData();
    }

    /**
     * Retrieve exclude-link by ID
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param topologyIdLinkId ID of topology_id link_id (required)
     * @return ApiResponse&lt;LinkRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkRef> retrieveContextConnectivityServiceExcludeLinkExcludeLinkByIdWithHttpInfo(String uuid, String topologyIdLinkId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludeLinkExcludeLinkByIdValidateBeforeCall(uuid, topologyIdLinkId, null, null);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-link by ID (asynchronously)
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param topologyIdLinkId ID of topology_id link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludeLinkExcludeLinkByIdAsync(String uuid, String topologyIdLinkId, final ApiCallback<LinkRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludeLinkExcludeLinkByIdValidateBeforeCall(uuid, topologyIdLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceExcludeNodeExcludeNode
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludeNodeExcludeNodeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/exclude-node/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludeNodeExcludeNodeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceExcludeNodeExcludeNode(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludeNodeExcludeNodeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-node
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceExcludeNodeExcludeNode(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceExcludeNodeExcludeNodeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-node
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceExcludeNodeExcludeNodeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludeNodeExcludeNodeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-node (asynchronously)
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludeNodeExcludeNodeAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludeNodeExcludeNodeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceExcludeNodeExcludeNodeById
     * @param uuid ID of uuid (required)
     * @param topologyIdNodeId ID of topology_id node_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludeNodeExcludeNodeByIdCall(String uuid, String topologyIdNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/exclude-node/{topology_id node_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_id node_id" + "\\}", apiClient.escapeString(topologyIdNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludeNodeExcludeNodeByIdValidateBeforeCall(String uuid, String topologyIdNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceExcludeNodeExcludeNodeById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeId' is set
        if (topologyIdNodeId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeId' when calling retrieveContextConnectivityServiceExcludeNodeExcludeNodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludeNodeExcludeNodeByIdCall(uuid, topologyIdNodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-node by ID
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param topologyIdNodeId ID of topology_id node_id (required)
     * @return NodeRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRef retrieveContextConnectivityServiceExcludeNodeExcludeNodeById(String uuid, String topologyIdNodeId) throws ApiException {
        ApiResponse<NodeRef> resp = retrieveContextConnectivityServiceExcludeNodeExcludeNodeByIdWithHttpInfo(uuid, topologyIdNodeId);
        return resp.getData();
    }

    /**
     * Retrieve exclude-node by ID
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param topologyIdNodeId ID of topology_id node_id (required)
     * @return ApiResponse&lt;NodeRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRef> retrieveContextConnectivityServiceExcludeNodeExcludeNodeByIdWithHttpInfo(String uuid, String topologyIdNodeId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludeNodeExcludeNodeByIdValidateBeforeCall(uuid, topologyIdNodeId, null, null);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-node by ID (asynchronously)
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param topologyIdNodeId ID of topology_id node_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludeNodeExcludeNodeByIdAsync(String uuid, String topologyIdNodeId, final ApiCallback<NodeRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludeNodeExcludeNodeByIdValidateBeforeCall(uuid, topologyIdNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceExcludePathExcludePath
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludePathExcludePathCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/exclude-path/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludePathExcludePathValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceExcludePathExcludePath(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludePathExcludePathCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-path
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceExcludePathExcludePath(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceExcludePathExcludePathWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-path
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceExcludePathExcludePathWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludePathExcludePathValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-path (asynchronously)
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludePathExcludePathAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludePathExcludePathValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceExcludePathExcludePathById
     * @param uuid ID of uuid (required)
     * @param pathId ID of path_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludePathExcludePathByIdCall(String uuid, String pathId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/exclude-path/{path_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "path_id" + "\\}", apiClient.escapeString(pathId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludePathExcludePathByIdValidateBeforeCall(String uuid, String pathId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceExcludePathExcludePathById(Async)");
        }
        
        // verify the required parameter 'pathId' is set
        if (pathId == null) {
            throw new ApiException("Missing the required parameter 'pathId' when calling retrieveContextConnectivityServiceExcludePathExcludePathById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludePathExcludePathByIdCall(uuid, pathId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-path by ID
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param pathId ID of path_id (required)
     * @return PathRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathRef retrieveContextConnectivityServiceExcludePathExcludePathById(String uuid, String pathId) throws ApiException {
        ApiResponse<PathRef> resp = retrieveContextConnectivityServiceExcludePathExcludePathByIdWithHttpInfo(uuid, pathId);
        return resp.getData();
    }

    /**
     * Retrieve exclude-path by ID
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param pathId ID of path_id (required)
     * @return ApiResponse&lt;PathRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathRef> retrieveContextConnectivityServiceExcludePathExcludePathByIdWithHttpInfo(String uuid, String pathId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludePathExcludePathByIdValidateBeforeCall(uuid, pathId, null, null);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-path by ID (asynchronously)
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param pathId ID of path_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceExcludePathExcludePathByIdAsync(String uuid, String pathId, final ApiCallback<PathRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceExcludePathExcludePathByIdValidateBeforeCall(uuid, pathId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceIncludeCoreIncludeCore
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeCoreIncludeCoreCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/include-core/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeCoreIncludeCoreValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceIncludeCoreIncludeCore(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeCoreIncludeCoreCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-core
     * Retrieve operation of resource: include-core
     * @param uuid ID of uuid (required)
     * @return SdmTerminationPac
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SdmTerminationPac retrieveContextConnectivityServiceIncludeCoreIncludeCore(String uuid) throws ApiException {
        ApiResponse<SdmTerminationPac> resp = retrieveContextConnectivityServiceIncludeCoreIncludeCoreWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-core
     * Retrieve operation of resource: include-core
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;SdmTerminationPac&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SdmTerminationPac> retrieveContextConnectivityServiceIncludeCoreIncludeCoreWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeCoreIncludeCoreValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<SdmTerminationPac>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-core (asynchronously)
     * Retrieve operation of resource: include-core
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeCoreIncludeCoreAsync(String uuid, final ApiCallback<SdmTerminationPac> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeCoreIncludeCoreValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SdmTerminationPac>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency
     * @param uuid ID of uuid (required)
     * @param slotId ID of slot_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyCall(String uuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/include-core/selected-frequency-slot/{slot_id}/nominal-central-frequency/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "slot_id" + "\\}", apiClient.escapeString(slotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(String uuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'slotId' is set
        if (slotId == null) {
            throw new ApiException("Missing the required parameter 'slotId' when calling retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyCall(uuid, slotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve nominal-central-frequency
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param slotId ID of slot_id (required)
     * @return NominalCentralFrequencyOrWavelength
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NominalCentralFrequencyOrWavelength retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(String uuid, String slotId) throws ApiException {
        ApiResponse<NominalCentralFrequencyOrWavelength> resp = retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyWithHttpInfo(uuid, slotId);
        return resp.getData();
    }

    /**
     * Retrieve nominal-central-frequency
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param slotId ID of slot_id (required)
     * @return ApiResponse&lt;NominalCentralFrequencyOrWavelength&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NominalCentralFrequencyOrWavelength> retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyWithHttpInfo(String uuid, String slotId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(uuid, slotId, null, null);
        Type localVarReturnType = new TypeToken<NominalCentralFrequencyOrWavelength>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve nominal-central-frequency (asynchronously)
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param slotId ID of slot_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyAsync(String uuid, String slotId, final ApiCallback<NominalCentralFrequencyOrWavelength> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(uuid, slotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NominalCentralFrequencyOrWavelength>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlot
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/include-core/selected-frequency-slot/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlot(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-frequency-slot
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlot(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve selected-frequency-slot
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-frequency-slot (asynchronously)
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotById
     * @param uuid ID of uuid (required)
     * @param slotId ID of slot_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotByIdCall(String uuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/include-core/selected-frequency-slot/{slot_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "slot_id" + "\\}", apiClient.escapeString(slotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotByIdValidateBeforeCall(String uuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'slotId' is set
        if (slotId == null) {
            throw new ApiException("Missing the required parameter 'slotId' when calling retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotByIdCall(uuid, slotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-frequency-slot by ID
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param slotId ID of slot_id (required)
     * @return FrequencySlot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FrequencySlot retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotById(String uuid, String slotId) throws ApiException {
        ApiResponse<FrequencySlot> resp = retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotByIdWithHttpInfo(uuid, slotId);
        return resp.getData();
    }

    /**
     * Retrieve selected-frequency-slot by ID
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param slotId ID of slot_id (required)
     * @return ApiResponse&lt;FrequencySlot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FrequencySlot> retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotByIdWithHttpInfo(String uuid, String slotId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotByIdValidateBeforeCall(uuid, slotId, null, null);
        Type localVarReturnType = new TypeToken<FrequencySlot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-frequency-slot by ID (asynchronously)
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param slotId ID of slot_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotByIdAsync(String uuid, String slotId, final ApiCallback<FrequencySlot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotByIdValidateBeforeCall(uuid, slotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FrequencySlot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceIncludeLinkIncludeLink
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeLinkIncludeLinkCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/include-link/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeLinkIncludeLinkValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceIncludeLinkIncludeLink(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeLinkIncludeLinkCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-link
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceIncludeLinkIncludeLink(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceIncludeLinkIncludeLinkWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-link
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceIncludeLinkIncludeLinkWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeLinkIncludeLinkValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-link (asynchronously)
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeLinkIncludeLinkAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeLinkIncludeLinkValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceIncludeLinkIncludeLinkById
     * @param uuid ID of uuid (required)
     * @param topologyIdLinkId ID of topology_id link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeLinkIncludeLinkByIdCall(String uuid, String topologyIdLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/include-link/{topology_id link_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_id link_id" + "\\}", apiClient.escapeString(topologyIdLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeLinkIncludeLinkByIdValidateBeforeCall(String uuid, String topologyIdLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceIncludeLinkIncludeLinkById(Async)");
        }
        
        // verify the required parameter 'topologyIdLinkId' is set
        if (topologyIdLinkId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdLinkId' when calling retrieveContextConnectivityServiceIncludeLinkIncludeLinkById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeLinkIncludeLinkByIdCall(uuid, topologyIdLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-link by ID
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param topologyIdLinkId ID of topology_id link_id (required)
     * @return LinkRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkRef retrieveContextConnectivityServiceIncludeLinkIncludeLinkById(String uuid, String topologyIdLinkId) throws ApiException {
        ApiResponse<LinkRef> resp = retrieveContextConnectivityServiceIncludeLinkIncludeLinkByIdWithHttpInfo(uuid, topologyIdLinkId);
        return resp.getData();
    }

    /**
     * Retrieve include-link by ID
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param topologyIdLinkId ID of topology_id link_id (required)
     * @return ApiResponse&lt;LinkRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkRef> retrieveContextConnectivityServiceIncludeLinkIncludeLinkByIdWithHttpInfo(String uuid, String topologyIdLinkId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeLinkIncludeLinkByIdValidateBeforeCall(uuid, topologyIdLinkId, null, null);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-link by ID (asynchronously)
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param topologyIdLinkId ID of topology_id link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeLinkIncludeLinkByIdAsync(String uuid, String topologyIdLinkId, final ApiCallback<LinkRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeLinkIncludeLinkByIdValidateBeforeCall(uuid, topologyIdLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceIncludeNodeIncludeNode
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeNodeIncludeNodeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/include-node/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeNodeIncludeNodeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceIncludeNodeIncludeNode(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeNodeIncludeNodeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-node
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceIncludeNodeIncludeNode(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceIncludeNodeIncludeNodeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-node
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceIncludeNodeIncludeNodeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeNodeIncludeNodeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-node (asynchronously)
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeNodeIncludeNodeAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeNodeIncludeNodeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceIncludeNodeIncludeNodeById
     * @param uuid ID of uuid (required)
     * @param topologyIdNodeId ID of topology_id node_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeNodeIncludeNodeByIdCall(String uuid, String topologyIdNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/include-node/{topology_id node_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_id node_id" + "\\}", apiClient.escapeString(topologyIdNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeNodeIncludeNodeByIdValidateBeforeCall(String uuid, String topologyIdNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceIncludeNodeIncludeNodeById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeId' is set
        if (topologyIdNodeId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeId' when calling retrieveContextConnectivityServiceIncludeNodeIncludeNodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeNodeIncludeNodeByIdCall(uuid, topologyIdNodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-node by ID
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param topologyIdNodeId ID of topology_id node_id (required)
     * @return NodeRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRef retrieveContextConnectivityServiceIncludeNodeIncludeNodeById(String uuid, String topologyIdNodeId) throws ApiException {
        ApiResponse<NodeRef> resp = retrieveContextConnectivityServiceIncludeNodeIncludeNodeByIdWithHttpInfo(uuid, topologyIdNodeId);
        return resp.getData();
    }

    /**
     * Retrieve include-node by ID
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param topologyIdNodeId ID of topology_id node_id (required)
     * @return ApiResponse&lt;NodeRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRef> retrieveContextConnectivityServiceIncludeNodeIncludeNodeByIdWithHttpInfo(String uuid, String topologyIdNodeId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeNodeIncludeNodeByIdValidateBeforeCall(uuid, topologyIdNodeId, null, null);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-node by ID (asynchronously)
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param topologyIdNodeId ID of topology_id node_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeNodeIncludeNodeByIdAsync(String uuid, String topologyIdNodeId, final ApiCallback<NodeRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeNodeIncludeNodeByIdValidateBeforeCall(uuid, topologyIdNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceIncludePathIncludePath
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludePathIncludePathCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/include-path/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludePathIncludePathValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceIncludePathIncludePath(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludePathIncludePathCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-path
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceIncludePathIncludePath(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceIncludePathIncludePathWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-path
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceIncludePathIncludePathWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludePathIncludePathValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-path (asynchronously)
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludePathIncludePathAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludePathIncludePathValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceIncludePathIncludePathById
     * @param uuid ID of uuid (required)
     * @param pathId ID of path_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludePathIncludePathByIdCall(String uuid, String pathId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/include-path/{path_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "path_id" + "\\}", apiClient.escapeString(pathId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludePathIncludePathByIdValidateBeforeCall(String uuid, String pathId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceIncludePathIncludePathById(Async)");
        }
        
        // verify the required parameter 'pathId' is set
        if (pathId == null) {
            throw new ApiException("Missing the required parameter 'pathId' when calling retrieveContextConnectivityServiceIncludePathIncludePathById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludePathIncludePathByIdCall(uuid, pathId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-path by ID
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param pathId ID of path_id (required)
     * @return PathRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathRef retrieveContextConnectivityServiceIncludePathIncludePathById(String uuid, String pathId) throws ApiException {
        ApiResponse<PathRef> resp = retrieveContextConnectivityServiceIncludePathIncludePathByIdWithHttpInfo(uuid, pathId);
        return resp.getData();
    }

    /**
     * Retrieve include-path by ID
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param pathId ID of path_id (required)
     * @return ApiResponse&lt;PathRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathRef> retrieveContextConnectivityServiceIncludePathIncludePathByIdWithHttpInfo(String uuid, String pathId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludePathIncludePathByIdValidateBeforeCall(uuid, pathId, null, null);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-path by ID (asynchronously)
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param pathId ID of path_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludePathIncludePathByIdAsync(String uuid, String pathId, final ApiCallback<PathRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludePathIncludePathByIdValidateBeforeCall(uuid, pathId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceIncludeTopologyIncludeTopology
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/include-topology/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceIncludeTopologyIncludeTopology(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-topology
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceIncludeTopologyIncludeTopology(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-topology
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-topology (asynchronously)
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyById
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyByIdCall(String uuid, String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/include-topology/{topology_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_id" + "\\}", apiClient.escapeString(topologyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyByIdValidateBeforeCall(String uuid, String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyById(Async)");
        }
        
        // verify the required parameter 'topologyId' is set
        if (topologyId == null) {
            throw new ApiException("Missing the required parameter 'topologyId' when calling retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyByIdCall(uuid, topologyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-topology by ID
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyById(String uuid, String topologyId) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyByIdWithHttpInfo(uuid, topologyId);
        return resp.getData();
    }

    /**
     * Retrieve include-topology by ID
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyByIdWithHttpInfo(String uuid, String topologyId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyByIdValidateBeforeCall(uuid, topologyId, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-topology by ID (asynchronously)
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyByIdAsync(String uuid, String topologyId, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyByIdValidateBeforeCall(uuid, topologyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityServiceNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityServiceNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityServiceNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityServiceNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityServiceNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityServiceNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfile(String uuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileAsync(String uuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceRequestedCapacityRequestedCapacity
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityRequestedCapacityCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityRequestedCapacityValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceRequestedCapacityRequestedCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityRequestedCapacityCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve requested-capacity
     * Retrieve operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextConnectivityServiceRequestedCapacityRequestedCapacity(String uuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextConnectivityServiceRequestedCapacityRequestedCapacityWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve requested-capacity
     * Retrieve operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextConnectivityServiceRequestedCapacityRequestedCapacityWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityRequestedCapacityValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve requested-capacity (asynchronously)
     * Retrieve operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityRequestedCapacityAsync(String uuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityRequestedCapacityValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceRequestedCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceRequestedCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityServiceRequestedCapacityTotalSizeTotalSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceResilienceTypeResilienceType
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceResilienceTypeResilienceTypeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/resilience-type/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceResilienceTypeResilienceTypeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceResilienceTypeResilienceType(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceResilienceTypeResilienceTypeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @return ResilienceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResilienceType retrieveContextConnectivityServiceResilienceTypeResilienceType(String uuid) throws ApiException {
        ApiResponse<ResilienceType> resp = retrieveContextConnectivityServiceResilienceTypeResilienceTypeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;ResilienceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResilienceType> retrieveContextConnectivityServiceResilienceTypeResilienceTypeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceResilienceTypeResilienceTypeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve resilience-type (asynchronously)
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceResilienceTypeResilienceTypeAsync(String uuid, final ApiCallback<ResilienceType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceResilienceTypeResilienceTypeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityServiceScheduleSchedule
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceScheduleScheduleCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/schedule/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityServiceScheduleScheduleValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityServiceScheduleSchedule(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceScheduleScheduleCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve schedule
     * Retrieve operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @return TimeRange
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TimeRange retrieveContextConnectivityServiceScheduleSchedule(String uuid) throws ApiException {
        ApiResponse<TimeRange> resp = retrieveContextConnectivityServiceScheduleScheduleWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve schedule
     * Retrieve operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;TimeRange&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TimeRange> retrieveContextConnectivityServiceScheduleScheduleWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceScheduleScheduleValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<TimeRange>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve schedule (asynchronously)
     * Retrieve operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityServiceScheduleScheduleAsync(String uuid, final ApiCallback<TimeRange> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityServiceScheduleScheduleValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TimeRange>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextNameName
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNameNameCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/name/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextNameNameValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextNameNameCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextNameName() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextNameNameWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextNameNameWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextNameNameValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNameNameAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextNameNameValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextNameNameById
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNameNameByIdCall(String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/name/{value_name}/"
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextNameNameByIdValidateBeforeCall(String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextNameNameByIdCall(valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextNameNameById(String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextNameNameByIdWithHttpInfo(valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextNameNameByIdWithHttpInfo(String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextNameNameByIdValidateBeforeCall(valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNameNameByIdAsync(String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextNameNameByIdValidateBeforeCall(valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextNwTopologyServiceNameName
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceNameNameCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/nw-topology-service/name/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextNwTopologyServiceNameNameValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNameNameCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextNwTopologyServiceNameName() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextNwTopologyServiceNameNameWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextNwTopologyServiceNameNameWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNameNameValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceNameNameAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNameNameValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextNwTopologyServiceNameNameById
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceNameNameByIdCall(String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/nw-topology-service/name/{value_name}/"
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextNwTopologyServiceNameNameByIdValidateBeforeCall(String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextNwTopologyServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNameNameByIdCall(valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextNwTopologyServiceNameNameById(String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextNwTopologyServiceNameNameByIdWithHttpInfo(valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextNwTopologyServiceNameNameByIdWithHttpInfo(String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNameNameByIdValidateBeforeCall(valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceNameNameByIdAsync(String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNameNameByIdValidateBeforeCall(valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextNwTopologyServiceNwTopologyService
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceNwTopologyServiceCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/nw-topology-service/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextNwTopologyServiceNwTopologyServiceValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNwTopologyServiceCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve nw-topology-service
     * Retrieve operation of resource: nw-topology-service
     * @return NetworkTopologyService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkTopologyService retrieveContextNwTopologyServiceNwTopologyService() throws ApiException {
        ApiResponse<NetworkTopologyService> resp = retrieveContextNwTopologyServiceNwTopologyServiceWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve nw-topology-service
     * Retrieve operation of resource: nw-topology-service
     * @return ApiResponse&lt;NetworkTopologyService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkTopologyService> retrieveContextNwTopologyServiceNwTopologyServiceWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNwTopologyServiceValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<NetworkTopologyService>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve nw-topology-service (asynchronously)
     * Retrieve operation of resource: nw-topology-service
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceNwTopologyServiceAsync(final ApiCallback<NetworkTopologyService> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceNwTopologyServiceValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkTopologyService>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextNwTopologyServiceTopologyTopology
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceTopologyTopologyCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/nw-topology-service/topology/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextNwTopologyServiceTopologyTopologyValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceTopologyTopologyCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve topology
     * Retrieve operation of resource: topology
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextNwTopologyServiceTopologyTopology() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextNwTopologyServiceTopologyTopologyWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve topology
     * Retrieve operation of resource: topology
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextNwTopologyServiceTopologyTopologyWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceTopologyTopologyValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve topology (asynchronously)
     * Retrieve operation of resource: topology
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceTopologyTopologyAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceTopologyTopologyValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextNwTopologyServiceTopologyTopologyById
     * @param topologyId ID of topology_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceTopologyTopologyByIdCall(String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/nw-topology-service/topology/{topology_id}/"
            .replaceAll("\\{" + "topology_id" + "\\}", apiClient.escapeString(topologyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextNwTopologyServiceTopologyTopologyByIdValidateBeforeCall(String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topologyId' is set
        if (topologyId == null) {
            throw new ApiException("Missing the required parameter 'topologyId' when calling retrieveContextNwTopologyServiceTopologyTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceTopologyTopologyByIdCall(topologyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve topology by ID
     * Retrieve operation of resource: topology
     * @param topologyId ID of topology_id (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextNwTopologyServiceTopologyTopologyById(String topologyId) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextNwTopologyServiceTopologyTopologyByIdWithHttpInfo(topologyId);
        return resp.getData();
    }

    /**
     * Retrieve topology by ID
     * Retrieve operation of resource: topology
     * @param topologyId ID of topology_id (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextNwTopologyServiceTopologyTopologyByIdWithHttpInfo(String topologyId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceTopologyTopologyByIdValidateBeforeCall(topologyId, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve topology by ID (asynchronously)
     * Retrieve operation of resource: topology
     * @param topologyId ID of topology_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextNwTopologyServiceTopologyTopologyByIdAsync(String topologyId, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextNwTopologyServiceTopologyTopologyByIdValidateBeforeCall(topologyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceEndPointEndPoint
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceEndPointEndPointCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceEndPointEndPointValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceEndPointEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceEndPointEndPointCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve end-point
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathCompServiceEndPointEndPoint(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathCompServiceEndPointEndPointWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve end-point
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathCompServiceEndPointEndPointWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceEndPointEndPointValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve end-point (asynchronously)
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceEndPointEndPointAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceEndPointEndPointValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceEndPointEndPointByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathCompServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceEndPointEndPointByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve end-point by ID
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return PathServiceEndPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathServiceEndPoint retrieveContextPathCompServiceEndPointEndPointById(String uuid, String localId) throws ApiException {
        ApiResponse<PathServiceEndPoint> resp = retrieveContextPathCompServiceEndPointEndPointByIdWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve end-point by ID
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;PathServiceEndPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathServiceEndPoint> retrieveContextPathCompServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<PathServiceEndPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve end-point by ID (asynchronously)
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceEndPointEndPointByIdAsync(String uuid, String localId, final ApiCallback<PathServiceEndPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathServiceEndPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceEndPointNameName
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceEndPointNameNameCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/end-point/{local_id}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceEndPointNameNameValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceEndPointNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathCompServiceEndPointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceEndPointNameNameCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathCompServiceEndPointNameName(String uuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathCompServiceEndPointNameNameWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathCompServiceEndPointNameNameWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceEndPointNameNameValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceEndPointNameNameAsync(String uuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceEndPointNameNameValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextPathCompServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceEndPointNameNameByIdCall(uuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextPathCompServiceEndPointNameNameById(String uuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextPathCompServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextPathCompServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ServiceInterfacePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInterfacePointRef retrieveContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePoint(String uuid, String localId) throws ApiException {
        ApiResponse<ServiceInterfacePointRef> resp = retrieveContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;ServiceInterfacePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInterfacePointRef> retrieveContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve service-interface-point (asynchronously)
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointAsync(String uuid, String localId, final ApiCallback<ServiceInterfacePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathCompServiceNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathCompServiceNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathCompServiceNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextPathCompServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextPathCompServiceNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextPathCompServiceNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextPathCompServiceNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceObjectiveFunctionNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceObjectiveFunctionNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/objective-function/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceObjectiveFunctionNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceObjectiveFunctionNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceObjectiveFunctionNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathCompServiceObjectiveFunctionNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathCompServiceObjectiveFunctionNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathCompServiceObjectiveFunctionNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceObjectiveFunctionNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceObjectiveFunctionNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceObjectiveFunctionNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceObjectiveFunctionNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceObjectiveFunctionNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/objective-function/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceObjectiveFunctionNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextPathCompServiceObjectiveFunctionNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceObjectiveFunctionNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceObjectiveFunctionObjectiveFunction
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceObjectiveFunctionObjectiveFunctionCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/objective-function/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceObjectiveFunctionObjectiveFunctionValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceObjectiveFunctionObjectiveFunction(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceObjectiveFunctionObjectiveFunctionCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve objective-function
     * Retrieve operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @return PathObjectiveFunction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathObjectiveFunction retrieveContextPathCompServiceObjectiveFunctionObjectiveFunction(String uuid) throws ApiException {
        ApiResponse<PathObjectiveFunction> resp = retrieveContextPathCompServiceObjectiveFunctionObjectiveFunctionWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve objective-function
     * Retrieve operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;PathObjectiveFunction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathObjectiveFunction> retrieveContextPathCompServiceObjectiveFunctionObjectiveFunctionWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceObjectiveFunctionObjectiveFunctionValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<PathObjectiveFunction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve objective-function (asynchronously)
     * Retrieve operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceObjectiveFunctionObjectiveFunctionAsync(String uuid, final ApiCallback<PathObjectiveFunction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceObjectiveFunctionObjectiveFunctionValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathObjectiveFunction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceOptimizationConstraintNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceOptimizationConstraintNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/optimization-constraint/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceOptimizationConstraintNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceOptimizationConstraintNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceOptimizationConstraintNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathCompServiceOptimizationConstraintNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathCompServiceOptimizationConstraintNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathCompServiceOptimizationConstraintNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceOptimizationConstraintNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceOptimizationConstraintNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceOptimizationConstraintNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceOptimizationConstraintNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceOptimizationConstraintNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/optimization-constraint/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceOptimizationConstraintNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextPathCompServiceOptimizationConstraintNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceOptimizationConstraintNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceOptimizationConstraintOptimizationConstraint
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceOptimizationConstraintOptimizationConstraintCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/optimization-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceOptimizationConstraintOptimizationConstraintValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceOptimizationConstraintOptimizationConstraint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceOptimizationConstraintOptimizationConstraintCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve optimization-constraint
     * Retrieve operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @return PathOptimizationConstraint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathOptimizationConstraint retrieveContextPathCompServiceOptimizationConstraintOptimizationConstraint(String uuid) throws ApiException {
        ApiResponse<PathOptimizationConstraint> resp = retrieveContextPathCompServiceOptimizationConstraintOptimizationConstraintWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve optimization-constraint
     * Retrieve operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;PathOptimizationConstraint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathOptimizationConstraint> retrieveContextPathCompServiceOptimizationConstraintOptimizationConstraintWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceOptimizationConstraintOptimizationConstraintValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<PathOptimizationConstraint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve optimization-constraint (asynchronously)
     * Retrieve operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceOptimizationConstraintOptimizationConstraintAsync(String uuid, final ApiCallback<PathOptimizationConstraint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceOptimizationConstraintOptimizationConstraintValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathOptimizationConstraint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServicePathCompService
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServicePathCompServiceCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServicePathCompServiceValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServicePathCompServiceCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve path-comp-service
     * Retrieve operation of resource: path-comp-service
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathCompServicePathCompService() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathCompServicePathCompServiceWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve path-comp-service
     * Retrieve operation of resource: path-comp-service
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathCompServicePathCompServiceWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServicePathCompServiceValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve path-comp-service (asynchronously)
     * Retrieve operation of resource: path-comp-service
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServicePathCompServiceAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServicePathCompServiceValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServicePathCompServiceById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServicePathCompServiceByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServicePathCompServiceByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServicePathCompServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServicePathCompServiceByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve path-comp-service by ID
     * Retrieve operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @return PathComputationService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathComputationService retrieveContextPathCompServicePathCompServiceById(String uuid) throws ApiException {
        ApiResponse<PathComputationService> resp = retrieveContextPathCompServicePathCompServiceByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve path-comp-service by ID
     * Retrieve operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;PathComputationService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathComputationService> retrieveContextPathCompServicePathCompServiceByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<PathComputationService>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve path-comp-service by ID (asynchronously)
     * Retrieve operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServicePathCompServiceByIdAsync(String uuid, final ApiCallback<PathComputationService> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathComputationService>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServicePathPath
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServicePathPathCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/path/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServicePathPathValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServicePathPath(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServicePathPathCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve path
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathCompServicePathPath(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathCompServicePathPathWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve path
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathCompServicePathPathWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServicePathPathValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve path (asynchronously)
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServicePathPathAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServicePathPathValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServicePathPathById
     * @param uuid ID of uuid (required)
     * @param pathId ID of path_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServicePathPathByIdCall(String uuid, String pathId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/path/{path_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "path_id" + "\\}", apiClient.escapeString(pathId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServicePathPathByIdValidateBeforeCall(String uuid, String pathId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServicePathPathById(Async)");
        }
        
        // verify the required parameter 'pathId' is set
        if (pathId == null) {
            throw new ApiException("Missing the required parameter 'pathId' when calling retrieveContextPathCompServicePathPathById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServicePathPathByIdCall(uuid, pathId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve path by ID
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @param pathId ID of path_id (required)
     * @return PathRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathRef retrieveContextPathCompServicePathPathById(String uuid, String pathId) throws ApiException {
        ApiResponse<PathRef> resp = retrieveContextPathCompServicePathPathByIdWithHttpInfo(uuid, pathId);
        return resp.getData();
    }

    /**
     * Retrieve path by ID
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @param pathId ID of path_id (required)
     * @return ApiResponse&lt;PathRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathRef> retrieveContextPathCompServicePathPathByIdWithHttpInfo(String uuid, String pathId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServicePathPathByIdValidateBeforeCall(uuid, pathId, null, null);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve path by ID (asynchronously)
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @param pathId ID of path_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServicePathPathByIdAsync(String uuid, String pathId, final ApiCallback<PathRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServicePathPathByIdValidateBeforeCall(uuid, pathId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopology
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/avoid-topology/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopology(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve avoid-topology
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopology(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve avoid-topology
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve avoid-topology (asynchronously)
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyById
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyByIdCall(String uuid, String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/avoid-topology/{topology_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_id" + "\\}", apiClient.escapeString(topologyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyByIdValidateBeforeCall(String uuid, String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyById(Async)");
        }
        
        // verify the required parameter 'topologyId' is set
        if (topologyId == null) {
            throw new ApiException("Missing the required parameter 'topologyId' when calling retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyByIdCall(uuid, topologyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve avoid-topology by ID
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyById(String uuid, String topologyId) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyByIdWithHttpInfo(uuid, topologyId);
        return resp.getData();
    }

    /**
     * Retrieve avoid-topology by ID
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyByIdWithHttpInfo(String uuid, String topologyId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyByIdValidateBeforeCall(uuid, topologyId, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve avoid-topology by ID (asynchronously)
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyByIdAsync(String uuid, String topologyId, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyByIdValidateBeforeCall(uuid, topologyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdCall(uuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(String uuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopology
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/include-topology/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopology(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-topology
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopology(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-topology
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-topology (asynchronously)
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyById
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyByIdCall(String uuid, String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/include-topology/{topology_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_id" + "\\}", apiClient.escapeString(topologyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyByIdValidateBeforeCall(String uuid, String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyById(Async)");
        }
        
        // verify the required parameter 'topologyId' is set
        if (topologyId == null) {
            throw new ApiException("Missing the required parameter 'topologyId' when calling retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyByIdCall(uuid, topologyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-topology by ID
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyById(String uuid, String topologyId) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyByIdWithHttpInfo(uuid, topologyId);
        return resp.getData();
    }

    /**
     * Retrieve include-topology by ID
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyByIdWithHttpInfo(String uuid, String topologyId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyByIdValidateBeforeCall(uuid, topologyId, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-topology by ID (asynchronously)
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyByIdAsync(String uuid, String topologyId, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyByIdValidateBeforeCall(uuid, topologyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathCompServiceRoutingConstraintNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathCompServiceRoutingConstraintNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathCompServiceRoutingConstraintNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextPathCompServiceRoutingConstraintNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextPathCompServiceRoutingConstraintNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextPathCompServiceRoutingConstraintNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextPathCompServiceRoutingConstraintNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/requested-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfile(String uuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileAsync(String uuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/requested-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/requested-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/requested-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/requested-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintRequestedCapacityRequestedCapacity
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityRequestedCapacityCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/requested-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityRequestedCapacityValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintRequestedCapacityRequestedCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityRequestedCapacityCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve requested-capacity
     * Retrieve operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextPathCompServiceRoutingConstraintRequestedCapacityRequestedCapacity(String uuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityRequestedCapacityWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve requested-capacity
     * Retrieve operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextPathCompServiceRoutingConstraintRequestedCapacityRequestedCapacityWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityRequestedCapacityValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve requested-capacity (asynchronously)
     * Retrieve operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityRequestedCapacityAsync(String uuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityRequestedCapacityValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintRequestedCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityTotalSizeTotalSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/requested-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintRequestedCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityTotalSizeTotalSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathCompServiceRoutingConstraintRequestedCapacityTotalSizeTotalSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityTotalSizeTotalSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathCompServiceRoutingConstraintRequestedCapacityTotalSizeTotalSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRequestedCapacityTotalSizeTotalSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRequestedCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathCompServiceRoutingConstraintRoutingConstraint
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRoutingConstraintCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRoutingConstraintValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathCompServiceRoutingConstraintRoutingConstraint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRoutingConstraintCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve routing-constraint
     * Retrieve operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @return RoutingConstraint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoutingConstraint retrieveContextPathCompServiceRoutingConstraintRoutingConstraint(String uuid) throws ApiException {
        ApiResponse<RoutingConstraint> resp = retrieveContextPathCompServiceRoutingConstraintRoutingConstraintWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve routing-constraint
     * Retrieve operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;RoutingConstraint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoutingConstraint> retrieveContextPathCompServiceRoutingConstraintRoutingConstraintWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRoutingConstraintValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<RoutingConstraint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve routing-constraint (asynchronously)
     * Retrieve operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathCompServiceRoutingConstraintRoutingConstraintAsync(String uuid, final ApiCallback<RoutingConstraint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathCompServiceRoutingConstraintRoutingConstraintValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoutingConstraint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathLinkLink
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathLinkLinkCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/link/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathLinkLinkValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathLinkLink(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathLinkLinkCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve link
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathLinkLink(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathLinkLinkWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve link
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathLinkLinkWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathLinkLinkValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve link (asynchronously)
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathLinkLinkAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathLinkLinkValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathLinkLinkById
     * @param uuid ID of uuid (required)
     * @param topologyIdLinkId ID of topology_id link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathLinkLinkByIdCall(String uuid, String topologyIdLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/link/{topology_id link_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_id link_id" + "\\}", apiClient.escapeString(topologyIdLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathLinkLinkByIdValidateBeforeCall(String uuid, String topologyIdLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathLinkLinkById(Async)");
        }
        
        // verify the required parameter 'topologyIdLinkId' is set
        if (topologyIdLinkId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdLinkId' when calling retrieveContextPathLinkLinkById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathLinkLinkByIdCall(uuid, topologyIdLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve link by ID
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param topologyIdLinkId ID of topology_id link_id (required)
     * @return LinkRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkRef retrieveContextPathLinkLinkById(String uuid, String topologyIdLinkId) throws ApiException {
        ApiResponse<LinkRef> resp = retrieveContextPathLinkLinkByIdWithHttpInfo(uuid, topologyIdLinkId);
        return resp.getData();
    }

    /**
     * Retrieve link by ID
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param topologyIdLinkId ID of topology_id link_id (required)
     * @return ApiResponse&lt;LinkRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkRef> retrieveContextPathLinkLinkByIdWithHttpInfo(String uuid, String topologyIdLinkId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathLinkLinkByIdValidateBeforeCall(uuid, topologyIdLinkId, null, null);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve link by ID (asynchronously)
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param topologyIdLinkId ID of topology_id link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathLinkLinkByIdAsync(String uuid, String topologyIdLinkId, final ApiCallback<LinkRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathLinkLinkByIdValidateBeforeCall(uuid, topologyIdLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextPathNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextPathNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextPathNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextPathNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathPath
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathPathCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathPathValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextPathPathCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve path
     * Retrieve operation of resource: path
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathPath() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathPathWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve path
     * Retrieve operation of resource: path
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathPathWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathPathValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve path (asynchronously)
     * Retrieve operation of resource: path
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathPathAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathPathValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathPathById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathPathByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathPathByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathPathById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathPathByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve path by ID
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @return Path
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Path retrieveContextPathPathById(String uuid) throws ApiException {
        ApiResponse<Path> resp = retrieveContextPathPathByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve path by ID
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Path&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Path> retrieveContextPathPathByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathPathByIdValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Path>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve path by ID (asynchronously)
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathPathByIdAsync(String uuid, final ApiCallback<Path> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathPathByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Path>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopology
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/avoid-topology/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopology(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve avoid-topology
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopology(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve avoid-topology
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve avoid-topology (asynchronously)
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyById
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyByIdCall(String uuid, String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/avoid-topology/{topology_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_id" + "\\}", apiClient.escapeString(topologyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyByIdValidateBeforeCall(String uuid, String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyById(Async)");
        }
        
        // verify the required parameter 'topologyId' is set
        if (topologyId == null) {
            throw new ApiException("Missing the required parameter 'topologyId' when calling retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyByIdCall(uuid, topologyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve avoid-topology by ID
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyById(String uuid, String topologyId) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyByIdWithHttpInfo(uuid, topologyId);
        return resp.getData();
    }

    /**
     * Retrieve avoid-topology by ID
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyByIdWithHttpInfo(String uuid, String topologyId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyByIdValidateBeforeCall(uuid, topologyId, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve avoid-topology by ID (asynchronously)
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyByIdAsync(String uuid, String topologyId, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyByIdValidateBeforeCall(uuid, topologyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdCall(uuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicById(String uuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopology
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/include-topology/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopology(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-topology
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopology(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-topology
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-topology (asynchronously)
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyById
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyByIdCall(String uuid, String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/include-topology/{topology_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_id" + "\\}", apiClient.escapeString(topologyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyByIdValidateBeforeCall(String uuid, String topologyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyById(Async)");
        }
        
        // verify the required parameter 'topologyId' is set
        if (topologyId == null) {
            throw new ApiException("Missing the required parameter 'topologyId' when calling retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyByIdCall(uuid, topologyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-topology by ID
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyById(String uuid, String topologyId) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyByIdWithHttpInfo(uuid, topologyId);
        return resp.getData();
    }

    /**
     * Retrieve include-topology by ID
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyByIdWithHttpInfo(String uuid, String topologyId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyByIdValidateBeforeCall(uuid, topologyId, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-topology by ID (asynchronously)
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyId ID of topology_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyByIdAsync(String uuid, String topologyId, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyByIdValidateBeforeCall(uuid, topologyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathRoutingConstraintNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathRoutingConstraintNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathRoutingConstraintNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextPathRoutingConstraintNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextPathRoutingConstraintNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextPathRoutingConstraintNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextPathRoutingConstraintNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/requested-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfile(String uuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileAsync(String uuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/requested-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/requested-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/requested-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/requested-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintRequestedCapacityRequestedCapacity
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityRequestedCapacityCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/requested-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityRequestedCapacityValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintRequestedCapacityRequestedCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityRequestedCapacityCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve requested-capacity
     * Retrieve operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextPathRoutingConstraintRequestedCapacityRequestedCapacity(String uuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextPathRoutingConstraintRequestedCapacityRequestedCapacityWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve requested-capacity
     * Retrieve operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextPathRoutingConstraintRequestedCapacityRequestedCapacityWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityRequestedCapacityValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve requested-capacity (asynchronously)
     * Retrieve operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityRequestedCapacityAsync(String uuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityRequestedCapacityValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintRequestedCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityTotalSizeTotalSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/requested-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintRequestedCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityTotalSizeTotalSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathRoutingConstraintRequestedCapacityTotalSizeTotalSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathRoutingConstraintRequestedCapacityTotalSizeTotalSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathRoutingConstraintRequestedCapacityTotalSizeTotalSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRequestedCapacityTotalSizeTotalSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRequestedCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathRoutingConstraintRoutingConstraint
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRoutingConstraintCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path/{uuid}/routing-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRoutingConstraintValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathRoutingConstraintRoutingConstraint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRoutingConstraintCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve routing-constraint
     * Retrieve operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @return RoutingConstraint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoutingConstraint retrieveContextPathRoutingConstraintRoutingConstraint(String uuid) throws ApiException {
        ApiResponse<RoutingConstraint> resp = retrieveContextPathRoutingConstraintRoutingConstraintWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve routing-constraint
     * Retrieve operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;RoutingConstraint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoutingConstraint> retrieveContextPathRoutingConstraintRoutingConstraintWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRoutingConstraintValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<RoutingConstraint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve routing-constraint (asynchronously)
     * Retrieve operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathRoutingConstraintRoutingConstraintAsync(String uuid, final ApiCallback<RoutingConstraint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathRoutingConstraintRoutingConstraintValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoutingConstraint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacity(String uuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityAsync(String uuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(String uuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextServiceInterfacePointNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextServiceInterfacePointNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextServiceInterfacePointNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextServiceInterfacePointNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextServiceInterfacePointNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointServiceInterfacePoint
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextServiceInterfacePointServiceInterfacePoint() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextServiceInterfacePointServiceInterfacePointWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextServiceInterfacePointServiceInterfacePointWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve service-interface-point (asynchronously)
     * Retrieve operation of resource: service-interface-point
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve service-interface-point by ID
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @return ServiceInterfacePoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInterfacePoint retrieveContextServiceInterfacePointServiceInterfacePointById(String uuid) throws ApiException {
        ApiResponse<ServiceInterfacePoint> resp = retrieveContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve service-interface-point by ID
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;ServiceInterfacePoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInterfacePoint> retrieveContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<ServiceInterfacePoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve service-interface-point by ID (asynchronously)
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, final ApiCallback<ServiceInterfacePoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInterfacePoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(String uuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityAvailableCapacityCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityAvailableCapacityCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyLinkAvailableCapacityAvailableCapacity(String uuid, String linkUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyLinkAvailableCapacityAvailableCapacityWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyLinkAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityAvailableCapacityAsync(String uuid, String linkUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String linkUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String linkUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkCostCharacteristicCostCharacteristicCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyLinkCostCharacteristicCostCharacteristic(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyLinkCostCharacteristicCostCharacteristicWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkCostCharacteristicCostCharacteristicAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdCall(String uuid, String linkUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String linkUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextTopologyLinkCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdCall(uuid, linkUuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextTopologyLinkCostCharacteristicCostCharacteristicById(String uuid, String linkUuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, linkUuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String linkUuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, linkUuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdAsync(String uuid, String linkUuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, linkUuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristic(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String linkUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String linkUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, linkUuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(String uuid, String linkUuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, linkUuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String linkUuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, linkUuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String linkUuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, linkUuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkLink
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLinkCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkLinkValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkLink(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLinkCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve link
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyLinkLink(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyLinkLinkWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve link
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyLinkLinkWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLinkValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve link (asynchronously)
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLinkAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLinkValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkLinkById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLinkByIdCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkLinkByIdValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkLinkById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkLinkById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLinkByIdCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve link by ID
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return Link
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Link retrieveContextTopologyLinkLinkById(String uuid, String linkUuid) throws ApiException {
        ApiResponse<Link> resp = retrieveContextTopologyLinkLinkByIdWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve link by ID
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;Link&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Link> retrieveContextTopologyLinkLinkByIdWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLinkByIdValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<Link>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve link by ID (asynchronously)
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkLinkByIdAsync(String uuid, String linkUuid, final ApiCallback<Link> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkLinkByIdValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Link>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkNameName
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNameNameCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkNameNameValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkNameName(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNameNameCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyLinkNameName(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyLinkNameNameWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyLinkNameNameWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNameNameValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNameNameAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNameNameValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkNameNameById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNameNameByIdCall(String uuid, String linkUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkNameNameByIdValidateBeforeCall(String uuid, String linkUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkNameNameById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyLinkNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNameNameByIdCall(uuid, linkUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyLinkNameNameById(String uuid, String linkUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyLinkNameNameByIdWithHttpInfo(uuid, linkUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyLinkNameNameByIdWithHttpInfo(String uuid, String linkUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNameNameByIdValidateBeforeCall(uuid, linkUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNameNameByIdAsync(String uuid, String linkUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNameNameByIdValidateBeforeCall(uuid, linkUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkNodeEdgePointNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNodeEdgePointNodeEdgePointCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkNodeEdgePointNodeEdgePointValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkNodeEdgePointNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkNodeEdgePointNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-edge-point
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyLinkNodeEdgePointNodeEdgePoint(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve node-edge-point
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyLinkNodeEdgePointNodeEdgePointWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-edge-point (asynchronously)
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNodeEdgePointNodeEdgePointAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkNodeEdgePointNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdCall(String uuid, String linkUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/node-edge-point/{topology_id node_id owned_node_edge_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdValidateBeforeCall(String uuid, String linkUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkNodeEdgePointNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkNodeEdgePointNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' when calling retrieveContextTopologyLinkNodeEdgePointNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdCall(uuid, linkUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-edge-point by ID
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return OwnedNodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointRef retrieveContextTopologyLinkNodeEdgePointNodeEdgePointById(String uuid, String linkUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        ApiResponse<OwnedNodeEdgePointRef> resp = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdWithHttpInfo(uuid, linkUuid, topologyIdNodeIdOwnedNodeEdgePointId);
        return resp.getData();
    }

    /**
     * Retrieve node-edge-point by ID
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointRef> retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdWithHttpInfo(String uuid, String linkUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdValidateBeforeCall(uuid, linkUuid, topologyIdNodeIdOwnedNodeEdgePointId, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdAsync(String uuid, String linkUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ApiCallback<OwnedNodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdValidateBeforeCall(uuid, linkUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkResilienceTypeResilienceType
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkResilienceTypeResilienceTypeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/resilience-type/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkResilienceTypeResilienceTypeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkResilienceTypeResilienceType(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkResilienceTypeResilienceType(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkResilienceTypeResilienceTypeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ResilienceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResilienceType retrieveContextTopologyLinkResilienceTypeResilienceType(String uuid, String linkUuid) throws ApiException {
        ApiResponse<ResilienceType> resp = retrieveContextTopologyLinkResilienceTypeResilienceTypeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;ResilienceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResilienceType> retrieveContextTopologyLinkResilienceTypeResilienceTypeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkResilienceTypeResilienceTypeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve resilience-type (asynchronously)
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkResilienceTypeResilienceTypeAsync(String uuid, String linkUuid, final ApiCallback<ResilienceType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkResilienceTypeResilienceTypeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/risk-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristic(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdCall(String uuid, String linkUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/risk-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(String uuid, String linkUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdCall(uuid, linkUuid, riskCharacteristicName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return RiskCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RiskCharacteristic retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicById(String uuid, String linkUuid, String riskCharacteristicName) throws ApiException {
        ApiResponse<RiskCharacteristic> resp = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(uuid, linkUuid, riskCharacteristicName);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;RiskCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RiskCharacteristic> retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(String uuid, String linkUuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, linkUuid, riskCharacteristicName, null, null);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic by ID (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdAsync(String uuid, String linkUuid, String riskCharacteristicName, final ApiCallback<RiskCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, linkUuid, riskCharacteristicName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String linkUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String linkUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity(String uuid, String linkUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String linkUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkValidationMechanismValidationMechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkValidationMechanismValidationMechanismCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/validation-mechanism/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkValidationMechanismValidationMechanismValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkValidationMechanismValidationMechanism(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkValidationMechanismValidationMechanism(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkValidationMechanismValidationMechanismCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve validation-mechanism
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyLinkValidationMechanismValidationMechanism(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyLinkValidationMechanismValidationMechanismWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve validation-mechanism
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyLinkValidationMechanismValidationMechanismWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkValidationMechanismValidationMechanismValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve validation-mechanism (asynchronously)
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkValidationMechanismValidationMechanismAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkValidationMechanismValidationMechanismValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyLinkValidationMechanismValidationMechanismById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param validationMechanism ID of validation_mechanism (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdCall(String uuid, String linkUuid, String validationMechanism, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/link/{link_uuid}/validation-mechanism/{validation_mechanism}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "validation_mechanism" + "\\}", apiClient.escapeString(validationMechanism.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdValidateBeforeCall(String uuid, String linkUuid, String validationMechanism, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyLinkValidationMechanismValidationMechanismById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyLinkValidationMechanismValidationMechanismById(Async)");
        }
        
        // verify the required parameter 'validationMechanism' is set
        if (validationMechanism == null) {
            throw new ApiException("Missing the required parameter 'validationMechanism' when calling retrieveContextTopologyLinkValidationMechanismValidationMechanismById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdCall(uuid, linkUuid, validationMechanism, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve validation-mechanism by ID
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param validationMechanism ID of validation_mechanism (required)
     * @return ValidationMechanism
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationMechanism retrieveContextTopologyLinkValidationMechanismValidationMechanismById(String uuid, String linkUuid, String validationMechanism) throws ApiException {
        ApiResponse<ValidationMechanism> resp = retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdWithHttpInfo(uuid, linkUuid, validationMechanism);
        return resp.getData();
    }

    /**
     * Retrieve validation-mechanism by ID
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param validationMechanism ID of validation_mechanism (required)
     * @return ApiResponse&lt;ValidationMechanism&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationMechanism> retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdWithHttpInfo(String uuid, String linkUuid, String validationMechanism) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdValidateBeforeCall(uuid, linkUuid, validationMechanism, null, null);
        Type localVarReturnType = new TypeToken<ValidationMechanism>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve validation-mechanism by ID (asynchronously)
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param validationMechanism ID of validation_mechanism (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdAsync(String uuid, String linkUuid, String validationMechanism, final ApiCallback<ValidationMechanism> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdValidateBeforeCall(uuid, linkUuid, validationMechanism, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationMechanism>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/aggregated-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-node-edge-point
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-node-edge-point
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-node-edge-point (asynchronously)
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdCall(String uuid, String nodeUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/aggregated-node-edge-point/{topology_id node_id owned_node_edge_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(String uuid, String nodeUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' when calling retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdCall(uuid, nodeUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-node-edge-point by ID
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return OwnedNodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointRef retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(String uuid, String nodeUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        ApiResponse<OwnedNodeEdgePointRef> resp = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdWithHttpInfo(uuid, nodeUuid, topologyIdNodeIdOwnedNodeEdgePointId);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-node-edge-point by ID
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointRef> retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdWithHttpInfo(String uuid, String nodeUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, topologyIdNodeIdOwnedNodeEdgePointId, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdAsync(String uuid, String nodeUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ApiCallback<OwnedNodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityAvailableCapacityCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityAvailableCapacityCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeAvailableCapacityAvailableCapacity(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeAvailableCapacityAvailableCapacityWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityAvailableCapacityAsync(String uuid, String nodeUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeCostCharacteristicCostCharacteristicCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeCostCharacteristicCostCharacteristic(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeCostCharacteristicCostCharacteristicWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeCostCharacteristicCostCharacteristicAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdCall(String uuid, String nodeUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextTopologyNodeCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdCall(uuid, nodeUuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextTopologyNodeCostCharacteristicCostCharacteristicById(String uuid, String nodeUuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, nodeUuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdAsync(String uuid, String nodeUuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeEncapTopologyEncapTopology
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeEncapTopologyEncapTopologyCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/encap-topology/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeEncapTopologyEncapTopologyValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeEncapTopologyEncapTopology(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeEncapTopologyEncapTopology(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeEncapTopologyEncapTopologyCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve encap-topology
     * Retrieve operation of resource: encap-topology
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextTopologyNodeEncapTopologyEncapTopology(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextTopologyNodeEncapTopologyEncapTopologyWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve encap-topology
     * Retrieve operation of resource: encap-topology
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextTopologyNodeEncapTopologyEncapTopologyWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeEncapTopologyEncapTopologyValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve encap-topology (asynchronously)
     * Retrieve operation of resource: encap-topology
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeEncapTopologyEncapTopologyAsync(String uuid, String nodeUuid, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeEncapTopologyEncapTopologyValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristic(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String nodeUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, nodeUuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(String uuid, String nodeUuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, nodeUuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String nodeUuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNameNameCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNameNameValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNameNameCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNameName(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNameNameWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNameNameWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNameNameValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNameNameAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNameNameValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNameNameByIdCall(String uuid, String nodeUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyNodeNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNameNameByIdCall(uuid, nodeUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyNodeNameNameById(String uuid, String nodeUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyNodeNameNameByIdWithHttpInfo(uuid, nodeUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyNodeNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNameNameByIdValidateBeforeCall(uuid, nodeUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNameNameByIdAsync(String uuid, String nodeUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNameNameByIdValidateBeforeCall(uuid, nodeUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNode
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNode(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNode(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve node
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node (asynchronously)
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeByIdCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeByIdValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeByIdCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node by ID
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return Node
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Node retrieveContextTopologyNodeNodeById(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<Node> resp = retrieveContextTopologyNodeNodeByIdWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve node by ID
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Node> retrieveContextTopologyNodeNodeByIdWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeByIdValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node by ID (asynchronously)
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeByIdAsync(String uuid, String nodeUuid, final ApiCallback<Node> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeByIdValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/composed-rule-group/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve composed-rule-group
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve composed-rule-group
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve composed-rule-group (asynchronously)
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/composed-rule-group/{topology_id node_id node_rule_group_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id node_rule_group_id" + "\\}", apiClient.escapeString(topologyIdNodeIdNodeRuleGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdNodeRuleGroupId' is set
        if (topologyIdNodeIdNodeRuleGroupId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdNodeRuleGroupId' when calling retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve composed-rule-group by ID
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @return NodeRuleGroupRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRuleGroupRef retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId) throws ApiException {
        ApiResponse<NodeRuleGroupRef> resp = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId);
        return resp.getData();
    }

    /**
     * Retrieve composed-rule-group by ID
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @return ApiResponse&lt;NodeRuleGroupRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRuleGroupRef> retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId, null, null);
        Type localVarReturnType = new TypeToken<NodeRuleGroupRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve composed-rule-group by ID (asynchronously)
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId, final ApiCallback<NodeRuleGroupRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRuleGroupRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/associated-node-rule-group/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve associated-node-rule-group
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve associated-node-rule-group
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve associated-node-rule-group (asynchronously)
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/associated-node-rule-group/{topology_id node_id node_rule_group_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id node_rule_group_id" + "\\}", apiClient.escapeString(topologyIdNodeIdNodeRuleGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdNodeRuleGroupId' is set
        if (topologyIdNodeIdNodeRuleGroupId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdNodeRuleGroupId' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve associated-node-rule-group by ID
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @return NodeRuleGroupRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRuleGroupRef retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId) throws ApiException {
        ApiResponse<NodeRuleGroupRef> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId);
        return resp.getData();
    }

    /**
     * Retrieve associated-node-rule-group by ID
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @return ApiResponse&lt;NodeRuleGroupRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRuleGroupRef> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId, null, null);
        Type localVarReturnType = new TypeToken<NodeRuleGroupRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve associated-node-rule-group by ID (asynchronously)
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param topologyIdNodeIdNodeRuleGroupId ID of topology_id node_id node_rule_group_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String topologyIdNodeIdNodeRuleGroupId, final ApiCallback<NodeRuleGroupRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRuleGroupRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve inter-rule-group
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve inter-rule-group
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve inter-rule-group (asynchronously)
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve inter-rule-group by ID
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return InterRuleGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InterRuleGroup retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<InterRuleGroup> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve inter-rule-group by ID
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;InterRuleGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InterRuleGroup> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<InterRuleGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve inter-rule-group by ID (asynchronously)
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<InterRuleGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InterRuleGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/risk-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/risk-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return RiskCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RiskCharacteristic retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String riskCharacteristicName) throws ApiException {
        ApiResponse<RiskCharacteristic> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;RiskCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RiskCharacteristic> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName, null, null);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic by ID (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String riskCharacteristicName, final ApiCallback<RiskCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/rule/{local_id}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/rule/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/rule/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve rule
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve rule
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve rule (asynchronously)
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/rule/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve rule by ID
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rule retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId) throws ApiException {
        ApiResponse<Rule> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve rule by ID
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rule> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve rule by ID (asynchronously)
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ApiCallback<Rule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNameNameCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNameNameValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNameName(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNameNameCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupNameName(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupNameNameWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupNameNameWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNameNameAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNameNameByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyNodeNodeRuleGroupNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNameNameByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyNodeNodeRuleGroupNameNameById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyNodeNodeRuleGroupNameNameByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyNodeNodeRuleGroupNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNameNameByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-edge-point
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve node-edge-point
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-edge-point (asynchronously)
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/node-edge-point/{topology_id node_id owned_node_edge_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' when calling retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-edge-point by ID
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return OwnedNodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointRef retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        ApiResponse<OwnedNodeEdgePointRef> resp = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdOwnedNodeEdgePointId);
        return resp.getData();
    }

    /**
     * Retrieve node-edge-point by ID
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointRef> retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdOwnedNodeEdgePointId, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ApiCallback<OwnedNodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroup
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-rule-group
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroup(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve node-rule-group
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-rule-group (asynchronously)
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-rule-group by ID
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return NodeRuleGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRuleGroup retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupById(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<NodeRuleGroup> resp = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve node-rule-group by ID
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;NodeRuleGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRuleGroup> retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeRuleGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-rule-group by ID (asynchronously)
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<NodeRuleGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRuleGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/risk-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/risk-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return RiskCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RiskCharacteristic retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String riskCharacteristicName) throws ApiException {
        ApiResponse<RiskCharacteristic> resp = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;RiskCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RiskCharacteristic> retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName, null, null);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic by ID (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String riskCharacteristicName, final ApiCallback<RiskCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupRuleNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleNameNameCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/rule/{local_id}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleNameNameValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupRuleNameName(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupRuleNameNameWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleNameNameAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/rule/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupRuleRule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleRuleCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/rule/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleRuleValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleRule(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleRule(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleRule(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleRuleCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve rule
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeNodeRuleGroupRuleRule(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeNodeRuleGroupRuleRuleWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve rule
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeNodeRuleGroupRuleRuleWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleRuleValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve rule (asynchronously)
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleRuleAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleRuleValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupRuleRuleById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/rule/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyNodeNodeRuleGroupRuleRuleById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve rule by ID
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rule retrieveContextTopologyNodeNodeRuleGroupRuleRuleById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId) throws ApiException {
        ApiResponse<Rule> resp = retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve rule by ID
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rule> retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve rule by ID (asynchronously)
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ApiCallback<Rule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/aggregated-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-node-edge-point
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-node-edge-point
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-node-edge-point (asynchronously)
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/aggregated-node-edge-point/{topology_id node_id owned_node_edge_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-node-edge-point by ID
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return OwnedNodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointRef retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        ApiResponse<OwnedNodeEdgePointRef> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyIdNodeIdOwnedNodeEdgePointId);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-node-edge-point by ID
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointRef> retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyIdNodeIdOwnedNodeEdgePointId, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ApiCallback<OwnedNodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/connection-end-point/{connection_end_point_uuid}/client-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve client-node-edge-point
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve client-node-edge-point
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve client-node-edge-point (asynchronously)
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/connection-end-point/{connection_end_point_uuid}/client-node-edge-point/{topology_id node_id owned_node_edge_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve client-node-edge-point by ID
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return OwnedNodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointRef retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        ApiResponse<OwnedNodeEdgePointRef> resp = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId);
        return resp.getData();
    }

    /**
     * Retrieve client-node-edge-point by ID
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointRef> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve client-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ApiCallback<OwnedNodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/connection-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPoint(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ConnectionEndPointSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointSchema retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointSchema> resp = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointSchema> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<ConnectionEndPointSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/connection-end-point/{connection_end_point_uuid}/connectivity-service-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connectivity-service-end-point
     * Retrieve operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ConnectivityServiceEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityServiceEndPointRef retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectivityServiceEndPointRef> resp = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connectivity-service-end-point
     * Retrieve operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectivityServiceEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityServiceEndPointRef> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectivityServiceEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connectivity-service-end-point (asynchronously)
     * Retrieve operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<ConnectivityServiceEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityServiceEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/connection-end-point/{connection_end_point_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameName(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameName(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameName(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/connection-end-point/{connection_end_point_uuid}/parent-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve parent-node-edge-point
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve parent-node-edge-point
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve parent-node-edge-point (asynchronously)
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/connection-end-point/{connection_end_point_uuid}/parent-node-edge-point/{topology_id node_id owned_node_edge_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "topology_id node_id owned_node_edge_point_id" + "\\}", apiClient.escapeString(topologyIdNodeIdOwnedNodeEdgePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' is set
        if (topologyIdNodeIdOwnedNodeEdgePointId == null) {
            throw new ApiException("Missing the required parameter 'topologyIdNodeIdOwnedNodeEdgePointId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve parent-node-edge-point by ID
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return OwnedNodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointRef retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        ApiResponse<OwnedNodeEdgePointRef> resp = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId);
        return resp.getData();
    }

    /**
     * Retrieve parent-node-edge-point by ID
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointRef> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve parent-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyIdNodeIdOwnedNodeEdgePointId ID of topology_id node_id owned_node_edge_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyIdNodeIdOwnedNodeEdgePointId, final ApiCallback<OwnedNodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTermination
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTerminationCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/connection-end-point/{connection_end_point_uuid}/sdm-termination/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTerminationValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTermination(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTermination(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTermination(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTermination(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTerminationCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve sdm-termination
     * Retrieve operation of resource: sdm-termination
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return SdmTerminationPac
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SdmTerminationPac retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTermination(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<SdmTerminationPac> resp = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTerminationWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve sdm-termination
     * Retrieve operation of resource: sdm-termination
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;SdmTerminationPac&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SdmTerminationPac> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTerminationWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTerminationValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<SdmTerminationPac>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve sdm-termination (asynchronously)
     * Retrieve operation of resource: sdm-termination
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTerminationAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<SdmTerminationPac> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTerminationValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SdmTerminationPac>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/connection-end-point/{connection_end_point_uuid}/sdm-termination/selected-frequency-slot/{slot_id}/nominal-central-frequency/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "slot_id" + "\\}", apiClient.escapeString(slotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'slotId' is set
        if (slotId == null) {
            throw new ApiException("Missing the required parameter 'slotId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, slotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve nominal-central-frequency
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @return NominalCentralFrequencyOrWavelength
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NominalCentralFrequencyOrWavelength retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String slotId) throws ApiException {
        ApiResponse<NominalCentralFrequencyOrWavelength> resp = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, slotId);
        return resp.getData();
    }

    /**
     * Retrieve nominal-central-frequency
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @return ApiResponse&lt;NominalCentralFrequencyOrWavelength&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NominalCentralFrequencyOrWavelength> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String slotId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, slotId, null, null);
        Type localVarReturnType = new TypeToken<NominalCentralFrequencyOrWavelength>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve nominal-central-frequency (asynchronously)
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String slotId, final ApiCallback<NominalCentralFrequencyOrWavelength> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, slotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NominalCentralFrequencyOrWavelength>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/connection-end-point/{connection_end_point_uuid}/sdm-termination/selected-frequency-slot/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-frequency-slot
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve selected-frequency-slot
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-frequency-slot (asynchronously)
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/connection-end-point/{connection_end_point_uuid}/sdm-termination/selected-frequency-slot/{slot_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "slot_id" + "\\}", apiClient.escapeString(slotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'slotId' is set
        if (slotId == null) {
            throw new ApiException("Missing the required parameter 'slotId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, slotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-frequency-slot by ID
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @return FrequencySlot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FrequencySlot retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String slotId) throws ApiException {
        ApiResponse<FrequencySlot> resp = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, slotId);
        return resp.getData();
    }

    /**
     * Retrieve selected-frequency-slot by ID
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @return ApiResponse&lt;FrequencySlot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FrequencySlot> retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String slotId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, slotId, null, null);
        Type localVarReturnType = new TypeToken<FrequencySlot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-frequency-slot by ID (asynchronously)
     * Retrieve operation of resource: selected-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param slotId ID of slot_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String slotId, final ApiCallback<FrequencySlot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, slotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FrequencySlot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/mapped-service-interface-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve mapped-service-interface-point
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve mapped-service-interface-point
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve mapped-service-interface-point (asynchronously)
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param serviceInterfacePointId ID of service_interface_point_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String serviceInterfacePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/mapped-service-interface-point/{service_interface_point_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "service_interface_point_id" + "\\}", apiClient.escapeString(serviceInterfacePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String serviceInterfacePointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointId' is set
        if (serviceInterfacePointId == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve mapped-service-interface-point by ID
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param serviceInterfacePointId ID of service_interface_point_id (required)
     * @return ServiceInterfacePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInterfacePointRef retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String serviceInterfacePointId) throws ApiException {
        ApiResponse<ServiceInterfacePointRef> resp = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointId);
        return resp.getData();
    }

    /**
     * Retrieve mapped-service-interface-point by ID
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param serviceInterfacePointId ID of service_interface_point_id (required)
     * @return ApiResponse&lt;ServiceInterfacePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInterfacePointRef> retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String serviceInterfacePointId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve mapped-service-interface-point by ID (asynchronously)
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param serviceInterfacePointId ID of service_interface_point_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String serviceInterfacePointId, final ApiCallback<ServiceInterfacePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointNameNameCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointNameNameValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointNameName(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointNameName(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointNameNameWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointNameNameAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointNameNameById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyNodeOwnedNodeEdgePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyNodeOwnedNodeEdgePointNameNameById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve owned-node-edge-point
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve owned-node-edge-point
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve owned-node-edge-point (asynchronously)
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve owned-node-edge-point by ID
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return OwnedNodeEdgePointSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointSchema retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<OwnedNodeEdgePointSchema> resp = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve owned-node-edge-point by ID
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointSchema> retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve owned-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<OwnedNodeEdgePointSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCore
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/sdm-pool/available-core/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCore(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCore(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCore(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-core
     * Retrieve operation of resource: available-core
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCore(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-core
     * Retrieve operation of resource: available-core
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-core (asynchronously)
     * Retrieve operation of resource: available-core
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/sdm-pool/available-core/{core_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "core_id" + "\\}", apiClient.escapeString(coreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreById(Async)");
        }
        
        // verify the required parameter 'coreId' is set
        if (coreId == null) {
            throw new ApiException("Missing the required parameter 'coreId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-core by ID
     * Retrieve operation of resource: available-core
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @return CoreSlot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoreSlot retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId) throws ApiException {
        ApiResponse<CoreSlot> resp = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId);
        return resp.getData();
    }

    /**
     * Retrieve available-core by ID
     * Retrieve operation of resource: available-core
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @return ApiResponse&lt;CoreSlot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoreSlot> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, null, null);
        Type localVarReturnType = new TypeToken<CoreSlot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-core by ID (asynchronously)
     * Retrieve operation of resource: available-core
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, final ApiCallback<CoreSlot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoreSlot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/sdm-pool/available-core/{core_id}/available-frequency-slot/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "core_id" + "\\}", apiClient.escapeString(coreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlot(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlot(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlot(Async)");
        }
        
        // verify the required parameter 'coreId' is set
        if (coreId == null) {
            throw new ApiException("Missing the required parameter 'coreId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlot(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-frequency-slot
     * Retrieve operation of resource: available-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlot(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId);
        return resp.getData();
    }

    /**
     * Retrieve available-frequency-slot
     * Retrieve operation of resource: available-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-frequency-slot (asynchronously)
     * Retrieve operation of resource: available-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/sdm-pool/available-core/{core_id}/available-frequency-slot/{slot_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "core_id" + "\\}", apiClient.escapeString(coreId.toString()))
            .replaceAll("\\{" + "slot_id" + "\\}", apiClient.escapeString(slotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'coreId' is set
        if (coreId == null) {
            throw new ApiException("Missing the required parameter 'coreId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'slotId' is set
        if (slotId == null) {
            throw new ApiException("Missing the required parameter 'slotId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-frequency-slot by ID
     * Retrieve operation of resource: available-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @return FrequencySlot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FrequencySlot retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId) throws ApiException {
        ApiResponse<FrequencySlot> resp = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId);
        return resp.getData();
    }

    /**
     * Retrieve available-frequency-slot by ID
     * Retrieve operation of resource: available-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @return ApiResponse&lt;FrequencySlot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FrequencySlot> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId, null, null);
        Type localVarReturnType = new TypeToken<FrequencySlot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-frequency-slot by ID (asynchronously)
     * Retrieve operation of resource: available-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId, final ApiCallback<FrequencySlot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FrequencySlot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequency
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequencyCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/sdm-pool/available-core/{core_id}/available-frequency-slot/{slot_id}/nominal-central-frequency/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "core_id" + "\\}", apiClient.escapeString(coreId.toString()))
            .replaceAll("\\{" + "slot_id" + "\\}", apiClient.escapeString(slotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'coreId' is set
        if (coreId == null) {
            throw new ApiException("Missing the required parameter 'coreId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'slotId' is set
        if (slotId == null) {
            throw new ApiException("Missing the required parameter 'slotId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequencyCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve nominal-central-frequency
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @return NominalCentralFrequencyOrWavelength
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NominalCentralFrequencyOrWavelength retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequency(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId) throws ApiException {
        ApiResponse<NominalCentralFrequencyOrWavelength> resp = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequencyWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId);
        return resp.getData();
    }

    /**
     * Retrieve nominal-central-frequency
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @return ApiResponse&lt;NominalCentralFrequencyOrWavelength&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NominalCentralFrequencyOrWavelength> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequencyWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId, null, null);
        Type localVarReturnType = new TypeToken<NominalCentralFrequencyOrWavelength>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve nominal-central-frequency (asynchronously)
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequencyAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId, final ApiCallback<NominalCentralFrequencyOrWavelength> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NominalCentralFrequencyOrWavelength>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequency
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/sdm-pool/available-core/{core_id}/occupied-frequency-slot/{slot_id}/nominal-central-frequency/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "core_id" + "\\}", apiClient.escapeString(coreId.toString()))
            .replaceAll("\\{" + "slot_id" + "\\}", apiClient.escapeString(slotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'coreId' is set
        if (coreId == null) {
            throw new ApiException("Missing the required parameter 'coreId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        
        // verify the required parameter 'slotId' is set
        if (slotId == null) {
            throw new ApiException("Missing the required parameter 'slotId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve nominal-central-frequency
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @return NominalCentralFrequencyOrWavelength
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NominalCentralFrequencyOrWavelength retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId) throws ApiException {
        ApiResponse<NominalCentralFrequencyOrWavelength> resp = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId);
        return resp.getData();
    }

    /**
     * Retrieve nominal-central-frequency
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @return ApiResponse&lt;NominalCentralFrequencyOrWavelength&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NominalCentralFrequencyOrWavelength> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId, null, null);
        Type localVarReturnType = new TypeToken<NominalCentralFrequencyOrWavelength>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve nominal-central-frequency (asynchronously)
     * Retrieve operation of resource: nominal-central-frequency
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId, final ApiCallback<NominalCentralFrequencyOrWavelength> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NominalCentralFrequencyOrWavelength>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/sdm-pool/available-core/{core_id}/occupied-frequency-slot/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "core_id" + "\\}", apiClient.escapeString(coreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlot(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlot(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlot(Async)");
        }
        
        // verify the required parameter 'coreId' is set
        if (coreId == null) {
            throw new ApiException("Missing the required parameter 'coreId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlot(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve occupied-frequency-slot
     * Retrieve operation of resource: occupied-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlot(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId);
        return resp.getData();
    }

    /**
     * Retrieve occupied-frequency-slot
     * Retrieve operation of resource: occupied-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve occupied-frequency-slot (asynchronously)
     * Retrieve operation of resource: occupied-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/sdm-pool/available-core/{core_id}/occupied-frequency-slot/{slot_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "core_id" + "\\}", apiClient.escapeString(coreId.toString()))
            .replaceAll("\\{" + "slot_id" + "\\}", apiClient.escapeString(slotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'coreId' is set
        if (coreId == null) {
            throw new ApiException("Missing the required parameter 'coreId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotById(Async)");
        }
        
        // verify the required parameter 'slotId' is set
        if (slotId == null) {
            throw new ApiException("Missing the required parameter 'slotId' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve occupied-frequency-slot by ID
     * Retrieve operation of resource: occupied-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @return FrequencySlot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FrequencySlot retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId) throws ApiException {
        ApiResponse<FrequencySlot> resp = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId);
        return resp.getData();
    }

    /**
     * Retrieve occupied-frequency-slot by ID
     * Retrieve operation of resource: occupied-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @return ApiResponse&lt;FrequencySlot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FrequencySlot> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId, null, null);
        Type localVarReturnType = new TypeToken<FrequencySlot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve occupied-frequency-slot by ID (asynchronously)
     * Retrieve operation of resource: occupied-frequency-slot
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param coreId ID of core_id (required)
     * @param slotId ID of slot_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String coreId, String slotId, final ApiCallback<FrequencySlot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FrequencySlot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverAvailableTransceiver
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverAvailableTransceiverCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/sdm-pool/available-transceiver/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverAvailableTransceiverValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverAvailableTransceiver(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverAvailableTransceiver(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverAvailableTransceiver(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverAvailableTransceiverCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-transceiver
     * Retrieve operation of resource: available-transceiver
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return AvailableTransceiver
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AvailableTransceiver retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverAvailableTransceiver(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<AvailableTransceiver> resp = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverAvailableTransceiverWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-transceiver
     * Retrieve operation of resource: available-transceiver
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;AvailableTransceiver&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AvailableTransceiver> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverAvailableTransceiverWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverAvailableTransceiverValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<AvailableTransceiver>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-transceiver (asynchronously)
     * Retrieve operation of resource: available-transceiver
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverAvailableTransceiverAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<AvailableTransceiver> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverAvailableTransceiverValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AvailableTransceiver>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidth
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidthCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/sdm-pool/available-transceiver/supported-bandwidth/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidthValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidth(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidth(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidth(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidthCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve supported-bandwidth
     * Retrieve operation of resource: supported-bandwidth
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return SupportedBandwidthSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SupportedBandwidthSchema retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidth(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<SupportedBandwidthSchema> resp = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidthWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve supported-bandwidth
     * Retrieve operation of resource: supported-bandwidth
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;SupportedBandwidthSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SupportedBandwidthSchema> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidthWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidthValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<SupportedBandwidthSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve supported-bandwidth (asynchronously)
     * Retrieve operation of resource: supported-bandwidth
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidthAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<SupportedBandwidthSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidthValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SupportedBandwidthSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedCenterFrequencyRangeSupportedCenterFrequencyRange
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedCenterFrequencyRangeSupportedCenterFrequencyRangeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/sdm-pool/available-transceiver/supported-center-frequency-range/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedCenterFrequencyRangeSupportedCenterFrequencyRangeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedCenterFrequencyRangeSupportedCenterFrequencyRange(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedCenterFrequencyRangeSupportedCenterFrequencyRange(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedCenterFrequencyRangeSupportedCenterFrequencyRange(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedCenterFrequencyRangeSupportedCenterFrequencyRangeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve supported-center-frequency-range
     * Retrieve operation of resource: supported-center-frequency-range
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return SupportedCenterFrequencyRangeSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SupportedCenterFrequencyRangeSchema retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedCenterFrequencyRangeSupportedCenterFrequencyRange(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<SupportedCenterFrequencyRangeSchema> resp = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedCenterFrequencyRangeSupportedCenterFrequencyRangeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve supported-center-frequency-range
     * Retrieve operation of resource: supported-center-frequency-range
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;SupportedCenterFrequencyRangeSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SupportedCenterFrequencyRangeSchema> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedCenterFrequencyRangeSupportedCenterFrequencyRangeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedCenterFrequencyRangeSupportedCenterFrequencyRangeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<SupportedCenterFrequencyRangeSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve supported-center-frequency-range (asynchronously)
     * Retrieve operation of resource: supported-center-frequency-range
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedCenterFrequencyRangeSupportedCenterFrequencyRangeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<SupportedCenterFrequencyRangeSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedCenterFrequencyRangeSupportedCenterFrequencyRangeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SupportedCenterFrequencyRangeSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedModulationFormatSupportedModulationFormat
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedModulationFormatSupportedModulationFormatCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/sdm-pool/available-transceiver/supported-modulation-format/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedModulationFormatSupportedModulationFormatValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedModulationFormatSupportedModulationFormat(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedModulationFormatSupportedModulationFormat(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedModulationFormatSupportedModulationFormat(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedModulationFormatSupportedModulationFormatCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve supported-modulation-format
     * Retrieve operation of resource: supported-modulation-format
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return SupportedModulationFormatSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SupportedModulationFormatSchema retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedModulationFormatSupportedModulationFormat(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<SupportedModulationFormatSchema> resp = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedModulationFormatSupportedModulationFormatWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve supported-modulation-format
     * Retrieve operation of resource: supported-modulation-format
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;SupportedModulationFormatSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SupportedModulationFormatSchema> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedModulationFormatSupportedModulationFormatWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedModulationFormatSupportedModulationFormatValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<SupportedModulationFormatSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve supported-modulation-format (asynchronously)
     * Retrieve operation of resource: supported-modulation-format
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedModulationFormatSupportedModulationFormatAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<SupportedModulationFormatSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedModulationFormatSupportedModulationFormatValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SupportedModulationFormatSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolSdmPool
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolSdmPoolCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/sdm-pool/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolSdmPoolValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolSdmPool(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolSdmPool(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolSdmPool(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolSdmPoolCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve sdm-pool
     * Retrieve operation of resource: sdm-pool
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return SdmPoolPac
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SdmPoolPac retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolSdmPool(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<SdmPoolPac> resp = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolSdmPoolWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve sdm-pool
     * Retrieve operation of resource: sdm-pool
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;SdmPoolPac&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SdmPoolPac> retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolSdmPoolWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolSdmPoolValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<SdmPoolPac>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve sdm-pool (asynchronously)
     * Retrieve operation of resource: sdm-pool
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolSdmPoolAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<SdmPoolPac> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolSdmPoolValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SdmPoolPac>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String nodeUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyTopology
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyTopologyCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyTopologyValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextTopologyTopologyCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve topology
     * Retrieve operation of resource: topology
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyTopology() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyTopologyWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve topology
     * Retrieve operation of resource: topology
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyTopologyWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyTopologyValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve topology (asynchronously)
     * Retrieve operation of resource: topology
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyTopologyAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyTopologyValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyTopologyById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyTopologyByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyTopologyByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyTopologyByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve topology by ID
     * Retrieve operation of resource: topology
     * @param uuid ID of uuid (required)
     * @return Topology
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topology retrieveContextTopologyTopologyById(String uuid) throws ApiException {
        ApiResponse<Topology> resp = retrieveContextTopologyTopologyByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve topology by ID
     * Retrieve operation of resource: topology
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Topology&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topology> retrieveContextTopologyTopologyByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyTopologyByIdValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Topology>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve topology by ID (asynchronously)
     * Retrieve operation of resource: topology
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyTopologyByIdAsync(String uuid, final ApiCallback<Topology> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyTopologyByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topology>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContextById
     * @param context contextbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextByIdCall(ContextSchema context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = context;

        // create path and map variables
        String localVarPath = "/config/context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextByIdValidateBeforeCall(ContextSchema context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling updateContextById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextByIdCall(context, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update context by ID
     * Update operation of resource: context
     * @param context contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextById(ContextSchema context) throws ApiException {
        updateContextByIdWithHttpInfo(context);
    }

    /**
     * Update context by ID
     * Update operation of resource: context
     * @param context contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextByIdWithHttpInfo(ContextSchema context) throws ApiException {
        com.squareup.okhttp.Call call = updateContextByIdValidateBeforeCall(context, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update context by ID (asynchronously)
     * Update operation of resource: context
     * @param context contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextByIdAsync(ContextSchema context, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextByIdValidateBeforeCall(context, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectionConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectionConnectionEndPointConnectionEndPointByIdCall(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectionEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPoint' is set
        if (connectionEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPoint' when calling updateContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectionConnectionEndPointConnectionEndPointByIdCall(uuid, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update connection-end-point by ID
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectionConnectionEndPointConnectionEndPointById(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        updateContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, connectionEndPointUuid, connectionEndPoint);
    }

    /**
     * Update connection-end-point by ID
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, connectionEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update connection-end-point by ID (asynchronously)
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectionConnectionEndPointConnectionEndPointByIdAsync(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdCall(String uuid, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectivityServiceEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/connectivity-service-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceEndPoint' is set
        if (connectivityServiceEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceEndPoint' when calling updateContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdCall(uuid, connectionEndPointUuid, connectivityServiceEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update connectivity-service-end-point by ID
     * Update operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(String uuid, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint) throws ApiException {
        updateContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdWithHttpInfo(uuid, connectionEndPointUuid, connectivityServiceEndPoint);
    }

    /**
     * Update connectivity-service-end-point by ID
     * Update operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdWithHttpInfo(String uuid, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, connectivityServiceEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update connectivity-service-end-point by ID (asynchronously)
     * Update operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdAsync(String uuid, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, connectivityServiceEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectionConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectionConnectionEndPointNameNameByIdCall(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextConnectionConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectionConnectionEndPointNameNameByIdCall(uuid, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectionConnectionEndPointNameNameById(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        updateContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(uuid, connectionEndPointUuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectionConnectionEndPointNameNameByIdAsync(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectionRouteConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectionEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPoint' is set
        if (connectionEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPoint' when calling updateContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update connection-end-point by ID
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectionRouteConnectionEndPointConnectionEndPointById(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        updateContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, connectionEndPoint);
    }

    /**
     * Update connection-end-point by ID
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update connection-end-point by ID (asynchronously)
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectionRouteConnectionEndPointConnectionEndPointByIdAsync(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdCall(String uuid, String localId, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectivityServiceEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/connectivity-service-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceEndPoint' is set
        if (connectivityServiceEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceEndPoint' when calling updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdCall(uuid, localId, connectionEndPointUuid, connectivityServiceEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update connectivity-service-end-point by ID
     * Update operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(String uuid, String localId, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint) throws ApiException {
        updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, connectivityServiceEndPoint);
    }

    /**
     * Update connectivity-service-end-point by ID
     * Update operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectivityServiceEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update connectivity-service-end-point by ID (asynchronously)
     * Update operation of resource: connectivity-service-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectivityServiceEndPoint connectivity-service-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdAsync(String uuid, String localId, String connectionEndPointUuid, ConnectivityServiceEndPointRef connectivityServiceEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectivityServiceEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectionRouteConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectionRouteConnectionEndPointNameNameByIdCall(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectionRouteConnectionEndPointNameNameByIdCall(uuid, localId, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectionRouteConnectionEndPointNameNameById(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        updateContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectionRouteConnectionEndPointNameNameByIdAsync(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceConnectivityServiceById
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceConnectivityServiceByIdCall(String uuid, ConnectivityServiceSchema connectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectivityService;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(String uuid, ConnectivityServiceSchema connectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceConnectivityServiceById(Async)");
        }
        
        // verify the required parameter 'connectivityService' is set
        if (connectivityService == null) {
            throw new ApiException("Missing the required parameter 'connectivityService' when calling updateContextConnectivityServiceConnectivityServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceConnectivityServiceByIdCall(uuid, connectivityService, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update connectivity-service by ID
     * Update operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceConnectivityServiceById(String uuid, ConnectivityServiceSchema connectivityService) throws ApiException {
        updateContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(uuid, connectivityService);
    }

    /**
     * Update connectivity-service by ID
     * Update operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(String uuid, ConnectivityServiceSchema connectivityService) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, connectivityService, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update connectivity-service by ID (asynchronously)
     * Update operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceConnectivityServiceByIdAsync(String uuid, ConnectivityServiceSchema connectivityService, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, connectivityService, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceCorouteInclusionCorouteInclusionById
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(String uuid, ConnectivityServiceRef corouteInclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = corouteInclusion;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/coroute-inclusion/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(String uuid, ConnectivityServiceRef corouteInclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceCorouteInclusionCorouteInclusionById(Async)");
        }
        
        // verify the required parameter 'corouteInclusion' is set
        if (corouteInclusion == null) {
            throw new ApiException("Missing the required parameter 'corouteInclusion' when calling updateContextConnectivityServiceCorouteInclusionCorouteInclusionById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(uuid, corouteInclusion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update coroute-inclusion by ID
     * Update operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceCorouteInclusionCorouteInclusionById(String uuid, ConnectivityServiceRef corouteInclusion) throws ApiException {
        updateContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(uuid, corouteInclusion);
    }

    /**
     * Update coroute-inclusion by ID
     * Update operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(String uuid, ConnectivityServiceRef corouteInclusion) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(uuid, corouteInclusion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update coroute-inclusion by ID (asynchronously)
     * Update operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceCorouteInclusionCorouteInclusionByIdAsync(String uuid, ConnectivityServiceRef corouteInclusion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(uuid, corouteInclusion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, CostCharacteristic costCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = costCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String costName, CostCharacteristic costCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling updateContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costCharacteristic' is set
        if (costCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'costCharacteristic' when calling updateContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, costCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update cost-characteristic by ID
     * Update operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceCostCharacteristicCostCharacteristicById(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        updateContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName, costCharacteristic);
    }

    /**
     * Update cost-characteristic by ID
     * Update operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, costCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update cost-characteristic by ID (asynchronously)
     * Update operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, CostCharacteristic costCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, costCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceDiversityExclusionDiversityExclusionById
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(String uuid, String connectivityServiceId, ConnectivityServiceRef diversityExclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = diversityExclusion;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/diversity-exclusion/{connectivity_service_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connectivity_service_id" + "\\}", apiClient.escapeString(connectivityServiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(String uuid, String connectivityServiceId, ConnectivityServiceRef diversityExclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceId' is set
        if (connectivityServiceId == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceId' when calling updateContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'diversityExclusion' is set
        if (diversityExclusion == null) {
            throw new ApiException("Missing the required parameter 'diversityExclusion' when calling updateContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceId, diversityExclusion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update diversity-exclusion by ID
     * Update operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceDiversityExclusionDiversityExclusionById(String uuid, String connectivityServiceId, ConnectivityServiceRef diversityExclusion) throws ApiException {
        updateContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(uuid, connectivityServiceId, diversityExclusion);
    }

    /**
     * Update diversity-exclusion by ID
     * Update operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(String uuid, String connectivityServiceId, ConnectivityServiceRef diversityExclusion) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceId, diversityExclusion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update diversity-exclusion by ID (asynchronously)
     * Update operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceId ID of connectivity_service_id (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceDiversityExclusionDiversityExclusionByIdAsync(String uuid, String connectivityServiceId, ConnectivityServiceRef diversityExclusion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceId, diversityExclusion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, String localId, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bandwidthProfile;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(String uuid, String localId, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'bandwidthProfile' is set
        if (bandwidthProfile == null) {
            throw new ApiException("Missing the required parameter 'bandwidthProfile' when calling updateContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, localId, bandwidthProfile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update bandwidth-profile by ID
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        updateContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, localId, bandwidthProfile);
    }

    /**
     * Update bandwidth-profile by ID
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, bandwidthProfile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update bandwidth-profile by ID (asynchronously)
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, String localId, BandwidthProfile bandwidthProfile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, bandwidthProfile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, String localId, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'committedBurstSize' is set
        if (committedBurstSize == null) {
            throw new ApiException("Missing the required parameter 'committedBurstSize' when calling updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, localId, committedBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update committed-burst-size by ID
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, localId, committedBurstSize);
    }

    /**
     * Update committed-burst-size by ID
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, committedBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update committed-burst-size by ID (asynchronously)
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, String localId, CapacityValue committedBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, committedBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, String localId, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(String uuid, String localId, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'committedInformationRate' is set
        if (committedInformationRate == null) {
            throw new ApiException("Missing the required parameter 'committedInformationRate' when calling updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, localId, committedInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update committed-information-rate by ID
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, localId, committedInformationRate);
    }

    /**
     * Update committed-information-rate by ID
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, committedInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update committed-information-rate by ID (asynchronously)
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, String localId, CapacityValue committedInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, committedInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, String localId, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'peakBurstSize' is set
        if (peakBurstSize == null) {
            throw new ApiException("Missing the required parameter 'peakBurstSize' when calling updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, localId, peakBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update peak-burst-size by ID
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, localId, peakBurstSize);
    }

    /**
     * Update peak-burst-size by ID
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, peakBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update peak-burst-size by ID (asynchronously)
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, String localId, CapacityValue peakBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, peakBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, String localId, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(String uuid, String localId, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'peakInformationRate' is set
        if (peakInformationRate == null) {
            throw new ApiException("Missing the required parameter 'peakInformationRate' when calling updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, localId, peakInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update peak-information-rate by ID
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, localId, peakInformationRate);
    }

    /**
     * Update peak-information-rate by ID
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, peakInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update peak-information-rate by ID (asynchronously)
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, String localId, CapacityValue peakInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, peakInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceEndPointCapacityCapacityById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityCapacityByIdCall(String uuid, String localId, Capacity capacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = capacity;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(String uuid, String localId, Capacity capacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'capacity' is set
        if (capacity == null) {
            throw new ApiException("Missing the required parameter 'capacity' when calling updateContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityCapacityByIdCall(uuid, localId, capacity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update capacity by ID
     * Update operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceEndPointCapacityCapacityById(String uuid, String localId, Capacity capacity) throws ApiException {
        updateContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(uuid, localId, capacity);
    }

    /**
     * Update capacity by ID
     * Update operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(String uuid, String localId, Capacity capacity) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, capacity, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update capacity by ID (asynchronously)
     * Update operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityCapacityByIdAsync(String uuid, String localId, Capacity capacity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, capacity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(String uuid, String localId, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = totalSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'totalSize' is set
        if (totalSize == null) {
            throw new ApiException("Missing the required parameter 'totalSize' when calling updateContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(uuid, localId, totalSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update total-size by ID
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        updateContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, localId, totalSize);
    }

    /**
     * Update total-size by ID
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, totalSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update total-size by ID (asynchronously)
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdAsync(String uuid, String localId, CapacityValue totalSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, totalSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointEndPointByIdCall(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = endPoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'endPoint' is set
        if (endPoint == null) {
            throw new ApiException("Missing the required parameter 'endPoint' when calling updateContextConnectivityServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update end-point by ID
     * Update operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceEndPointEndPointById(String uuid, String localId, ConnectivityServiceEndPoint endPoint) throws ApiException {
        updateContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(uuid, localId, endPoint);
    }

    /**
     * Update end-point by ID
     * Update operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId, ConnectivityServiceEndPoint endPoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update end-point by ID (asynchronously)
     * Update operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointEndPointByIdAsync(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextConnectivityServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceEndPointNameNameById(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        updateContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling updateContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, serviceInterfacePoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint) throws ApiException {
        updateContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, localId, serviceInterfacePoint);
    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update service-interface-point by ID (asynchronously)
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceIncludeCoreIncludeCoreById
     * @param uuid ID of uuid (required)
     * @param includeCore include-corebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceIncludeCoreIncludeCoreByIdCall(String uuid, SdmTerminationPac includeCore, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = includeCore;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/include-core/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceIncludeCoreIncludeCoreByIdValidateBeforeCall(String uuid, SdmTerminationPac includeCore, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceIncludeCoreIncludeCoreById(Async)");
        }
        
        // verify the required parameter 'includeCore' is set
        if (includeCore == null) {
            throw new ApiException("Missing the required parameter 'includeCore' when calling updateContextConnectivityServiceIncludeCoreIncludeCoreById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceIncludeCoreIncludeCoreByIdCall(uuid, includeCore, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update include-core by ID
     * Update operation of resource: include-core
     * @param uuid ID of uuid (required)
     * @param includeCore include-corebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceIncludeCoreIncludeCoreById(String uuid, SdmTerminationPac includeCore) throws ApiException {
        updateContextConnectivityServiceIncludeCoreIncludeCoreByIdWithHttpInfo(uuid, includeCore);
    }

    /**
     * Update include-core by ID
     * Update operation of resource: include-core
     * @param uuid ID of uuid (required)
     * @param includeCore include-corebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceIncludeCoreIncludeCoreByIdWithHttpInfo(String uuid, SdmTerminationPac includeCore) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceIncludeCoreIncludeCoreByIdValidateBeforeCall(uuid, includeCore, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update include-core by ID (asynchronously)
     * Update operation of resource: include-core
     * @param uuid ID of uuid (required)
     * @param includeCore include-corebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceIncludeCoreIncludeCoreByIdAsync(String uuid, SdmTerminationPac includeCore, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceIncludeCoreIncludeCoreByIdValidateBeforeCall(uuid, includeCore, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = latencyCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling updateContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'latencyCharacteristic' is set
        if (latencyCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'latencyCharacteristic' when calling updateContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, latencyCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update latency-characteristic by ID
     * Update operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        updateContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName, latencyCharacteristic);
    }

    /**
     * Update latency-characteristic by ID
     * Update operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, latencyCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update latency-characteristic by ID (asynchronously)
     * Update operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, latencyCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextConnectivityServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        updateContextConnectivityServiceNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bandwidthProfile;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(String uuid, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'bandwidthProfile' is set
        if (bandwidthProfile == null) {
            throw new ApiException("Missing the required parameter 'bandwidthProfile' when calling updateContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, bandwidthProfile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update bandwidth-profile by ID
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(String uuid, BandwidthProfile bandwidthProfile) throws ApiException {
        updateContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, bandwidthProfile);
    }

    /**
     * Update bandwidth-profile by ID
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, BandwidthProfile bandwidthProfile) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, bandwidthProfile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update bandwidth-profile by ID (asynchronously)
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, BandwidthProfile bandwidthProfile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, bandwidthProfile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(String uuid, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'committedBurstSize' is set
        if (committedBurstSize == null) {
            throw new ApiException("Missing the required parameter 'committedBurstSize' when calling updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, committedBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update committed-burst-size by ID
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, CapacityValue committedBurstSize) throws ApiException {
        updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, committedBurstSize);
    }

    /**
     * Update committed-burst-size by ID
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, CapacityValue committedBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, committedBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update committed-burst-size by ID (asynchronously)
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, CapacityValue committedBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, committedBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(String uuid, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'committedInformationRate' is set
        if (committedInformationRate == null) {
            throw new ApiException("Missing the required parameter 'committedInformationRate' when calling updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, committedInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update committed-information-rate by ID
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, CapacityValue committedInformationRate) throws ApiException {
        updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, committedInformationRate);
    }

    /**
     * Update committed-information-rate by ID
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, CapacityValue committedInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, committedInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update committed-information-rate by ID (asynchronously)
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, CapacityValue committedInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, committedInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(String uuid, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'peakBurstSize' is set
        if (peakBurstSize == null) {
            throw new ApiException("Missing the required parameter 'peakBurstSize' when calling updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, peakBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update peak-burst-size by ID
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, CapacityValue peakBurstSize) throws ApiException {
        updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, peakBurstSize);
    }

    /**
     * Update peak-burst-size by ID
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, CapacityValue peakBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, peakBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update peak-burst-size by ID (asynchronously)
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, CapacityValue peakBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, peakBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(String uuid, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'peakInformationRate' is set
        if (peakInformationRate == null) {
            throw new ApiException("Missing the required parameter 'peakInformationRate' when calling updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, peakInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update peak-information-rate by ID
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, CapacityValue peakInformationRate) throws ApiException {
        updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, peakInformationRate);
    }

    /**
     * Update peak-information-rate by ID
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, CapacityValue peakInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, peakInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update peak-information-rate by ID (asynchronously)
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, CapacityValue peakInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, peakInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceRequestedCapacityRequestedCapacityById
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(String uuid, Capacity requestedCapacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestedCapacity;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(String uuid, Capacity requestedCapacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceRequestedCapacityRequestedCapacityById(Async)");
        }
        
        // verify the required parameter 'requestedCapacity' is set
        if (requestedCapacity == null) {
            throw new ApiException("Missing the required parameter 'requestedCapacity' when calling updateContextConnectivityServiceRequestedCapacityRequestedCapacityById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(uuid, requestedCapacity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update requested-capacity by ID
     * Update operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceRequestedCapacityRequestedCapacityById(String uuid, Capacity requestedCapacity) throws ApiException {
        updateContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(uuid, requestedCapacity);
    }

    /**
     * Update requested-capacity by ID
     * Update operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(String uuid, Capacity requestedCapacity) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(uuid, requestedCapacity, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update requested-capacity by ID (asynchronously)
     * Update operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityRequestedCapacityByIdAsync(String uuid, Capacity requestedCapacity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(uuid, requestedCapacity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(String uuid, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = totalSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/requested-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(String uuid, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'totalSize' is set
        if (totalSize == null) {
            throw new ApiException("Missing the required parameter 'totalSize' when calling updateContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(uuid, totalSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update total-size by ID
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(String uuid, CapacityValue totalSize) throws ApiException {
        updateContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, totalSize);
    }

    /**
     * Update total-size by ID
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, CapacityValue totalSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, totalSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update total-size by ID (asynchronously)
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdAsync(String uuid, CapacityValue totalSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, totalSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceResilienceTypeResilienceTypeById
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(String uuid, ResilienceType resilienceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resilienceType;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/resilience-type/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(String uuid, ResilienceType resilienceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceResilienceTypeResilienceTypeById(Async)");
        }
        
        // verify the required parameter 'resilienceType' is set
        if (resilienceType == null) {
            throw new ApiException("Missing the required parameter 'resilienceType' when calling updateContextConnectivityServiceResilienceTypeResilienceTypeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(uuid, resilienceType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update resilience-type by ID
     * Update operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceResilienceTypeResilienceTypeById(String uuid, ResilienceType resilienceType) throws ApiException {
        updateContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(uuid, resilienceType);
    }

    /**
     * Update resilience-type by ID
     * Update operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(String uuid, ResilienceType resilienceType) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(uuid, resilienceType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update resilience-type by ID (asynchronously)
     * Update operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceResilienceTypeResilienceTypeByIdAsync(String uuid, ResilienceType resilienceType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(uuid, resilienceType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityServiceScheduleScheduleById
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceScheduleScheduleByIdCall(String uuid, TimeRange schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = schedule;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-service/{uuid}/schedule/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(String uuid, TimeRange schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityServiceScheduleScheduleById(Async)");
        }
        
        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling updateContextConnectivityServiceScheduleScheduleById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityServiceScheduleScheduleByIdCall(uuid, schedule, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update schedule by ID
     * Update operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityServiceScheduleScheduleById(String uuid, TimeRange schedule) throws ApiException {
        updateContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(uuid, schedule);
    }

    /**
     * Update schedule by ID
     * Update operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(String uuid, TimeRange schedule) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(uuid, schedule, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update schedule by ID (asynchronously)
     * Update operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityServiceScheduleScheduleByIdAsync(String uuid, TimeRange schedule, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(uuid, schedule, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextNameNameById
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextNameNameByIdCall(String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/name/{value_name}/"
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextNameNameByIdValidateBeforeCall(String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextNameNameByIdCall(valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextNameNameById(String valueName, NameAndValue name) throws ApiException {
        updateContextNameNameByIdWithHttpInfo(valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextNameNameByIdWithHttpInfo(String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextNameNameByIdValidateBeforeCall(valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextNameNameByIdAsync(String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextNameNameByIdValidateBeforeCall(valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathCompServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceEndPointEndPointByIdCall(String uuid, String localId, PathServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = endPoint;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, PathServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathCompServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextPathCompServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'endPoint' is set
        if (endPoint == null) {
            throw new ApiException("Missing the required parameter 'endPoint' when calling updateContextPathCompServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathCompServiceEndPointEndPointByIdCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update end-point by ID
     * Update operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathCompServiceEndPointEndPointById(String uuid, String localId, PathServiceEndPoint endPoint) throws ApiException {
        updateContextPathCompServiceEndPointEndPointByIdWithHttpInfo(uuid, localId, endPoint);
    }

    /**
     * Update end-point by ID
     * Update operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathCompServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId, PathServiceEndPoint endPoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update end-point by ID (asynchronously)
     * Update operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceEndPointEndPointByIdAsync(String uuid, String localId, PathServiceEndPoint endPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathCompServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextPathCompServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathCompServiceEndPointNameNameByIdCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathCompServiceEndPointNameNameById(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        updateContextPathCompServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathCompServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathCompServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathCompServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathCompServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextPathCompServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextPathCompServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathCompServiceNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathCompServiceNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        updateContextPathCompServiceNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathCompServiceNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathCompServiceObjectiveFunctionNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceObjectiveFunctionNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/objective-function/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathCompServiceObjectiveFunctionNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathCompServiceObjectiveFunctionNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        updateContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceObjectiveFunctionNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathCompServiceObjectiveFunctionObjectiveFunctionById
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdCall(String uuid, PathObjectiveFunction objectiveFunction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = objectiveFunction;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/objective-function/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(String uuid, PathObjectiveFunction objectiveFunction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathCompServiceObjectiveFunctionObjectiveFunctionById(Async)");
        }
        
        // verify the required parameter 'objectiveFunction' is set
        if (objectiveFunction == null) {
            throw new ApiException("Missing the required parameter 'objectiveFunction' when calling updateContextPathCompServiceObjectiveFunctionObjectiveFunctionById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdCall(uuid, objectiveFunction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update objective-function by ID
     * Update operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathCompServiceObjectiveFunctionObjectiveFunctionById(String uuid, PathObjectiveFunction objectiveFunction) throws ApiException {
        updateContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdWithHttpInfo(uuid, objectiveFunction);
    }

    /**
     * Update objective-function by ID
     * Update operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdWithHttpInfo(String uuid, PathObjectiveFunction objectiveFunction) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(uuid, objectiveFunction, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update objective-function by ID (asynchronously)
     * Update operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdAsync(String uuid, PathObjectiveFunction objectiveFunction, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(uuid, objectiveFunction, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathCompServiceOptimizationConstraintNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceOptimizationConstraintNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/optimization-constraint/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathCompServiceOptimizationConstraintNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathCompServiceOptimizationConstraintNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        updateContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceOptimizationConstraintNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathCompServiceOptimizationConstraintOptimizationConstraintById
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdCall(String uuid, PathOptimizationConstraint optimizationConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = optimizationConstraint;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/optimization-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(String uuid, PathOptimizationConstraint optimizationConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathCompServiceOptimizationConstraintOptimizationConstraintById(Async)");
        }
        
        // verify the required parameter 'optimizationConstraint' is set
        if (optimizationConstraint == null) {
            throw new ApiException("Missing the required parameter 'optimizationConstraint' when calling updateContextPathCompServiceOptimizationConstraintOptimizationConstraintById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdCall(uuid, optimizationConstraint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update optimization-constraint by ID
     * Update operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathCompServiceOptimizationConstraintOptimizationConstraintById(String uuid, PathOptimizationConstraint optimizationConstraint) throws ApiException {
        updateContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdWithHttpInfo(uuid, optimizationConstraint);
    }

    /**
     * Update optimization-constraint by ID
     * Update operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdWithHttpInfo(String uuid, PathOptimizationConstraint optimizationConstraint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(uuid, optimizationConstraint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update optimization-constraint by ID (asynchronously)
     * Update operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdAsync(String uuid, PathOptimizationConstraint optimizationConstraint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(uuid, optimizationConstraint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathCompServicePathCompServiceById
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServicePathCompServiceByIdCall(String uuid, PathComputationService pathCompService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pathCompService;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathCompServicePathCompServiceByIdValidateBeforeCall(String uuid, PathComputationService pathCompService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathCompServicePathCompServiceById(Async)");
        }
        
        // verify the required parameter 'pathCompService' is set
        if (pathCompService == null) {
            throw new ApiException("Missing the required parameter 'pathCompService' when calling updateContextPathCompServicePathCompServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathCompServicePathCompServiceByIdCall(uuid, pathCompService, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update path-comp-service by ID
     * Update operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathCompServicePathCompServiceById(String uuid, PathComputationService pathCompService) throws ApiException {
        updateContextPathCompServicePathCompServiceByIdWithHttpInfo(uuid, pathCompService);
    }

    /**
     * Update path-comp-service by ID
     * Update operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathCompServicePathCompServiceByIdWithHttpInfo(String uuid, PathComputationService pathCompService) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, pathCompService, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update path-comp-service by ID (asynchronously)
     * Update operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServicePathCompServiceByIdAsync(String uuid, PathComputationService pathCompService, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, pathCompService, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathCompServiceRoutingConstraintNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceRoutingConstraintNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathCompServiceRoutingConstraintNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathCompServiceRoutingConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextPathCompServiceRoutingConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextPathCompServiceRoutingConstraintNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathCompServiceRoutingConstraintNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathCompServiceRoutingConstraintNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        updateContextPathCompServiceRoutingConstraintNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathCompServiceRoutingConstraintNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathCompServiceRoutingConstraintNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceRoutingConstraintNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathCompServiceRoutingConstraintNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathCompServiceRoutingConstraintRoutingConstraintById
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceRoutingConstraintRoutingConstraintByIdCall(String uuid, RoutingConstraint routingConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = routingConstraint;

        // create path and map variables
        String localVarPath = "/config/context/path-comp-service/{uuid}/routing-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(String uuid, RoutingConstraint routingConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathCompServiceRoutingConstraintRoutingConstraintById(Async)");
        }
        
        // verify the required parameter 'routingConstraint' is set
        if (routingConstraint == null) {
            throw new ApiException("Missing the required parameter 'routingConstraint' when calling updateContextPathCompServiceRoutingConstraintRoutingConstraintById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathCompServiceRoutingConstraintRoutingConstraintByIdCall(uuid, routingConstraint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update routing-constraint by ID
     * Update operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathCompServiceRoutingConstraintRoutingConstraintById(String uuid, RoutingConstraint routingConstraint) throws ApiException {
        updateContextPathCompServiceRoutingConstraintRoutingConstraintByIdWithHttpInfo(uuid, routingConstraint);
    }

    /**
     * Update routing-constraint by ID
     * Update operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathCompServiceRoutingConstraintRoutingConstraintByIdWithHttpInfo(String uuid, RoutingConstraint routingConstraint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(uuid, routingConstraint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update routing-constraint by ID (asynchronously)
     * Update operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathCompServiceRoutingConstraintRoutingConstraintByIdAsync(String uuid, RoutingConstraint routingConstraint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(uuid, routingConstraint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextServiceInterfacePointNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextServiceInterfacePointNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextServiceInterfacePointNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        updateContextServiceInterfacePointNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextServiceInterfacePointNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextServiceInterfacePointServiceInterfacePointByIdCall(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling updateContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, serviceInterfacePoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextServiceInterfacePointServiceInterfacePointById(String uuid, ServiceInterfacePoint serviceInterfacePoint) throws ApiException {
        updateContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, serviceInterfacePoint);
    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, ServiceInterfacePoint serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update service-interface-point by ID (asynchronously)
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
