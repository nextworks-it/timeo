/*
 * tapi-sdm API
 * tapi-sdm API generated from tapi-sdm.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.AdminStatePac;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.ConnectionRef;
import io.swagger.client.model.ConnectivityConstraint;
import io.swagger.client.model.ConnectivityServiceEndPoint;
import io.swagger.client.model.ConnectivityServiceRef;
import io.swagger.client.model.CostCharacteristic;
import io.swagger.client.model.LatencyCharacteristic;
import io.swagger.client.model.LinkRef;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.NodeRef;
import io.swagger.client.model.PathRef;
import io.swagger.client.model.ResilienceConstraint;
import io.swagger.client.model.ResilienceType;
import io.swagger.client.model.ServiceSpec;
import io.swagger.client.model.TimeRange;
import io.swagger.client.model.TopologyConstraint;
import io.swagger.client.model.TopologyRef;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The ForwardingConstruct (FC) object class models enabled potential for forwarding between two or more LTPs and like the LTP supports any transport protocol including all circuit and packet forms. At the lowest level of recursion, a FC represents a cross-connection within an NE.
 */
@ApiModel(description = "The ForwardingConstruct (FC) object class models enabled potential for forwarding between two or more LTPs and like the LTP supports any transport protocol including all circuit and packet forms. At the lowest level of recursion, a FC represents a cross-connection within an NE.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-08T09:23:18.099+02:00")
public class ConnectivityService {
  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("name")
  private List<NameAndValue> name = null;

  /**
   * Gets or Sets diversityPolicy
   */
  @JsonAdapter(DiversityPolicyEnum.Adapter.class)
  public enum DiversityPolicyEnum {
    SRLG("SRLG"),
    
    SRNG("SRNG"),
    
    SNG("SNG"),
    
    NODE("NODE"),
    
    LINK("LINK");

    private String value;

    DiversityPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiversityPolicyEnum fromValue(String text) {
      for (DiversityPolicyEnum b : DiversityPolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DiversityPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiversityPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiversityPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DiversityPolicyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("diversity-policy")
  private DiversityPolicyEnum diversityPolicy = null;

  /**
   * Gets or Sets routeObjectiveFunction
   */
  @JsonAdapter(RouteObjectiveFunctionEnum.Adapter.class)
  public enum RouteObjectiveFunctionEnum {
    MIN_WORK_ROUTE_HOP("MIN_WORK_ROUTE_HOP"),
    
    MIN_WORK_ROUTE_COST("MIN_WORK_ROUTE_COST"),
    
    MIN_WORK_ROUTE_LATENCY("MIN_WORK_ROUTE_LATENCY"),
    
    MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_HOP("MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_HOP"),
    
    MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_COST("MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_COST"),
    
    MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_LATENCY("MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_LATENCY"),
    
    LOAD_BALANCE_MAX_UNUSED_CAPACITY("LOAD_BALANCE_MAX_UNUSED_CAPACITY");

    private String value;

    RouteObjectiveFunctionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RouteObjectiveFunctionEnum fromValue(String text) {
      for (RouteObjectiveFunctionEnum b : RouteObjectiveFunctionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RouteObjectiveFunctionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RouteObjectiveFunctionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RouteObjectiveFunctionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RouteObjectiveFunctionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("route-objective-function")
  private RouteObjectiveFunctionEnum routeObjectiveFunction = null;

  /**
   * Gets or Sets serviceType
   */
  @JsonAdapter(ServiceTypeEnum.Adapter.class)
  public enum ServiceTypeEnum {
    POINT_TO_POINT_CONNECTIVITY("POINT_TO_POINT_CONNECTIVITY"),
    
    POINT_TO_MULTIPOINT_CONNECTIVITY("POINT_TO_MULTIPOINT_CONNECTIVITY"),
    
    MULTIPOINT_CONNECTIVITY("MULTIPOINT_CONNECTIVITY"),
    
    ROOTED_MULTIPOINT_CONNECTIVITY("ROOTED_MULTIPOINT_CONNECTIVITY");

    private String value;

    ServiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceTypeEnum fromValue(String text) {
      for (ServiceTypeEnum b : ServiceTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ServiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ServiceTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("service-type")
  private ServiceTypeEnum serviceType = null;

  @SerializedName("schedule")
  private TimeRange schedule = null;

  @SerializedName("requested-capacity")
  private Capacity requestedCapacity = null;

  @SerializedName("cost-characteristic")
  private List<CostCharacteristic> costCharacteristic = null;

  @SerializedName("is-exclusive")
  private Boolean isExclusive = null;

  @SerializedName("service-level")
  private String serviceLevel = null;

  @SerializedName("diversity-exclusion")
  private List<ConnectivityServiceRef> diversityExclusion = null;

  @SerializedName("latency-characteristic")
  private List<LatencyCharacteristic> latencyCharacteristic = null;

  @SerializedName("coroute-inclusion")
  private ConnectivityServiceRef corouteInclusion = null;

  @SerializedName("exclude-node")
  private List<NodeRef> excludeNode = null;

  @SerializedName("include-node")
  private List<NodeRef> includeNode = null;

  @SerializedName("include-path")
  private List<PathRef> includePath = null;

  @SerializedName("include-link")
  private List<LinkRef> includeLink = null;

  @SerializedName("exclude-path")
  private List<PathRef> excludePath = null;

  @SerializedName("exclude-link")
  private List<LinkRef> excludeLink = null;

  /**
   * soft constraint requested by client to indicate the layer(s) of transport connection that it prefers to carry the service. This could be same as the service layer or one of the supported server layers
   */
  @JsonAdapter(PreferredTransportLayerEnum.Adapter.class)
  public enum PreferredTransportLayerEnum {
    OTSIA("OTSiA"),
    
    OCH("OCH"),
    
    OTU("OTU"),
    
    ODU("ODU"),
    
    ETH("ETH"),
    
    ETY("ETY"),
    
    SDM("SDM"),
    
    DSR("DSR");

    private String value;

    PreferredTransportLayerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PreferredTransportLayerEnum fromValue(String text) {
      for (PreferredTransportLayerEnum b : PreferredTransportLayerEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PreferredTransportLayerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreferredTransportLayerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PreferredTransportLayerEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PreferredTransportLayerEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("preferred-transport-layer")
  private List<PreferredTransportLayerEnum> preferredTransportLayer = null;

  @SerializedName("avoid-topology")
  private List<TopologyRef> avoidTopology = null;

  @SerializedName("include-topology")
  private List<TopologyRef> includeTopology = null;

  /**
   * Gets or Sets administrativeState
   */
  @JsonAdapter(AdministrativeStateEnum.Adapter.class)
  public enum AdministrativeStateEnum {
    LOCKED("LOCKED"),
    
    UNLOCKED("UNLOCKED");

    private String value;

    AdministrativeStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdministrativeStateEnum fromValue(String text) {
      for (AdministrativeStateEnum b : AdministrativeStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AdministrativeStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdministrativeStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdministrativeStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AdministrativeStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("administrative-state")
  private AdministrativeStateEnum administrativeState = null;

  /**
   * Gets or Sets lifecycleState
   */
  @JsonAdapter(LifecycleStateEnum.Adapter.class)
  public enum LifecycleStateEnum {
    PLANNED("PLANNED"),
    
    POTENTIAL_AVAILABLE("POTENTIAL_AVAILABLE"),
    
    POTENTIAL_BUSY("POTENTIAL_BUSY"),
    
    INSTALLED("INSTALLED"),
    
    PENDING_REMOVAL("PENDING_REMOVAL");

    private String value;

    LifecycleStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LifecycleStateEnum fromValue(String text) {
      for (LifecycleStateEnum b : LifecycleStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LifecycleStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LifecycleStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LifecycleStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LifecycleStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("lifecycle-state")
  private LifecycleStateEnum lifecycleState = null;

  /**
   * Gets or Sets operationalState
   */
  @JsonAdapter(OperationalStateEnum.Adapter.class)
  public enum OperationalStateEnum {
    DISABLED("DISABLED"),
    
    ENABLED("ENABLED");

    private String value;

    OperationalStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationalStateEnum fromValue(String text) {
      for (OperationalStateEnum b : OperationalStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OperationalStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationalStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationalStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OperationalStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("operational-state")
  private OperationalStateEnum operationalState = null;

  @SerializedName("max-switch-times")
  private String maxSwitchTimes = null;

  @SerializedName("wait-to-revert-time")
  private String waitToRevertTime = null;

  /**
   * Indicate which layer this resilience parameters package configured for.
   */
  @JsonAdapter(LayerProtocolEnum.Adapter.class)
  public enum LayerProtocolEnum {
    OTSIA("OTSiA"),
    
    OCH("OCH"),
    
    OTU("OTU"),
    
    ODU("ODU"),
    
    ETH("ETH"),
    
    ETY("ETY"),
    
    SDM("SDM"),
    
    DSR("DSR");

    private String value;

    LayerProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LayerProtocolEnum fromValue(String text) {
      for (LayerProtocolEnum b : LayerProtocolEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LayerProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LayerProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LayerProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LayerProtocolEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("layer-protocol")
  private LayerProtocolEnum layerProtocol = null;

  @SerializedName("restore-priority")
  private String restorePriority = null;

  @SerializedName("is-lock-out")
  private Boolean isLockOut = null;

  @SerializedName("is-coordinated-switching-both-ends")
  private Boolean isCoordinatedSwitchingBothEnds = null;

  @SerializedName("is-frozen")
  private Boolean isFrozen = null;

  /**
   * Indcates whether the protection scheme is revertive or non-revertive.
   */
  @JsonAdapter(ReversionModeEnum.Adapter.class)
  public enum ReversionModeEnum {
    REVERTIVE("REVERTIVE"),
    
    NON_REVERTIVE("NON-REVERTIVE");

    private String value;

    ReversionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReversionModeEnum fromValue(String text) {
      for (ReversionModeEnum b : ReversionModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ReversionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReversionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReversionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ReversionModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("reversion-mode")
  private ReversionModeEnum reversionMode = null;

  @SerializedName("hold-off-time")
  private String holdOffTime = null;

  @SerializedName("resilience-type")
  private ResilienceType resilienceType = null;

  /**
   *  The coordination mechanism between multi-layers.
   */
  @JsonAdapter(RestorationCoordinateTypeEnum.Adapter.class)
  public enum RestorationCoordinateTypeEnum {
    NO_COORDINATE("NO_COORDINATE"),
    
    HOLD_OFF_TIME("HOLD_OFF_TIME"),
    
    WAIT_FOR_NOTIFICATION("WAIT_FOR_NOTIFICATION");

    private String value;

    RestorationCoordinateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestorationCoordinateTypeEnum fromValue(String text) {
      for (RestorationCoordinateTypeEnum b : RestorationCoordinateTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RestorationCoordinateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestorationCoordinateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestorationCoordinateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RestorationCoordinateTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("restoration-coordinate-type")
  private RestorationCoordinateTypeEnum restorationCoordinateType = null;

  /**
   * Gets or Sets layerProtocolName
   */
  @JsonAdapter(LayerProtocolNameEnum.Adapter.class)
  public enum LayerProtocolNameEnum {
    OTSIA("OTSiA"),
    
    OCH("OCH"),
    
    OTU("OTU"),
    
    ODU("ODU"),
    
    ETH("ETH"),
    
    ETY("ETY"),
    
    SDM("SDM"),
    
    DSR("DSR");

    private String value;

    LayerProtocolNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LayerProtocolNameEnum fromValue(String text) {
      for (LayerProtocolNameEnum b : LayerProtocolNameEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LayerProtocolNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LayerProtocolNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LayerProtocolNameEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LayerProtocolNameEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("layer-protocol-name")
  private LayerProtocolNameEnum layerProtocolName = null;

  @SerializedName("connection")
  private List<ConnectionRef> connection = null;

  @SerializedName("end-point")
  private List<ConnectivityServiceEndPoint> endPoint = null;

  /**
   * Gets or Sets direction
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    BIDIRECTIONAL("BIDIRECTIONAL"),
    
    UNIDIRECTIONAL("UNIDIRECTIONAL"),
    
    UNDEFINED_OR_UNKNOWN("UNDEFINED_OR_UNKNOWN");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String text) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DirectionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("direction")
  private DirectionEnum direction = null;

  public ConnectivityService uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-&#39; + &#39;[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
   * @return uuid
  **/
  @ApiModelProperty(value = "UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public ConnectivityService name(List<NameAndValue> name) {
    this.name = name;
    return this;
  }

  public ConnectivityService addNameItem(NameAndValue nameItem) {
    if (this.name == null) {
      this.name = new ArrayList<NameAndValue>();
    }
    this.name.add(nameItem);
    return this;
  }

   /**
   * List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.
   * @return name
  **/
  @ApiModelProperty(value = "List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.")
  public List<NameAndValue> getName() {
    return name;
  }

  public void setName(List<NameAndValue> name) {
    this.name = name;
  }

  public ConnectivityService diversityPolicy(DiversityPolicyEnum diversityPolicy) {
    this.diversityPolicy = diversityPolicy;
    return this;
  }

   /**
   * Get diversityPolicy
   * @return diversityPolicy
  **/
  @ApiModelProperty(value = "")
  public DiversityPolicyEnum getDiversityPolicy() {
    return diversityPolicy;
  }

  public void setDiversityPolicy(DiversityPolicyEnum diversityPolicy) {
    this.diversityPolicy = diversityPolicy;
  }

  public ConnectivityService routeObjectiveFunction(RouteObjectiveFunctionEnum routeObjectiveFunction) {
    this.routeObjectiveFunction = routeObjectiveFunction;
    return this;
  }

   /**
   * Get routeObjectiveFunction
   * @return routeObjectiveFunction
  **/
  @ApiModelProperty(value = "")
  public RouteObjectiveFunctionEnum getRouteObjectiveFunction() {
    return routeObjectiveFunction;
  }

  public void setRouteObjectiveFunction(RouteObjectiveFunctionEnum routeObjectiveFunction) {
    this.routeObjectiveFunction = routeObjectiveFunction;
  }

  public ConnectivityService serviceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
    return this;
  }

   /**
   * Get serviceType
   * @return serviceType
  **/
  @ApiModelProperty(value = "")
  public ServiceTypeEnum getServiceType() {
    return serviceType;
  }

  public void setServiceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
  }

  public ConnectivityService schedule(TimeRange schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Get schedule
   * @return schedule
  **/
  @ApiModelProperty(value = "")
  public TimeRange getSchedule() {
    return schedule;
  }

  public void setSchedule(TimeRange schedule) {
    this.schedule = schedule;
  }

  public ConnectivityService requestedCapacity(Capacity requestedCapacity) {
    this.requestedCapacity = requestedCapacity;
    return this;
  }

   /**
   * Get requestedCapacity
   * @return requestedCapacity
  **/
  @ApiModelProperty(value = "")
  public Capacity getRequestedCapacity() {
    return requestedCapacity;
  }

  public void setRequestedCapacity(Capacity requestedCapacity) {
    this.requestedCapacity = requestedCapacity;
  }

  public ConnectivityService costCharacteristic(List<CostCharacteristic> costCharacteristic) {
    this.costCharacteristic = costCharacteristic;
    return this;
  }

  public ConnectivityService addCostCharacteristicItem(CostCharacteristic costCharacteristicItem) {
    if (this.costCharacteristic == null) {
      this.costCharacteristic = new ArrayList<CostCharacteristic>();
    }
    this.costCharacteristic.add(costCharacteristicItem);
    return this;
  }

   /**
   * The list of costs where each cost relates to some aspect of the TopologicalEntity.
   * @return costCharacteristic
  **/
  @ApiModelProperty(value = "The list of costs where each cost relates to some aspect of the TopologicalEntity.")
  public List<CostCharacteristic> getCostCharacteristic() {
    return costCharacteristic;
  }

  public void setCostCharacteristic(List<CostCharacteristic> costCharacteristic) {
    this.costCharacteristic = costCharacteristic;
  }

  public ConnectivityService isExclusive(Boolean isExclusive) {
    this.isExclusive = isExclusive;
    return this;
  }

   /**
   * To distinguish if the resources are exclusive to the service  - for example between EPL(isExclusive&#x3D;true) and EVPL (isExclusive&#x3D;false), or between EPLAN (isExclusive&#x3D;true) and EVPLAN (isExclusive&#x3D;false)
   * @return isExclusive
  **/
  @ApiModelProperty(value = "To distinguish if the resources are exclusive to the service  - for example between EPL(isExclusive=true) and EVPL (isExclusive=false), or between EPLAN (isExclusive=true) and EVPLAN (isExclusive=false)")
  public Boolean isIsExclusive() {
    return isExclusive;
  }

  public void setIsExclusive(Boolean isExclusive) {
    this.isExclusive = isExclusive;
  }

  public ConnectivityService serviceLevel(String serviceLevel) {
    this.serviceLevel = serviceLevel;
    return this;
  }

   /**
   * An abstract value the meaning of which is mutually agreed – typically represents metrics such as - Class of service, priority, resiliency, availability
   * @return serviceLevel
  **/
  @ApiModelProperty(value = "An abstract value the meaning of which is mutually agreed – typically represents metrics such as - Class of service, priority, resiliency, availability")
  public String getServiceLevel() {
    return serviceLevel;
  }

  public void setServiceLevel(String serviceLevel) {
    this.serviceLevel = serviceLevel;
  }

  public ConnectivityService diversityExclusion(List<ConnectivityServiceRef> diversityExclusion) {
    this.diversityExclusion = diversityExclusion;
    return this;
  }

  public ConnectivityService addDiversityExclusionItem(ConnectivityServiceRef diversityExclusionItem) {
    if (this.diversityExclusion == null) {
      this.diversityExclusion = new ArrayList<ConnectivityServiceRef>();
    }
    this.diversityExclusion.add(diversityExclusionItem);
    return this;
  }

   /**
   * Get diversityExclusion
   * @return diversityExclusion
  **/
  @ApiModelProperty(value = "")
  public List<ConnectivityServiceRef> getDiversityExclusion() {
    return diversityExclusion;
  }

  public void setDiversityExclusion(List<ConnectivityServiceRef> diversityExclusion) {
    this.diversityExclusion = diversityExclusion;
  }

  public ConnectivityService latencyCharacteristic(List<LatencyCharacteristic> latencyCharacteristic) {
    this.latencyCharacteristic = latencyCharacteristic;
    return this;
  }

  public ConnectivityService addLatencyCharacteristicItem(LatencyCharacteristic latencyCharacteristicItem) {
    if (this.latencyCharacteristic == null) {
      this.latencyCharacteristic = new ArrayList<LatencyCharacteristic>();
    }
    this.latencyCharacteristic.add(latencyCharacteristicItem);
    return this;
  }

   /**
   * The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.
   * @return latencyCharacteristic
  **/
  @ApiModelProperty(value = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.")
  public List<LatencyCharacteristic> getLatencyCharacteristic() {
    return latencyCharacteristic;
  }

  public void setLatencyCharacteristic(List<LatencyCharacteristic> latencyCharacteristic) {
    this.latencyCharacteristic = latencyCharacteristic;
  }

  public ConnectivityService corouteInclusion(ConnectivityServiceRef corouteInclusion) {
    this.corouteInclusion = corouteInclusion;
    return this;
  }

   /**
   * Get corouteInclusion
   * @return corouteInclusion
  **/
  @ApiModelProperty(value = "")
  public ConnectivityServiceRef getCorouteInclusion() {
    return corouteInclusion;
  }

  public void setCorouteInclusion(ConnectivityServiceRef corouteInclusion) {
    this.corouteInclusion = corouteInclusion;
  }

  public ConnectivityService excludeNode(List<NodeRef> excludeNode) {
    this.excludeNode = excludeNode;
    return this;
  }

  public ConnectivityService addExcludeNodeItem(NodeRef excludeNodeItem) {
    if (this.excludeNode == null) {
      this.excludeNode = new ArrayList<NodeRef>();
    }
    this.excludeNode.add(excludeNodeItem);
    return this;
  }

   /**
   * Get excludeNode
   * @return excludeNode
  **/
  @ApiModelProperty(value = "")
  public List<NodeRef> getExcludeNode() {
    return excludeNode;
  }

  public void setExcludeNode(List<NodeRef> excludeNode) {
    this.excludeNode = excludeNode;
  }

  public ConnectivityService includeNode(List<NodeRef> includeNode) {
    this.includeNode = includeNode;
    return this;
  }

  public ConnectivityService addIncludeNodeItem(NodeRef includeNodeItem) {
    if (this.includeNode == null) {
      this.includeNode = new ArrayList<NodeRef>();
    }
    this.includeNode.add(includeNodeItem);
    return this;
  }

   /**
   * This is a loose constraint - that is it is unordered and could be a partial list
   * @return includeNode
  **/
  @ApiModelProperty(value = "This is a loose constraint - that is it is unordered and could be a partial list")
  public List<NodeRef> getIncludeNode() {
    return includeNode;
  }

  public void setIncludeNode(List<NodeRef> includeNode) {
    this.includeNode = includeNode;
  }

  public ConnectivityService includePath(List<PathRef> includePath) {
    this.includePath = includePath;
    return this;
  }

  public ConnectivityService addIncludePathItem(PathRef includePathItem) {
    if (this.includePath == null) {
      this.includePath = new ArrayList<PathRef>();
    }
    this.includePath.add(includePathItem);
    return this;
  }

   /**
   * Get includePath
   * @return includePath
  **/
  @ApiModelProperty(value = "")
  public List<PathRef> getIncludePath() {
    return includePath;
  }

  public void setIncludePath(List<PathRef> includePath) {
    this.includePath = includePath;
  }

  public ConnectivityService includeLink(List<LinkRef> includeLink) {
    this.includeLink = includeLink;
    return this;
  }

  public ConnectivityService addIncludeLinkItem(LinkRef includeLinkItem) {
    if (this.includeLink == null) {
      this.includeLink = new ArrayList<LinkRef>();
    }
    this.includeLink.add(includeLinkItem);
    return this;
  }

   /**
   * This is a loose constraint - that is it is unordered and could be a partial list 
   * @return includeLink
  **/
  @ApiModelProperty(value = "This is a loose constraint - that is it is unordered and could be a partial list ")
  public List<LinkRef> getIncludeLink() {
    return includeLink;
  }

  public void setIncludeLink(List<LinkRef> includeLink) {
    this.includeLink = includeLink;
  }

  public ConnectivityService excludePath(List<PathRef> excludePath) {
    this.excludePath = excludePath;
    return this;
  }

  public ConnectivityService addExcludePathItem(PathRef excludePathItem) {
    if (this.excludePath == null) {
      this.excludePath = new ArrayList<PathRef>();
    }
    this.excludePath.add(excludePathItem);
    return this;
  }

   /**
   * Get excludePath
   * @return excludePath
  **/
  @ApiModelProperty(value = "")
  public List<PathRef> getExcludePath() {
    return excludePath;
  }

  public void setExcludePath(List<PathRef> excludePath) {
    this.excludePath = excludePath;
  }

  public ConnectivityService excludeLink(List<LinkRef> excludeLink) {
    this.excludeLink = excludeLink;
    return this;
  }

  public ConnectivityService addExcludeLinkItem(LinkRef excludeLinkItem) {
    if (this.excludeLink == null) {
      this.excludeLink = new ArrayList<LinkRef>();
    }
    this.excludeLink.add(excludeLinkItem);
    return this;
  }

   /**
   * Get excludeLink
   * @return excludeLink
  **/
  @ApiModelProperty(value = "")
  public List<LinkRef> getExcludeLink() {
    return excludeLink;
  }

  public void setExcludeLink(List<LinkRef> excludeLink) {
    this.excludeLink = excludeLink;
  }

  public ConnectivityService preferredTransportLayer(List<PreferredTransportLayerEnum> preferredTransportLayer) {
    this.preferredTransportLayer = preferredTransportLayer;
    return this;
  }

  public ConnectivityService addPreferredTransportLayerItem(PreferredTransportLayerEnum preferredTransportLayerItem) {
    if (this.preferredTransportLayer == null) {
      this.preferredTransportLayer = new ArrayList<PreferredTransportLayerEnum>();
    }
    this.preferredTransportLayer.add(preferredTransportLayerItem);
    return this;
  }

   /**
   * Get preferredTransportLayer
   * @return preferredTransportLayer
  **/
  @ApiModelProperty(value = "")
  public List<PreferredTransportLayerEnum> getPreferredTransportLayer() {
    return preferredTransportLayer;
  }

  public void setPreferredTransportLayer(List<PreferredTransportLayerEnum> preferredTransportLayer) {
    this.preferredTransportLayer = preferredTransportLayer;
  }

  public ConnectivityService avoidTopology(List<TopologyRef> avoidTopology) {
    this.avoidTopology = avoidTopology;
    return this;
  }

  public ConnectivityService addAvoidTopologyItem(TopologyRef avoidTopologyItem) {
    if (this.avoidTopology == null) {
      this.avoidTopology = new ArrayList<TopologyRef>();
    }
    this.avoidTopology.add(avoidTopologyItem);
    return this;
  }

   /**
   * Get avoidTopology
   * @return avoidTopology
  **/
  @ApiModelProperty(value = "")
  public List<TopologyRef> getAvoidTopology() {
    return avoidTopology;
  }

  public void setAvoidTopology(List<TopologyRef> avoidTopology) {
    this.avoidTopology = avoidTopology;
  }

  public ConnectivityService includeTopology(List<TopologyRef> includeTopology) {
    this.includeTopology = includeTopology;
    return this;
  }

  public ConnectivityService addIncludeTopologyItem(TopologyRef includeTopologyItem) {
    if (this.includeTopology == null) {
      this.includeTopology = new ArrayList<TopologyRef>();
    }
    this.includeTopology.add(includeTopologyItem);
    return this;
  }

   /**
   * Get includeTopology
   * @return includeTopology
  **/
  @ApiModelProperty(value = "")
  public List<TopologyRef> getIncludeTopology() {
    return includeTopology;
  }

  public void setIncludeTopology(List<TopologyRef> includeTopology) {
    this.includeTopology = includeTopology;
  }

  public ConnectivityService administrativeState(AdministrativeStateEnum administrativeState) {
    this.administrativeState = administrativeState;
    return this;
  }

   /**
   * Get administrativeState
   * @return administrativeState
  **/
  @ApiModelProperty(value = "")
  public AdministrativeStateEnum getAdministrativeState() {
    return administrativeState;
  }

  public void setAdministrativeState(AdministrativeStateEnum administrativeState) {
    this.administrativeState = administrativeState;
  }

  public ConnectivityService lifecycleState(LifecycleStateEnum lifecycleState) {
    this.lifecycleState = lifecycleState;
    return this;
  }

   /**
   * Get lifecycleState
   * @return lifecycleState
  **/
  @ApiModelProperty(value = "")
  public LifecycleStateEnum getLifecycleState() {
    return lifecycleState;
  }

  public void setLifecycleState(LifecycleStateEnum lifecycleState) {
    this.lifecycleState = lifecycleState;
  }

  public ConnectivityService operationalState(OperationalStateEnum operationalState) {
    this.operationalState = operationalState;
    return this;
  }

   /**
   * Get operationalState
   * @return operationalState
  **/
  @ApiModelProperty(value = "")
  public OperationalStateEnum getOperationalState() {
    return operationalState;
  }

  public void setOperationalState(OperationalStateEnum operationalState) {
    this.operationalState = operationalState;
  }

  public ConnectivityService maxSwitchTimes(String maxSwitchTimes) {
    this.maxSwitchTimes = maxSwitchTimes;
    return this;
  }

   /**
   * Used to limit the maximum swtich times. When work fault disappears , and traffic return to the original work path, switch counter reset.
   * @return maxSwitchTimes
  **/
  @ApiModelProperty(value = "Used to limit the maximum swtich times. When work fault disappears , and traffic return to the original work path, switch counter reset.")
  public String getMaxSwitchTimes() {
    return maxSwitchTimes;
  }

  public void setMaxSwitchTimes(String maxSwitchTimes) {
    this.maxSwitchTimes = maxSwitchTimes;
  }

  public ConnectivityService waitToRevertTime(String waitToRevertTime) {
    this.waitToRevertTime = waitToRevertTime;
    return this;
  }

   /**
   * If the protection system is revertive, this attribute specifies the time, in minutes, to wait after a fault clears on a higher priority (preferred) resource before reverting to the preferred resource.
   * @return waitToRevertTime
  **/
  @ApiModelProperty(value = "If the protection system is revertive, this attribute specifies the time, in minutes, to wait after a fault clears on a higher priority (preferred) resource before reverting to the preferred resource.")
  public String getWaitToRevertTime() {
    return waitToRevertTime;
  }

  public void setWaitToRevertTime(String waitToRevertTime) {
    this.waitToRevertTime = waitToRevertTime;
  }

  public ConnectivityService layerProtocol(LayerProtocolEnum layerProtocol) {
    this.layerProtocol = layerProtocol;
    return this;
  }

   /**
   * Indicate which layer this resilience parameters package configured for.
   * @return layerProtocol
  **/
  @ApiModelProperty(value = "Indicate which layer this resilience parameters package configured for.")
  public LayerProtocolEnum getLayerProtocol() {
    return layerProtocol;
  }

  public void setLayerProtocol(LayerProtocolEnum layerProtocol) {
    this.layerProtocol = layerProtocol;
  }

  public ConnectivityService restorePriority(String restorePriority) {
    this.restorePriority = restorePriority;
    return this;
  }

   /**
   * Get restorePriority
   * @return restorePriority
  **/
  @ApiModelProperty(value = "")
  public String getRestorePriority() {
    return restorePriority;
  }

  public void setRestorePriority(String restorePriority) {
    this.restorePriority = restorePriority;
  }

  public ConnectivityService isLockOut(Boolean isLockOut) {
    this.isLockOut = isLockOut;
    return this;
  }

   /**
   * The resource is configured to temporarily not be available for use in the protection scheme(s) it is part of. This overrides all other protection control states including forced. If the item is locked out then it cannot be used under any circumstances. Note: Only relevant when part of a protection scheme.
   * @return isLockOut
  **/
  @ApiModelProperty(value = "The resource is configured to temporarily not be available for use in the protection scheme(s) it is part of. This overrides all other protection control states including forced. If the item is locked out then it cannot be used under any circumstances. Note: Only relevant when part of a protection scheme.")
  public Boolean isIsLockOut() {
    return isLockOut;
  }

  public void setIsLockOut(Boolean isLockOut) {
    this.isLockOut = isLockOut;
  }

  public ConnectivityService isCoordinatedSwitchingBothEnds(Boolean isCoordinatedSwitchingBothEnds) {
    this.isCoordinatedSwitchingBothEnds = isCoordinatedSwitchingBothEnds;
    return this;
  }

   /**
   * Is operating such that switching at both ends of each flow acorss the FC is coordinated at both ingress and egress ends.
   * @return isCoordinatedSwitchingBothEnds
  **/
  @ApiModelProperty(value = "Is operating such that switching at both ends of each flow acorss the FC is coordinated at both ingress and egress ends.")
  public Boolean isIsCoordinatedSwitchingBothEnds() {
    return isCoordinatedSwitchingBothEnds;
  }

  public void setIsCoordinatedSwitchingBothEnds(Boolean isCoordinatedSwitchingBothEnds) {
    this.isCoordinatedSwitchingBothEnds = isCoordinatedSwitchingBothEnds;
  }

  public ConnectivityService isFrozen(Boolean isFrozen) {
    this.isFrozen = isFrozen;
    return this;
  }

   /**
   * Temporarily prevents any switch action to be taken and, as such, freezes the current state.  Until the freeze is cleared, additional near-end external commands are rejected and fault condition changes and received APS messages are ignored. All administrative controls of any aspect of protection are rejected.
   * @return isFrozen
  **/
  @ApiModelProperty(value = "Temporarily prevents any switch action to be taken and, as such, freezes the current state.  Until the freeze is cleared, additional near-end external commands are rejected and fault condition changes and received APS messages are ignored. All administrative controls of any aspect of protection are rejected.")
  public Boolean isIsFrozen() {
    return isFrozen;
  }

  public void setIsFrozen(Boolean isFrozen) {
    this.isFrozen = isFrozen;
  }

  public ConnectivityService reversionMode(ReversionModeEnum reversionMode) {
    this.reversionMode = reversionMode;
    return this;
  }

   /**
   * Indcates whether the protection scheme is revertive or non-revertive.
   * @return reversionMode
  **/
  @ApiModelProperty(value = "Indcates whether the protection scheme is revertive or non-revertive.")
  public ReversionModeEnum getReversionMode() {
    return reversionMode;
  }

  public void setReversionMode(ReversionModeEnum reversionMode) {
    this.reversionMode = reversionMode;
  }

  public ConnectivityService holdOffTime(String holdOffTime) {
    this.holdOffTime = holdOffTime;
    return this;
  }

   /**
   * This attribute indicates the time, in milliseconds, between declaration of signal degrade or signal fail, and the initialization of the protection switching algorithm.
   * @return holdOffTime
  **/
  @ApiModelProperty(value = "This attribute indicates the time, in milliseconds, between declaration of signal degrade or signal fail, and the initialization of the protection switching algorithm.")
  public String getHoldOffTime() {
    return holdOffTime;
  }

  public void setHoldOffTime(String holdOffTime) {
    this.holdOffTime = holdOffTime;
  }

  public ConnectivityService resilienceType(ResilienceType resilienceType) {
    this.resilienceType = resilienceType;
    return this;
  }

   /**
   * Get resilienceType
   * @return resilienceType
  **/
  @ApiModelProperty(value = "")
  public ResilienceType getResilienceType() {
    return resilienceType;
  }

  public void setResilienceType(ResilienceType resilienceType) {
    this.resilienceType = resilienceType;
  }

  public ConnectivityService restorationCoordinateType(RestorationCoordinateTypeEnum restorationCoordinateType) {
    this.restorationCoordinateType = restorationCoordinateType;
    return this;
  }

   /**
   *  The coordination mechanism between multi-layers.
   * @return restorationCoordinateType
  **/
  @ApiModelProperty(value = " The coordination mechanism between multi-layers.")
  public RestorationCoordinateTypeEnum getRestorationCoordinateType() {
    return restorationCoordinateType;
  }

  public void setRestorationCoordinateType(RestorationCoordinateTypeEnum restorationCoordinateType) {
    this.restorationCoordinateType = restorationCoordinateType;
  }

  public ConnectivityService layerProtocolName(LayerProtocolNameEnum layerProtocolName) {
    this.layerProtocolName = layerProtocolName;
    return this;
  }

   /**
   * Get layerProtocolName
   * @return layerProtocolName
  **/
  @ApiModelProperty(value = "")
  public LayerProtocolNameEnum getLayerProtocolName() {
    return layerProtocolName;
  }

  public void setLayerProtocolName(LayerProtocolNameEnum layerProtocolName) {
    this.layerProtocolName = layerProtocolName;
  }

  public ConnectivityService connection(List<ConnectionRef> connection) {
    this.connection = connection;
    return this;
  }

  public ConnectivityService addConnectionItem(ConnectionRef connectionItem) {
    if (this.connection == null) {
      this.connection = new ArrayList<ConnectionRef>();
    }
    this.connection.add(connectionItem);
    return this;
  }

   /**
   * Get connection
   * @return connection
  **/
  @ApiModelProperty(value = "")
  public List<ConnectionRef> getConnection() {
    return connection;
  }

  public void setConnection(List<ConnectionRef> connection) {
    this.connection = connection;
  }

  public ConnectivityService endPoint(List<ConnectivityServiceEndPoint> endPoint) {
    this.endPoint = endPoint;
    return this;
  }

  public ConnectivityService addEndPointItem(ConnectivityServiceEndPoint endPointItem) {
    if (this.endPoint == null) {
      this.endPoint = new ArrayList<ConnectivityServiceEndPoint>();
    }
    this.endPoint.add(endPointItem);
    return this;
  }

   /**
   * Get endPoint
   * @return endPoint
  **/
  @ApiModelProperty(value = "")
  public List<ConnectivityServiceEndPoint> getEndPoint() {
    return endPoint;
  }

  public void setEndPoint(List<ConnectivityServiceEndPoint> endPoint) {
    this.endPoint = endPoint;
  }

  public ConnectivityService direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @ApiModelProperty(value = "")
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectivityService connectivityService = (ConnectivityService) o;
    return Objects.equals(this.uuid, connectivityService.uuid) &&
        Objects.equals(this.name, connectivityService.name) &&
        Objects.equals(this.diversityPolicy, connectivityService.diversityPolicy) &&
        Objects.equals(this.routeObjectiveFunction, connectivityService.routeObjectiveFunction) &&
        Objects.equals(this.serviceType, connectivityService.serviceType) &&
        Objects.equals(this.schedule, connectivityService.schedule) &&
        Objects.equals(this.requestedCapacity, connectivityService.requestedCapacity) &&
        Objects.equals(this.costCharacteristic, connectivityService.costCharacteristic) &&
        Objects.equals(this.isExclusive, connectivityService.isExclusive) &&
        Objects.equals(this.serviceLevel, connectivityService.serviceLevel) &&
        Objects.equals(this.diversityExclusion, connectivityService.diversityExclusion) &&
        Objects.equals(this.latencyCharacteristic, connectivityService.latencyCharacteristic) &&
        Objects.equals(this.corouteInclusion, connectivityService.corouteInclusion) &&
        Objects.equals(this.excludeNode, connectivityService.excludeNode) &&
        Objects.equals(this.includeNode, connectivityService.includeNode) &&
        Objects.equals(this.includePath, connectivityService.includePath) &&
        Objects.equals(this.includeLink, connectivityService.includeLink) &&
        Objects.equals(this.excludePath, connectivityService.excludePath) &&
        Objects.equals(this.excludeLink, connectivityService.excludeLink) &&
        Objects.equals(this.preferredTransportLayer, connectivityService.preferredTransportLayer) &&
        Objects.equals(this.avoidTopology, connectivityService.avoidTopology) &&
        Objects.equals(this.includeTopology, connectivityService.includeTopology) &&
        Objects.equals(this.administrativeState, connectivityService.administrativeState) &&
        Objects.equals(this.lifecycleState, connectivityService.lifecycleState) &&
        Objects.equals(this.operationalState, connectivityService.operationalState) &&
        Objects.equals(this.maxSwitchTimes, connectivityService.maxSwitchTimes) &&
        Objects.equals(this.waitToRevertTime, connectivityService.waitToRevertTime) &&
        Objects.equals(this.layerProtocol, connectivityService.layerProtocol) &&
        Objects.equals(this.restorePriority, connectivityService.restorePriority) &&
        Objects.equals(this.isLockOut, connectivityService.isLockOut) &&
        Objects.equals(this.isCoordinatedSwitchingBothEnds, connectivityService.isCoordinatedSwitchingBothEnds) &&
        Objects.equals(this.isFrozen, connectivityService.isFrozen) &&
        Objects.equals(this.reversionMode, connectivityService.reversionMode) &&
        Objects.equals(this.holdOffTime, connectivityService.holdOffTime) &&
        Objects.equals(this.resilienceType, connectivityService.resilienceType) &&
        Objects.equals(this.restorationCoordinateType, connectivityService.restorationCoordinateType) &&
        Objects.equals(this.layerProtocolName, connectivityService.layerProtocolName) &&
        Objects.equals(this.connection, connectivityService.connection) &&
        Objects.equals(this.endPoint, connectivityService.endPoint) &&
        Objects.equals(this.direction, connectivityService.direction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, name, diversityPolicy, routeObjectiveFunction, serviceType, schedule, requestedCapacity, costCharacteristic, isExclusive, serviceLevel, diversityExclusion, latencyCharacteristic, corouteInclusion, excludeNode, includeNode, includePath, includeLink, excludePath, excludeLink, preferredTransportLayer, avoidTopology, includeTopology, administrativeState, lifecycleState, operationalState, maxSwitchTimes, waitToRevertTime, layerProtocol, restorePriority, isLockOut, isCoordinatedSwitchingBothEnds, isFrozen, reversionMode, holdOffTime, resilienceType, restorationCoordinateType, layerProtocolName, connection, endPoint, direction);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectivityService {\n");
    
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    diversityPolicy: ").append(toIndentedString(diversityPolicy)).append("\n");
    sb.append("    routeObjectiveFunction: ").append(toIndentedString(routeObjectiveFunction)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    requestedCapacity: ").append(toIndentedString(requestedCapacity)).append("\n");
    sb.append("    costCharacteristic: ").append(toIndentedString(costCharacteristic)).append("\n");
    sb.append("    isExclusive: ").append(toIndentedString(isExclusive)).append("\n");
    sb.append("    serviceLevel: ").append(toIndentedString(serviceLevel)).append("\n");
    sb.append("    diversityExclusion: ").append(toIndentedString(diversityExclusion)).append("\n");
    sb.append("    latencyCharacteristic: ").append(toIndentedString(latencyCharacteristic)).append("\n");
    sb.append("    corouteInclusion: ").append(toIndentedString(corouteInclusion)).append("\n");
    sb.append("    excludeNode: ").append(toIndentedString(excludeNode)).append("\n");
    sb.append("    includeNode: ").append(toIndentedString(includeNode)).append("\n");
    sb.append("    includePath: ").append(toIndentedString(includePath)).append("\n");
    sb.append("    includeLink: ").append(toIndentedString(includeLink)).append("\n");
    sb.append("    excludePath: ").append(toIndentedString(excludePath)).append("\n");
    sb.append("    excludeLink: ").append(toIndentedString(excludeLink)).append("\n");
    sb.append("    preferredTransportLayer: ").append(toIndentedString(preferredTransportLayer)).append("\n");
    sb.append("    avoidTopology: ").append(toIndentedString(avoidTopology)).append("\n");
    sb.append("    includeTopology: ").append(toIndentedString(includeTopology)).append("\n");
    sb.append("    administrativeState: ").append(toIndentedString(administrativeState)).append("\n");
    sb.append("    lifecycleState: ").append(toIndentedString(lifecycleState)).append("\n");
    sb.append("    operationalState: ").append(toIndentedString(operationalState)).append("\n");
    sb.append("    maxSwitchTimes: ").append(toIndentedString(maxSwitchTimes)).append("\n");
    sb.append("    waitToRevertTime: ").append(toIndentedString(waitToRevertTime)).append("\n");
    sb.append("    layerProtocol: ").append(toIndentedString(layerProtocol)).append("\n");
    sb.append("    restorePriority: ").append(toIndentedString(restorePriority)).append("\n");
    sb.append("    isLockOut: ").append(toIndentedString(isLockOut)).append("\n");
    sb.append("    isCoordinatedSwitchingBothEnds: ").append(toIndentedString(isCoordinatedSwitchingBothEnds)).append("\n");
    sb.append("    isFrozen: ").append(toIndentedString(isFrozen)).append("\n");
    sb.append("    reversionMode: ").append(toIndentedString(reversionMode)).append("\n");
    sb.append("    holdOffTime: ").append(toIndentedString(holdOffTime)).append("\n");
    sb.append("    resilienceType: ").append(toIndentedString(resilienceType)).append("\n");
    sb.append("    restorationCoordinateType: ").append(toIndentedString(restorationCoordinateType)).append("\n");
    sb.append("    layerProtocolName: ").append(toIndentedString(layerProtocolName)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    endPoint: ").append(toIndentedString(endPoint)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

