/*
 * tapi-sdm API
 * tapi-sdm API generated from tapi-sdm.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AvailableTransceiver;
import io.swagger.client.model.BandwidthProfile;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.CapacityValue;
import io.swagger.client.model.Connection;
import io.swagger.client.model.ConnectionEndPointRef;
import io.swagger.client.model.ConnectionEndPointSchema;
import io.swagger.client.model.ConnectionRef;
import io.swagger.client.model.ConnectivityServiceEndPoint;
import io.swagger.client.model.ConnectivityServiceEndPointRef;
import io.swagger.client.model.ConnectivityServiceRef;
import io.swagger.client.model.ConnectivityServiceSchema;
import io.swagger.client.model.ContextSchema;
import io.swagger.client.model.CoreSlot;
import io.swagger.client.model.CostCharacteristic;
import io.swagger.client.model.CreateConnectivityServiceRPCInputSchema;
import io.swagger.client.model.CreateConnectivityServiceRPCOutputSchema;
import io.swagger.client.model.DeleteConnectivityServiceRPCInputSchema;
import io.swagger.client.model.DeleteConnectivityServiceRPCOutputSchema;
import io.swagger.client.model.FrequencySlot;
import io.swagger.client.model.GetConnectionDetailsRPCInputSchema;
import io.swagger.client.model.GetConnectionDetailsRPCOutputSchema;
import io.swagger.client.model.GetConnectivityServiceDetailsRPCInputSchema;
import io.swagger.client.model.GetConnectivityServiceDetailsRPCOutputSchema;
import io.swagger.client.model.GetConnectivityServiceListRPCOutputSchema;
import io.swagger.client.model.GetLinkDetailsRPCInputSchema;
import io.swagger.client.model.GetLinkDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeDetailsRPCInputSchema;
import io.swagger.client.model.GetNodeDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCInputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCInputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetServiceInterfacePointListRPCOutputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCInputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCOutputSchema;
import io.swagger.client.model.GetTopologyListRPCOutputSchema;
import io.swagger.client.model.InterRuleGroup;
import io.swagger.client.model.LatencyCharacteristic;
import io.swagger.client.model.Link;
import io.swagger.client.model.LinkRef;
import io.swagger.client.model.ModelSwitch;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.NetworkTopologyService;
import io.swagger.client.model.Node;
import io.swagger.client.model.NodeRef;
import io.swagger.client.model.NodeRuleGroup;
import io.swagger.client.model.NodeRuleGroupRef;
import io.swagger.client.model.NominalCentralFrequencyOrWavelength;
import io.swagger.client.model.OwnedNodeEdgePointRef;
import io.swagger.client.model.OwnedNodeEdgePointSchema;
import io.swagger.client.model.Path;
import io.swagger.client.model.PathComputationService;
import io.swagger.client.model.PathObjectiveFunction;
import io.swagger.client.model.PathOptimizationConstraint;
import io.swagger.client.model.PathRef;
import io.swagger.client.model.PathServiceEndPoint;
import io.swagger.client.model.ResilienceType;
import io.swagger.client.model.RiskCharacteristic;
import io.swagger.client.model.Route;
import io.swagger.client.model.RouteRef;
import io.swagger.client.model.RoutingConstraint;
import io.swagger.client.model.Rule;
import io.swagger.client.model.SdmPoolPac;
import io.swagger.client.model.SdmTerminationPac;
import io.swagger.client.model.ServiceInterfacePoint;
import io.swagger.client.model.ServiceInterfacePointRef;
import io.swagger.client.model.SupportedBandwidthSchema;
import io.swagger.client.model.SupportedCenterFrequencyRangeSchema;
import io.swagger.client.model.SupportedModulationFormatSchema;
import io.swagger.client.model.SwitchControl;
import io.swagger.client.model.SwitchControlRef;
import io.swagger.client.model.TimeRange;
import io.swagger.client.model.Topology;
import io.swagger.client.model.TopologyRef;
import io.swagger.client.model.UpdateConnectivityServiceRPCInputSchema;
import io.swagger.client.model.UpdateConnectivityServiceRPCOutputSchema;
import io.swagger.client.model.UpdateServiceInterfacePointRPCInputSchema;
import io.swagger.client.model.ValidationMechanism;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Create context by ID
     *
     * Create operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextByIdTest() throws ApiException {
        ContextSchema context = null;
        api.createContextById(context);

        // TODO: test validations
    }
    
    /**
     * Create connection-end-point by ID
     *
     * Create operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectionConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        api.createContextConnectionConnectionEndPointConnectionEndPointById(uuid, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Create connectivity-service-end-point by ID
     *
     * Create operation of resource: connectivity-service-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        ConnectivityServiceEndPointRef connectivityServiceEndPoint = null;
        api.createContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(uuid, connectionEndPointUuid, connectivityServiceEndPoint);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectionConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextConnectionConnectionEndPointNameNameById(uuid, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create connection-end-point by ID
     *
     * Create operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectionRouteConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        api.createContextConnectionRouteConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Create connectivity-service-end-point by ID
     *
     * Create operation of resource: connectivity-service-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectivityServiceEndPointRef connectivityServiceEndPoint = null;
        api.createContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(uuid, localId, connectionEndPointUuid, connectivityServiceEndPoint);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectionRouteConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextConnectionRouteConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create connectivity-service by ID
     *
     * Create operation of resource: connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceConnectivityServiceByIdTest() throws ApiException {
        String uuid = null;
        ConnectivityServiceSchema connectivityService = null;
        api.createContextConnectivityServiceConnectivityServiceById(uuid, connectivityService);

        // TODO: test validations
    }
    
    /**
     * Create coroute-inclusion by ID
     *
     * Create operation of resource: coroute-inclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceCorouteInclusionCorouteInclusionByIdTest() throws ApiException {
        String uuid = null;
        ConnectivityServiceRef corouteInclusion = null;
        api.createContextConnectivityServiceCorouteInclusionCorouteInclusionById(uuid, corouteInclusion);

        // TODO: test validations
    }
    
    /**
     * Create cost-characteristic by ID
     *
     * Create operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic costCharacteristic = null;
        api.createContextConnectivityServiceCostCharacteristicCostCharacteristicById(uuid, costName, costCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Create diversity-exclusion by ID
     *
     * Create operation of resource: diversity-exclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceDiversityExclusionDiversityExclusionByIdTest() throws ApiException {
        String uuid = null;
        String connectivityServiceId = null;
        ConnectivityServiceRef diversityExclusion = null;
        api.createContextConnectivityServiceDiversityExclusionDiversityExclusionById(uuid, connectivityServiceId, diversityExclusion);

        // TODO: test validations
    }
    
    /**
     * Create bandwidth-profile by ID
     *
     * Create operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        BandwidthProfile bandwidthProfile = null;
        api.createContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(uuid, localId, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Create committed-burst-size by ID
     *
     * Create operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedBurstSize = null;
        api.createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, localId, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create committed-information-rate by ID
     *
     * Create operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedInformationRate = null;
        api.createContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, localId, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create peak-burst-size by ID
     *
     * Create operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakBurstSize = null;
        api.createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, localId, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create peak-information-rate by ID
     *
     * Create operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakInformationRate = null;
        api.createContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, localId, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create capacity by ID
     *
     * Create operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceEndPointCapacityCapacityByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Capacity capacity = null;
        api.createContextConnectivityServiceEndPointCapacityCapacityById(uuid, localId, capacity);

        // TODO: test validations
    }
    
    /**
     * Create total-size by ID
     *
     * Create operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue totalSize = null;
        api.createContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(uuid, localId, totalSize);

        // TODO: test validations
    }
    
    /**
     * Create end-point by ID
     *
     * Create operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ConnectivityServiceEndPoint endPoint = null;
        api.createContextConnectivityServiceEndPointEndPointById(uuid, localId, endPoint);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextConnectivityServiceEndPointNameNameById(uuid, localId, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create service-interface-point by ID
     *
     * Create operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ServiceInterfacePointRef serviceInterfacePoint = null;
        api.createContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Create include-core by ID
     *
     * Create operation of resource: include-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceIncludeCoreIncludeCoreByIdTest() throws ApiException {
        String uuid = null;
        SdmTerminationPac includeCore = null;
        api.createContextConnectivityServiceIncludeCoreIncludeCoreById(uuid, includeCore);

        // TODO: test validations
    }
    
    /**
     * Create latency-characteristic by ID
     *
     * Create operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic latencyCharacteristic = null;
        api.createContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName, latencyCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextConnectivityServiceNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create bandwidth-profile by ID
     *
     * Create operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        BandwidthProfile bandwidthProfile = null;
        api.createContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(uuid, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Create committed-burst-size by ID
     *
     * Create operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue committedBurstSize = null;
        api.createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create committed-information-rate by ID
     *
     * Create operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue committedInformationRate = null;
        api.createContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create peak-burst-size by ID
     *
     * Create operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue peakBurstSize = null;
        api.createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create peak-information-rate by ID
     *
     * Create operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue peakInformationRate = null;
        api.createContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create requested-capacity by ID
     *
     * Create operation of resource: requested-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceRequestedCapacityRequestedCapacityByIdTest() throws ApiException {
        String uuid = null;
        Capacity requestedCapacity = null;
        api.createContextConnectivityServiceRequestedCapacityRequestedCapacityById(uuid, requestedCapacity);

        // TODO: test validations
    }
    
    /**
     * Create total-size by ID
     *
     * Create operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue totalSize = null;
        api.createContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(uuid, totalSize);

        // TODO: test validations
    }
    
    /**
     * Create resilience-type by ID
     *
     * Create operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceResilienceTypeResilienceTypeByIdTest() throws ApiException {
        String uuid = null;
        ResilienceType resilienceType = null;
        api.createContextConnectivityServiceResilienceTypeResilienceTypeById(uuid, resilienceType);

        // TODO: test validations
    }
    
    /**
     * Create schedule by ID
     *
     * Create operation of resource: schedule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityServiceScheduleScheduleByIdTest() throws ApiException {
        String uuid = null;
        TimeRange schedule = null;
        api.createContextConnectivityServiceScheduleScheduleById(uuid, schedule);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextNameNameByIdTest() throws ApiException {
        String valueName = null;
        NameAndValue name = null;
        api.createContextNameNameById(valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create end-point by ID
     *
     * Create operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathCompServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        PathServiceEndPoint endPoint = null;
        api.createContextPathCompServiceEndPointEndPointById(uuid, localId, endPoint);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathCompServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathCompServiceEndPointNameNameById(uuid, localId, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathCompServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathCompServiceNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathCompServiceObjectiveFunctionNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathCompServiceObjectiveFunctionNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create objective-function by ID
     *
     * Create operation of resource: objective-function
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdTest() throws ApiException {
        String uuid = null;
        PathObjectiveFunction objectiveFunction = null;
        api.createContextPathCompServiceObjectiveFunctionObjectiveFunctionById(uuid, objectiveFunction);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathCompServiceOptimizationConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathCompServiceOptimizationConstraintNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create optimization-constraint by ID
     *
     * Create operation of resource: optimization-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdTest() throws ApiException {
        String uuid = null;
        PathOptimizationConstraint optimizationConstraint = null;
        api.createContextPathCompServiceOptimizationConstraintOptimizationConstraintById(uuid, optimizationConstraint);

        // TODO: test validations
    }
    
    /**
     * Create path-comp-service by ID
     *
     * Create operation of resource: path-comp-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathCompServicePathCompServiceByIdTest() throws ApiException {
        String uuid = null;
        PathComputationService pathCompService = null;
        api.createContextPathCompServicePathCompServiceById(uuid, pathCompService);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathCompServiceRoutingConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathCompServiceRoutingConstraintNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create routing-constraint by ID
     *
     * Create operation of resource: routing-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathCompServiceRoutingConstraintRoutingConstraintByIdTest() throws ApiException {
        String uuid = null;
        RoutingConstraint routingConstraint = null;
        api.createContextPathCompServiceRoutingConstraintRoutingConstraintById(uuid, routingConstraint);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextServiceInterfacePointNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create service-interface-point by ID
     *
     * Create operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        ServiceInterfacePoint serviceInterfacePoint = null;
        api.createContextServiceInterfacePointServiceInterfacePointById(uuid, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Create create-connectivity-service by ID
     *
     * Create operation of resource: create-connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCreateConnectivityServiceByIdTest() throws ApiException {
        CreateConnectivityServiceRPCInputSchema createConnectivityService = null;
        CreateConnectivityServiceRPCOutputSchema response = api.createCreateConnectivityServiceById(createConnectivityService);

        // TODO: test validations
    }
    
    /**
     * Create delete-connectivity-service by ID
     *
     * Create operation of resource: delete-connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDeleteConnectivityServiceByIdTest() throws ApiException {
        DeleteConnectivityServiceRPCInputSchema deleteConnectivityService = null;
        DeleteConnectivityServiceRPCOutputSchema response = api.createDeleteConnectivityServiceById(deleteConnectivityService);

        // TODO: test validations
    }
    
    /**
     * Create get-connection-details by ID
     *
     * Create operation of resource: get-connection-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetConnectionDetailsByIdTest() throws ApiException {
        GetConnectionDetailsRPCInputSchema getConnectionDetails = null;
        GetConnectionDetailsRPCOutputSchema response = api.createGetConnectionDetailsById(getConnectionDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-connectivity-service-details by ID
     *
     * Create operation of resource: get-connectivity-service-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetConnectivityServiceDetailsByIdTest() throws ApiException {
        GetConnectivityServiceDetailsRPCInputSchema getConnectivityServiceDetails = null;
        GetConnectivityServiceDetailsRPCOutputSchema response = api.createGetConnectivityServiceDetailsById(getConnectivityServiceDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-connectivity-service-list by ID
     *
     * Create operation of resource: get-connectivity-service-list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetConnectivityServiceListByIdTest() throws ApiException {
        GetConnectivityServiceListRPCOutputSchema response = api.createGetConnectivityServiceListById();

        // TODO: test validations
    }
    
    /**
     * Create get-link-details by ID
     *
     * Create operation of resource: get-link-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetLinkDetailsByIdTest() throws ApiException {
        GetLinkDetailsRPCInputSchema getLinkDetails = null;
        GetLinkDetailsRPCOutputSchema response = api.createGetLinkDetailsById(getLinkDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-node-details by ID
     *
     * Create operation of resource: get-node-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetNodeDetailsByIdTest() throws ApiException {
        GetNodeDetailsRPCInputSchema getNodeDetails = null;
        GetNodeDetailsRPCOutputSchema response = api.createGetNodeDetailsById(getNodeDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-node-edge-point-details by ID
     *
     * Create operation of resource: get-node-edge-point-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetNodeEdgePointDetailsByIdTest() throws ApiException {
        GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails = null;
        GetNodeEdgePointDetailsRPCOutputSchema response = api.createGetNodeEdgePointDetailsById(getNodeEdgePointDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-service-interface-point-details by ID
     *
     * Create operation of resource: get-service-interface-point-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetServiceInterfacePointDetailsByIdTest() throws ApiException {
        GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails = null;
        GetServiceInterfacePointDetailsRPCOutputSchema response = api.createGetServiceInterfacePointDetailsById(getServiceInterfacePointDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-service-interface-point-list by ID
     *
     * Create operation of resource: get-service-interface-point-list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetServiceInterfacePointListByIdTest() throws ApiException {
        GetServiceInterfacePointListRPCOutputSchema response = api.createGetServiceInterfacePointListById();

        // TODO: test validations
    }
    
    /**
     * Create get-topology-details by ID
     *
     * Create operation of resource: get-topology-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetTopologyDetailsByIdTest() throws ApiException {
        GetTopologyDetailsRPCInputSchema getTopologyDetails = null;
        GetTopologyDetailsRPCOutputSchema response = api.createGetTopologyDetailsById(getTopologyDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-topology-list by ID
     *
     * Create operation of resource: get-topology-list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetTopologyListByIdTest() throws ApiException {
        GetTopologyListRPCOutputSchema response = api.createGetTopologyListById();

        // TODO: test validations
    }
    
    /**
     * Create update-connectivity-service by ID
     *
     * Create operation of resource: update-connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUpdateConnectivityServiceByIdTest() throws ApiException {
        UpdateConnectivityServiceRPCInputSchema updateConnectivityService = null;
        UpdateConnectivityServiceRPCOutputSchema response = api.createUpdateConnectivityServiceById(updateConnectivityService);

        // TODO: test validations
    }
    
    /**
     * Create update-service-interface-point by ID
     *
     * Create operation of resource: update-service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUpdateServiceInterfacePointByIdTest() throws ApiException {
        UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint = null;
        api.createUpdateServiceInterfacePointById(updateServiceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Delete context by ID
     *
     * Delete operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextByIdTest() throws ApiException {
        api.deleteContextById();

        // TODO: test validations
    }
    
    /**
     * Delete connection-end-point by ID
     *
     * Delete operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectionConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectionConnectionEndPointConnectionEndPointById(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete connectivity-service-end-point by ID
     *
     * Delete operation of resource: connectivity-service-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectionConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        api.deleteContextConnectionConnectionEndPointNameNameById(uuid, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete connection-end-point by ID
     *
     * Delete operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectionRouteConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectionRouteConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete connectivity-service-end-point by ID
     *
     * Delete operation of resource: connectivity-service-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectionRouteConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        api.deleteContextConnectionRouteConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete connectivity-service by ID
     *
     * Delete operation of resource: connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceConnectivityServiceByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityServiceConnectivityServiceById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete coroute-inclusion by ID
     *
     * Delete operation of resource: coroute-inclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceCorouteInclusionCorouteInclusionByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityServiceCorouteInclusionCorouteInclusionById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete cost-characteristic by ID
     *
     * Delete operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        api.deleteContextConnectivityServiceCostCharacteristicCostCharacteristicById(uuid, costName);

        // TODO: test validations
    }
    
    /**
     * Delete diversity-exclusion by ID
     *
     * Delete operation of resource: diversity-exclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceDiversityExclusionDiversityExclusionByIdTest() throws ApiException {
        String uuid = null;
        String connectivityServiceId = null;
        api.deleteContextConnectivityServiceDiversityExclusionDiversityExclusionById(uuid, connectivityServiceId);

        // TODO: test validations
    }
    
    /**
     * Delete bandwidth-profile by ID
     *
     * Delete operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete committed-burst-size by ID
     *
     * Delete operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete committed-information-rate by ID
     *
     * Delete operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete peak-burst-size by ID
     *
     * Delete operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete peak-information-rate by ID
     *
     * Delete operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete capacity by ID
     *
     * Delete operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceEndPointCapacityCapacityByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityServiceEndPointCapacityCapacityById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete total-size by ID
     *
     * Delete operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete end-point by ID
     *
     * Delete operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityServiceEndPointEndPointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        api.deleteContextConnectivityServiceEndPointNameNameById(uuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete service-interface-point by ID
     *
     * Delete operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete include-core by ID
     *
     * Delete operation of resource: include-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceIncludeCoreIncludeCoreByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityServiceIncludeCoreIncludeCoreById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete latency-characteristic by ID
     *
     * Delete operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        api.deleteContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        api.deleteContextConnectivityServiceNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete bandwidth-profile by ID
     *
     * Delete operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete committed-burst-size by ID
     *
     * Delete operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete committed-information-rate by ID
     *
     * Delete operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete peak-burst-size by ID
     *
     * Delete operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete peak-information-rate by ID
     *
     * Delete operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete requested-capacity by ID
     *
     * Delete operation of resource: requested-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceRequestedCapacityRequestedCapacityByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityServiceRequestedCapacityRequestedCapacityById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete total-size by ID
     *
     * Delete operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete resilience-type by ID
     *
     * Delete operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceResilienceTypeResilienceTypeByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityServiceResilienceTypeResilienceTypeById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete schedule by ID
     *
     * Delete operation of resource: schedule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityServiceScheduleScheduleByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityServiceScheduleScheduleById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextNameNameByIdTest() throws ApiException {
        String valueName = null;
        api.deleteContextNameNameById(valueName);

        // TODO: test validations
    }
    
    /**
     * Delete end-point by ID
     *
     * Delete operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathCompServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathCompServiceEndPointEndPointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathCompServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        api.deleteContextPathCompServiceEndPointNameNameById(uuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathCompServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        api.deleteContextPathCompServiceNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathCompServiceObjectiveFunctionNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        api.deleteContextPathCompServiceObjectiveFunctionNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete objective-function by ID
     *
     * Delete operation of resource: objective-function
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextPathCompServiceObjectiveFunctionObjectiveFunctionById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathCompServiceOptimizationConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        api.deleteContextPathCompServiceOptimizationConstraintNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete optimization-constraint by ID
     *
     * Delete operation of resource: optimization-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextPathCompServiceOptimizationConstraintOptimizationConstraintById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete path-comp-service by ID
     *
     * Delete operation of resource: path-comp-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathCompServicePathCompServiceByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextPathCompServicePathCompServiceById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathCompServiceRoutingConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        api.deleteContextPathCompServiceRoutingConstraintNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete routing-constraint by ID
     *
     * Delete operation of resource: routing-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathCompServiceRoutingConstraintRoutingConstraintByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextPathCompServiceRoutingConstraintRoutingConstraintById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        api.deleteContextServiceInterfacePointNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete service-interface-point by ID
     *
     * Delete operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextServiceInterfacePointServiceInterfacePointById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve context
     *
     * Retrieve operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTest() throws ApiException {
        ContextSchema response = api.retrieveContext();

        // TODO: test validations
    }
    
    /**
     * Retrieve connection
     *
     * Retrieve operation of resource: connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionTest() throws ApiException {
        List<String> response = api.retrieveContextConnectionConnection();

        // TODO: test validations
    }
    
    /**
     * Retrieve connection by ID
     *
     * Retrieve operation of resource: connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionByIdTest() throws ApiException {
        String uuid = null;
        Connection response = api.retrieveContextConnectionConnectionById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point by ID
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String topologyIdNodeIdOwnedNodeEdgePointId = null;
        OwnedNodeEdgePointRef response = api.retrieveContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(uuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionEndPointConnectionEndPointTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectionConnectionEndPointConnectionEndPoint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId = null;
        ConnectionEndPointRef response = api.retrieveContextConnectionConnectionEndPointConnectionEndPointById(uuid, topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionEndPointConnectionEndPointById_0Test() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema response = api.retrieveContextConnectionConnectionEndPointConnectionEndPointById_0(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connectivity-service-end-point
     *
     * Retrieve operation of resource: connectivity-service-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        ConnectivityServiceEndPointRef response = api.retrieveContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectionConnectionEndPointNameName(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectionConnectionEndPointNameNameById(uuid, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve parent-node-edge-point
     *
     * Retrieve operation of resource: parent-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve parent-node-edge-point by ID
     *
     * Retrieve operation of resource: parent-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String topologyIdNodeIdOwnedNodeEdgePointId = null;
        OwnedNodeEdgePointRef response = api.retrieveContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(uuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-termination
     *
     * Retrieve operation of resource: sdm-termination
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionEndPointSdmTerminationSdmTerminationTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        SdmTerminationPac response = api.retrieveContextConnectionConnectionEndPointSdmTerminationSdmTermination(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve nominal-central-frequency
     *
     * Retrieve operation of resource: nominal-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String slotId = null;
        NominalCentralFrequencyOrWavelength response = api.retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(uuid, connectionEndPointUuid, slotId);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-frequency-slot
     *
     * Retrieve operation of resource: selected-frequency-slot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-frequency-slot by ID
     *
     * Retrieve operation of resource: selected-frequency-slot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String slotId = null;
        FrequencySlot response = api.retrieveContextConnectionConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(uuid, connectionEndPointUuid, slotId);

        // TODO: test validations
    }
    
    /**
     * Retrieve lower-connection
     *
     * Retrieve operation of resource: lower-connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionLowerConnectionLowerConnectionTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectionLowerConnectionLowerConnection(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve lower-connection by ID
     *
     * Retrieve operation of resource: lower-connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionLowerConnectionLowerConnectionByIdTest() throws ApiException {
        String uuid = null;
        String connectionId = null;
        ConnectionRef response = api.retrieveContextConnectionLowerConnectionLowerConnectionById(uuid, connectionId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectionNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectionNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point by ID
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String topologyIdNodeIdOwnedNodeEdgePointId = null;
        OwnedNodeEdgePointRef response = api.retrieveContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(uuid, localId, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteConnectionEndPointConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectionRouteConnectionEndPointConnectionEndPoint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId = null;
        ConnectionEndPointRef response = api.retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById(uuid, localId, topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById_0Test() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema response = api.retrieveContextConnectionRouteConnectionEndPointConnectionEndPointById_0(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connectivity-service-end-point
     *
     * Retrieve operation of resource: connectivity-service-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectivityServiceEndPointRef response = api.retrieveContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteConnectionEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectionRouteConnectionEndPointNameName(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectionRouteConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve parent-node-edge-point
     *
     * Retrieve operation of resource: parent-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve parent-node-edge-point by ID
     *
     * Retrieve operation of resource: parent-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String topologyIdNodeIdOwnedNodeEdgePointId = null;
        OwnedNodeEdgePointRef response = api.retrieveContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(uuid, localId, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-termination
     *
     * Retrieve operation of resource: sdm-termination
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteConnectionEndPointSdmTerminationSdmTerminationTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SdmTerminationPac response = api.retrieveContextConnectionRouteConnectionEndPointSdmTerminationSdmTermination(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve nominal-central-frequency
     *
     * Retrieve operation of resource: nominal-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String slotId = null;
        NominalCentralFrequencyOrWavelength response = api.retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(uuid, localId, connectionEndPointUuid, slotId);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-frequency-slot
     *
     * Retrieve operation of resource: selected-frequency-slot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-frequency-slot by ID
     *
     * Retrieve operation of resource: selected-frequency-slot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String slotId = null;
        FrequencySlot response = api.retrieveContextConnectionRouteConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(uuid, localId, connectionEndPointUuid, slotId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectionRouteNameName(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectionRouteNameNameById(uuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve route
     *
     * Retrieve operation of resource: route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteRouteTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectionRouteRoute(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve route by ID
     *
     * Retrieve operation of resource: route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionRouteRouteByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Route response = api.retrieveContextConnectionRouteRouteById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionSwitchControlNameNameTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        List<String> response = api.retrieveContextConnectionSwitchControlNameName(uuid, switchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionSwitchControlNameNameByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectionSwitchControlNameNameById(uuid, switchControlUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve resilience-type
     *
     * Retrieve operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionSwitchControlResilienceTypeResilienceTypeTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        ResilienceType response = api.retrieveContextConnectionSwitchControlResilienceTypeResilienceType(uuid, switchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sub-switch-control
     *
     * Retrieve operation of resource: sub-switch-control
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        List<String> response = api.retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControl(uuid, switchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sub-switch-control by ID
     *
     * Retrieve operation of resource: sub-switch-control
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String connectionIdSwitchControlId = null;
        SwitchControlRef response = api.retrieveContextConnectionSwitchControlSubSwitchControlSubSwitchControlById(uuid, switchControlUuid, connectionIdSwitchControlId);

        // TODO: test validations
    }
    
    /**
     * Retrieve switch-control
     *
     * Retrieve operation of resource: switch-control
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionSwitchControlSwitchControlTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectionSwitchControlSwitchControl(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve switch-control by ID
     *
     * Retrieve operation of resource: switch-control
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionSwitchControlSwitchControlByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        SwitchControl response = api.retrieveContextConnectionSwitchControlSwitchControlById(uuid, switchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionSwitchControlSwitchNameNameTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectionSwitchControlSwitchNameName(uuid, switchControlUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionSwitchControlSwitchNameNameByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectionSwitchControlSwitchNameNameById(uuid, switchControlUuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-connection-end-point
     *
     * Retrieve operation of resource: selected-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint(uuid, switchControlUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-connection-end-point by ID
     *
     * Retrieve operation of resource: selected-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        String topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId = null;
        ConnectionEndPointRef response = api.retrieveContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(uuid, switchControlUuid, localId, topologyIdNodeIdOwnedNodeEdgePointIdConnectionEndPointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-route
     *
     * Retrieve operation of resource: selected-route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute(uuid, switchControlUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-route by ID
     *
     * Retrieve operation of resource: selected-route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        String connectionIdRouteId = null;
        RouteRef response = api.retrieveContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(uuid, switchControlUuid, localId, connectionIdRouteId);

        // TODO: test validations
    }
    
    /**
     * Retrieve switch
     *
     * Retrieve operation of resource: switch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionSwitchControlSwitchSwitchTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        List<String> response = api.retrieveContextConnectionSwitchControlSwitchSwitch(uuid, switchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve switch by ID
     *
     * Retrieve operation of resource: switch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectionSwitchControlSwitchSwitchByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        ModelSwitch response = api.retrieveContextConnectionSwitchControlSwitchSwitchById(uuid, switchControlUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve avoid-topology
     *
     * Retrieve operation of resource: avoid-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityServiceAvoidTopologyAvoidTopology(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve avoid-topology by ID
     *
     * Retrieve operation of resource: avoid-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyByIdTest() throws ApiException {
        String uuid = null;
        String topologyId = null;
        TopologyRef response = api.retrieveContextConnectivityServiceAvoidTopologyAvoidTopologyById(uuid, topologyId);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection
     *
     * Retrieve operation of resource: connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceConnectionConnectionTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityServiceConnectionConnection(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection by ID
     *
     * Retrieve operation of resource: connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceConnectionConnectionByIdTest() throws ApiException {
        String uuid = null;
        String connectionId = null;
        ConnectionRef response = api.retrieveContextConnectivityServiceConnectionConnectionById(uuid, connectionId);

        // TODO: test validations
    }
    
    /**
     * Retrieve connectivity-service
     *
     * Retrieve operation of resource: connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceConnectivityServiceTest() throws ApiException {
        List<String> response = api.retrieveContextConnectivityServiceConnectivityService();

        // TODO: test validations
    }
    
    /**
     * Retrieve connectivity-service by ID
     *
     * Retrieve operation of resource: connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceConnectivityServiceByIdTest() throws ApiException {
        String uuid = null;
        ConnectivityServiceSchema response = api.retrieveContextConnectivityServiceConnectivityServiceById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve coroute-inclusion
     *
     * Retrieve operation of resource: coroute-inclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceCorouteInclusionCorouteInclusionTest() throws ApiException {
        String uuid = null;
        ConnectivityServiceRef response = api.retrieveContextConnectivityServiceCorouteInclusionCorouteInclusion(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityServiceCostCharacteristicCostCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextConnectivityServiceCostCharacteristicCostCharacteristicById(uuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve diversity-exclusion
     *
     * Retrieve operation of resource: diversity-exclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityServiceDiversityExclusionDiversityExclusion(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve diversity-exclusion by ID
     *
     * Retrieve operation of resource: diversity-exclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionByIdTest() throws ApiException {
        String uuid = null;
        String connectivityServiceId = null;
        ConnectivityServiceRef response = api.retrieveContextConnectivityServiceDiversityExclusionDiversityExclusionById(uuid, connectivityServiceId);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String localId = null;
        BandwidthProfile response = api.retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfile(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve capacity
     *
     * Retrieve operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceEndPointCapacityCapacityTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Capacity response = api.retrieveContextConnectivityServiceEndPointCapacityCapacity(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextConnectivityServiceEndPointCapacityTotalSizeTotalSize(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve end-point
     *
     * Retrieve operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceEndPointEndPointTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityServiceEndPointEndPoint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve end-point by ID
     *
     * Retrieve operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ConnectivityServiceEndPoint response = api.retrieveContextConnectivityServiceEndPointEndPointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectivityServiceEndPointNameName(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectivityServiceEndPointNameNameById(uuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ServiceInterfacePointRef response = api.retrieveContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePoint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-link
     *
     * Retrieve operation of resource: exclude-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceExcludeLinkExcludeLinkTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityServiceExcludeLinkExcludeLink(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-link by ID
     *
     * Retrieve operation of resource: exclude-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceExcludeLinkExcludeLinkByIdTest() throws ApiException {
        String uuid = null;
        String topologyIdLinkId = null;
        LinkRef response = api.retrieveContextConnectivityServiceExcludeLinkExcludeLinkById(uuid, topologyIdLinkId);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-node
     *
     * Retrieve operation of resource: exclude-node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceExcludeNodeExcludeNodeTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityServiceExcludeNodeExcludeNode(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-node by ID
     *
     * Retrieve operation of resource: exclude-node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceExcludeNodeExcludeNodeByIdTest() throws ApiException {
        String uuid = null;
        String topologyIdNodeId = null;
        NodeRef response = api.retrieveContextConnectivityServiceExcludeNodeExcludeNodeById(uuid, topologyIdNodeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-path
     *
     * Retrieve operation of resource: exclude-path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceExcludePathExcludePathTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityServiceExcludePathExcludePath(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-path by ID
     *
     * Retrieve operation of resource: exclude-path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceExcludePathExcludePathByIdTest() throws ApiException {
        String uuid = null;
        String pathId = null;
        PathRef response = api.retrieveContextConnectivityServiceExcludePathExcludePathById(uuid, pathId);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-core
     *
     * Retrieve operation of resource: include-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceIncludeCoreIncludeCoreTest() throws ApiException {
        String uuid = null;
        SdmTerminationPac response = api.retrieveContextConnectivityServiceIncludeCoreIncludeCore(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve nominal-central-frequency
     *
     * Retrieve operation of resource: nominal-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String slotId = null;
        NominalCentralFrequencyOrWavelength response = api.retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(uuid, slotId);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-frequency-slot
     *
     * Retrieve operation of resource: selected-frequency-slot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlot(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-frequency-slot by ID
     *
     * Retrieve operation of resource: selected-frequency-slot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotByIdTest() throws ApiException {
        String uuid = null;
        String slotId = null;
        FrequencySlot response = api.retrieveContextConnectivityServiceIncludeCoreSelectedFrequencySlotSelectedFrequencySlotById(uuid, slotId);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-link
     *
     * Retrieve operation of resource: include-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceIncludeLinkIncludeLinkTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityServiceIncludeLinkIncludeLink(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-link by ID
     *
     * Retrieve operation of resource: include-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceIncludeLinkIncludeLinkByIdTest() throws ApiException {
        String uuid = null;
        String topologyIdLinkId = null;
        LinkRef response = api.retrieveContextConnectivityServiceIncludeLinkIncludeLinkById(uuid, topologyIdLinkId);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-node
     *
     * Retrieve operation of resource: include-node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceIncludeNodeIncludeNodeTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityServiceIncludeNodeIncludeNode(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-node by ID
     *
     * Retrieve operation of resource: include-node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceIncludeNodeIncludeNodeByIdTest() throws ApiException {
        String uuid = null;
        String topologyIdNodeId = null;
        NodeRef response = api.retrieveContextConnectivityServiceIncludeNodeIncludeNodeById(uuid, topologyIdNodeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-path
     *
     * Retrieve operation of resource: include-path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceIncludePathIncludePathTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityServiceIncludePathIncludePath(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-path by ID
     *
     * Retrieve operation of resource: include-path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceIncludePathIncludePathByIdTest() throws ApiException {
        String uuid = null;
        String pathId = null;
        PathRef response = api.retrieveContextConnectivityServiceIncludePathIncludePathById(uuid, pathId);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-topology
     *
     * Retrieve operation of resource: include-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityServiceIncludeTopologyIncludeTopology(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-topology by ID
     *
     * Retrieve operation of resource: include-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyByIdTest() throws ApiException {
        String uuid = null;
        String topologyId = null;
        TopologyRef response = api.retrieveContextConnectivityServiceIncludeTopologyIncludeTopologyById(uuid, topologyId);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityServiceNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectivityServiceNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        BandwidthProfile response = api.retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfile(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve requested-capacity
     *
     * Retrieve operation of resource: requested-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceRequestedCapacityRequestedCapacityTest() throws ApiException {
        String uuid = null;
        Capacity response = api.retrieveContextConnectivityServiceRequestedCapacityRequestedCapacity(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextConnectivityServiceRequestedCapacityTotalSizeTotalSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve resilience-type
     *
     * Retrieve operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceResilienceTypeResilienceTypeTest() throws ApiException {
        String uuid = null;
        ResilienceType response = api.retrieveContextConnectivityServiceResilienceTypeResilienceType(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve schedule
     *
     * Retrieve operation of resource: schedule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityServiceScheduleScheduleTest() throws ApiException {
        String uuid = null;
        TimeRange response = api.retrieveContextConnectivityServiceScheduleSchedule(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNameNameTest() throws ApiException {
        List<String> response = api.retrieveContextNameName();

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNameNameByIdTest() throws ApiException {
        String valueName = null;
        NameAndValue response = api.retrieveContextNameNameById(valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNwTopologyServiceNameNameTest() throws ApiException {
        List<String> response = api.retrieveContextNwTopologyServiceNameName();

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNwTopologyServiceNameNameByIdTest() throws ApiException {
        String valueName = null;
        NameAndValue response = api.retrieveContextNwTopologyServiceNameNameById(valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve nw-topology-service
     *
     * Retrieve operation of resource: nw-topology-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNwTopologyServiceNwTopologyServiceTest() throws ApiException {
        NetworkTopologyService response = api.retrieveContextNwTopologyServiceNwTopologyService();

        // TODO: test validations
    }
    
    /**
     * Retrieve topology
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNwTopologyServiceTopologyTopologyTest() throws ApiException {
        List<String> response = api.retrieveContextNwTopologyServiceTopologyTopology();

        // TODO: test validations
    }
    
    /**
     * Retrieve topology by ID
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNwTopologyServiceTopologyTopologyByIdTest() throws ApiException {
        String topologyId = null;
        TopologyRef response = api.retrieveContextNwTopologyServiceTopologyTopologyById(topologyId);

        // TODO: test validations
    }
    
    /**
     * Retrieve end-point
     *
     * Retrieve operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceEndPointEndPointTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathCompServiceEndPointEndPoint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve end-point by ID
     *
     * Retrieve operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        PathServiceEndPoint response = api.retrieveContextPathCompServiceEndPointEndPointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextPathCompServiceEndPointNameName(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathCompServiceEndPointNameNameById(uuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ServiceInterfacePointRef response = api.retrieveContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePoint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathCompServiceNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathCompServiceNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceObjectiveFunctionNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathCompServiceObjectiveFunctionNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceObjectiveFunctionNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathCompServiceObjectiveFunctionNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve objective-function
     *
     * Retrieve operation of resource: objective-function
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceObjectiveFunctionObjectiveFunctionTest() throws ApiException {
        String uuid = null;
        PathObjectiveFunction response = api.retrieveContextPathCompServiceObjectiveFunctionObjectiveFunction(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceOptimizationConstraintNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathCompServiceOptimizationConstraintNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceOptimizationConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathCompServiceOptimizationConstraintNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve optimization-constraint
     *
     * Retrieve operation of resource: optimization-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceOptimizationConstraintOptimizationConstraintTest() throws ApiException {
        String uuid = null;
        PathOptimizationConstraint response = api.retrieveContextPathCompServiceOptimizationConstraintOptimizationConstraint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve path-comp-service
     *
     * Retrieve operation of resource: path-comp-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServicePathCompServiceTest() throws ApiException {
        List<String> response = api.retrieveContextPathCompServicePathCompService();

        // TODO: test validations
    }
    
    /**
     * Retrieve path-comp-service by ID
     *
     * Retrieve operation of resource: path-comp-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServicePathCompServiceByIdTest() throws ApiException {
        String uuid = null;
        PathComputationService response = api.retrieveContextPathCompServicePathCompServiceById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve path
     *
     * Retrieve operation of resource: path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServicePathPathTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathCompServicePathPath(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve path by ID
     *
     * Retrieve operation of resource: path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServicePathPathByIdTest() throws ApiException {
        String uuid = null;
        String pathId = null;
        PathRef response = api.retrieveContextPathCompServicePathPathById(uuid, pathId);

        // TODO: test validations
    }
    
    /**
     * Retrieve avoid-topology
     *
     * Retrieve operation of resource: avoid-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopology(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve avoid-topology by ID
     *
     * Retrieve operation of resource: avoid-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyByIdTest() throws ApiException {
        String uuid = null;
        String topologyId = null;
        TopologyRef response = api.retrieveContextPathCompServiceRoutingConstraintAvoidTopologyAvoidTopologyById(uuid, topologyId);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(uuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-topology
     *
     * Retrieve operation of resource: include-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopology(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-topology by ID
     *
     * Retrieve operation of resource: include-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyByIdTest() throws ApiException {
        String uuid = null;
        String topologyId = null;
        TopologyRef response = api.retrieveContextPathCompServiceRoutingConstraintIncludeTopologyIncludeTopologyById(uuid, topologyId);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathCompServiceRoutingConstraintNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathCompServiceRoutingConstraintNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        BandwidthProfile response = api.retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfile(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextPathCompServiceRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve requested-capacity
     *
     * Retrieve operation of resource: requested-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintRequestedCapacityRequestedCapacityTest() throws ApiException {
        String uuid = null;
        Capacity response = api.retrieveContextPathCompServiceRoutingConstraintRequestedCapacityRequestedCapacity(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintRequestedCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextPathCompServiceRoutingConstraintRequestedCapacityTotalSizeTotalSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve routing-constraint
     *
     * Retrieve operation of resource: routing-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathCompServiceRoutingConstraintRoutingConstraintTest() throws ApiException {
        String uuid = null;
        RoutingConstraint response = api.retrieveContextPathCompServiceRoutingConstraintRoutingConstraint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve link
     *
     * Retrieve operation of resource: link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathLinkLinkTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathLinkLink(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve link by ID
     *
     * Retrieve operation of resource: link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathLinkLinkByIdTest() throws ApiException {
        String uuid = null;
        String topologyIdLinkId = null;
        LinkRef response = api.retrieveContextPathLinkLinkById(uuid, topologyIdLinkId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve path
     *
     * Retrieve operation of resource: path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathPathTest() throws ApiException {
        List<String> response = api.retrieveContextPathPath();

        // TODO: test validations
    }
    
    /**
     * Retrieve path by ID
     *
     * Retrieve operation of resource: path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathPathByIdTest() throws ApiException {
        String uuid = null;
        Path response = api.retrieveContextPathPathById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve avoid-topology
     *
     * Retrieve operation of resource: avoid-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopology(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve avoid-topology by ID
     *
     * Retrieve operation of resource: avoid-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyByIdTest() throws ApiException {
        String uuid = null;
        String topologyId = null;
        TopologyRef response = api.retrieveContextPathRoutingConstraintAvoidTopologyAvoidTopologyById(uuid, topologyId);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextPathRoutingConstraintCostCharacteristicCostCharacteristicById(uuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-topology
     *
     * Retrieve operation of resource: include-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopology(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-topology by ID
     *
     * Retrieve operation of resource: include-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyByIdTest() throws ApiException {
        String uuid = null;
        String topologyId = null;
        TopologyRef response = api.retrieveContextPathRoutingConstraintIncludeTopologyIncludeTopologyById(uuid, topologyId);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathRoutingConstraintNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathRoutingConstraintNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        BandwidthProfile response = api.retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileBandwidthProfile(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextPathRoutingConstraintRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve requested-capacity
     *
     * Retrieve operation of resource: requested-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintRequestedCapacityRequestedCapacityTest() throws ApiException {
        String uuid = null;
        Capacity response = api.retrieveContextPathRoutingConstraintRequestedCapacityRequestedCapacity(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintRequestedCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextPathRoutingConstraintRequestedCapacityTotalSizeTotalSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve routing-constraint
     *
     * Retrieve operation of resource: routing-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathRoutingConstraintRoutingConstraintTest() throws ApiException {
        String uuid = null;
        RoutingConstraint response = api.retrieveContextPathRoutingConstraintRoutingConstraint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        Capacity response = api.retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacity(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        BandwidthProfile response = api.retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextServiceInterfacePointNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextServiceInterfacePointNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointServiceInterfacePointTest() throws ApiException {
        List<String> response = api.retrieveContextServiceInterfacePointServiceInterfacePoint();

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point by ID
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        ServiceInterfacePoint response = api.retrieveContextServiceInterfacePointServiceInterfacePointById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        BandwidthProfile response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        Capacity response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        Capacity response = api.retrieveContextTopologyLinkAvailableCapacityAvailableCapacity(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkAvailableCapacityTotalSizeTotalSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyLinkCostCharacteristicCostCharacteristic(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextTopologyLinkCostCharacteristicCostCharacteristicById(uuid, linkUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristic(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(uuid, linkUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve link
     *
     * Retrieve operation of resource: link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkLinkTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextTopologyLinkLink(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve link by ID
     *
     * Retrieve operation of resource: link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkLinkByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        Link response = api.retrieveContextTopologyLinkLinkById(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkNameNameTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyLinkNameName(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkNameNameByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyLinkNameNameById(uuid, linkUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkNodeEdgePointNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyLinkNodeEdgePointNodeEdgePoint(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point by ID
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkNodeEdgePointNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String topologyIdNodeIdOwnedNodeEdgePointId = null;
        OwnedNodeEdgePointRef response = api.retrieveContextTopologyLinkNodeEdgePointNodeEdgePointById(uuid, linkUuid, topologyIdNodeIdOwnedNodeEdgePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve resilience-type
     *
     * Retrieve operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkResilienceTypeResilienceTypeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        ResilienceType response = api.retrieveContextTopologyLinkResilienceTypeResilienceType(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristic(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic by ID
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic response = api.retrieveContextTopologyLinkRiskCharacteristicRiskCharacteristicById(uuid, linkUuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        Capacity response = api.retrieveContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve validation-mechanism
     *
     * Retrieve operation of resource: validation-mechanism
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkValidationMechanismValidationMechanismTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyLinkValidationMechanismValidationMechanism(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve validation-mechanism by ID
     *
     * Retrieve operation of resource: validation-mechanism
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyLinkValidationMechanismValidationMechanismByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String validationMechanism = null;
        ValidationMechanism response = api.retrieveContextTopologyLinkValidationMechanismValidationMechanismById(uuid, linkUuid, validationMechanism);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextTopologyNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point by ID
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String topologyIdNodeIdOwnedNodeEdgePointId = null;
        OwnedNodeEdgePointRef response = api.retrieveContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(uuid, nodeUuid, topologyIdNodeIdOwnedNodeEdgePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        Capacity response = api.retrieveContextTopologyNodeAvailableCapacityAvailableCapacity(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyNodeCostCharacteristicCostCharacteristic(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextTopologyNodeCostCharacteristicCostCharacteristicById(uuid, nodeUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve encap-topology
     *
     * Retrieve operation of resource: encap-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeEncapTopologyEncapTopologyTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        TopologyRef response = api.retrieveContextTopologyNodeEncapTopologyEncapTopology(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristic(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(uuid, nodeUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNameName(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyNodeNameNameById(uuid, nodeUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve node
     *
     * Retrieve operation of resource: node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextTopologyNodeNode(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node by ID
     *
     * Retrieve operation of resource: node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        Node response = api.retrieveContextTopologyNodeNodeById(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        Capacity response = api.retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve composed-rule-group
     *
     * Retrieve operation of resource: composed-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve composed-rule-group by ID
     *
     * Retrieve operation of resource: composed-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String topologyIdNodeIdNodeRuleGroupId = null;
        NodeRuleGroupRef response = api.retrieveContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve associated-node-rule-group
     *
     * Retrieve operation of resource: associated-node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve associated-node-rule-group by ID
     *
     * Retrieve operation of resource: associated-node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String topologyIdNodeIdNodeRuleGroupId = null;
        NodeRuleGroupRef response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyIdNodeIdNodeRuleGroupId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        Capacity response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve inter-rule-group
     *
     * Retrieve operation of resource: inter-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve inter-rule-group by ID
     *
     * Retrieve operation of resource: inter-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        InterRuleGroup response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic by ID
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String localId = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule by ID
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String localId = null;
        Rule response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        Capacity response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupNameName(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyNodeNodeRuleGroupNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point by ID
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String topologyIdNodeIdOwnedNodeEdgePointId = null;
        OwnedNodeEdgePointRef response = api.retrieveContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(uuid, nodeUuid, nodeRuleGroupUuid, topologyIdNodeIdOwnedNodeEdgePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-rule-group
     *
     * Retrieve operation of resource: node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroup(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-rule-group by ID
     *
     * Retrieve operation of resource: node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        NodeRuleGroup response = api.retrieveContextTopologyNodeNodeRuleGroupNodeRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic by ID
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic response = api.retrieveContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupRuleNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String localId = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupRuleNameName(uuid, nodeUuid, nodeRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupRuleNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyNodeNodeRuleGroupRuleNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupRuleRuleTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyNodeNodeRuleGroupRuleRule(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule by ID
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupRuleRuleByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String localId = null;
        Rule response = api.retrieveContextTopologyNodeNodeRuleGroupRuleRuleById(uuid, nodeUuid, nodeRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        Capacity response = api.retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point by ID
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String topologyIdNodeIdOwnedNodeEdgePointId = null;
        OwnedNodeEdgePointRef response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyIdNodeIdOwnedNodeEdgePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        Capacity response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point by ID
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        String topologyIdNodeIdOwnedNodeEdgePointId = null;
        OwnedNodeEdgePointRef response = api.retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPoint(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema response = api.retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectionEndPointById(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connectivity-service-end-point
     *
     * Retrieve operation of resource: connectivity-service-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        ConnectivityServiceEndPointRef response = api.retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPoint(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameName(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointNameNameById(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve parent-node-edge-point
     *
     * Retrieve operation of resource: parent-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve parent-node-edge-point by ID
     *
     * Retrieve operation of resource: parent-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        String topologyIdNodeIdOwnedNodeEdgePointId = null;
        OwnedNodeEdgePointRef response = api.retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointParentNodeEdgePointParentNodeEdgePointById(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyIdNodeIdOwnedNodeEdgePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-termination
     *
     * Retrieve operation of resource: sdm-termination
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTerminationTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        SdmTerminationPac response = api.retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSdmTermination(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve nominal-central-frequency
     *
     * Retrieve operation of resource: nominal-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        String slotId = null;
        NominalCentralFrequencyOrWavelength response = api.retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, slotId);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-frequency-slot
     *
     * Retrieve operation of resource: selected-frequency-slot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlot(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-frequency-slot by ID
     *
     * Retrieve operation of resource: selected-frequency-slot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        String slotId = null;
        FrequencySlot response = api.retrieveContextTopologyNodeOwnedNodeEdgePointConnectionEndPointSdmTerminationSelectedFrequencySlotSelectedFrequencySlotById(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, slotId);

        // TODO: test validations
    }
    
    /**
     * Retrieve mapped-service-interface-point
     *
     * Retrieve operation of resource: mapped-service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve mapped-service-interface-point by ID
     *
     * Retrieve operation of resource: mapped-service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String serviceInterfacePointId = null;
        ServiceInterfacePointRef response = api.retrieveContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointNameName(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointNameNameById(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve owned-node-edge-point
     *
     * Retrieve operation of resource: owned-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve owned-node-edge-point by ID
     *
     * Retrieve operation of resource: owned-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        OwnedNodeEdgePointSchema response = api.retrieveContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-core
     *
     * Retrieve operation of resource: available-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCore(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-core by ID
     *
     * Retrieve operation of resource: available-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        CoreSlot response = api.retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableCoreById(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-frequency-slot
     *
     * Retrieve operation of resource: available-frequency-slot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlot(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-frequency-slot by ID
     *
     * Retrieve operation of resource: available-frequency-slot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        String slotId = null;
        FrequencySlot response = api.retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotAvailableFrequencySlotById(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId);

        // TODO: test validations
    }
    
    /**
     * Retrieve nominal-central-frequency
     *
     * Retrieve operation of resource: nominal-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        String slotId = null;
        NominalCentralFrequencyOrWavelength response = api.retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreAvailableFrequencySlotNominalCentralFrequencyNominalCentralFrequency(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId);

        // TODO: test validations
    }
    
    /**
     * Retrieve nominal-central-frequency
     *
     * Retrieve operation of resource: nominal-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        String slotId = null;
        NominalCentralFrequencyOrWavelength response = api.retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotNominalCentralFrequencyNominalCentralFrequency(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-frequency-slot
     *
     * Retrieve operation of resource: occupied-frequency-slot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        List<String> response = api.retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlot(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-frequency-slot by ID
     *
     * Retrieve operation of resource: occupied-frequency-slot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        String slotId = null;
        FrequencySlot response = api.retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableCoreOccupiedFrequencySlotOccupiedFrequencySlotById(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, slotId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-transceiver
     *
     * Retrieve operation of resource: available-transceiver
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverAvailableTransceiverTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        AvailableTransceiver response = api.retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverAvailableTransceiver(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supported-bandwidth
     *
     * Retrieve operation of resource: supported-bandwidth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidthTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        SupportedBandwidthSchema response = api.retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidth(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supported-center-frequency-range
     *
     * Retrieve operation of resource: supported-center-frequency-range
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedCenterFrequencyRangeSupportedCenterFrequencyRangeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        SupportedCenterFrequencyRangeSchema response = api.retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedCenterFrequencyRangeSupportedCenterFrequencyRange(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supported-modulation-format
     *
     * Retrieve operation of resource: supported-modulation-format
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedModulationFormatSupportedModulationFormatTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        SupportedModulationFormatSchema response = api.retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolAvailableTransceiverSupportedModulationFormatSupportedModulationFormat(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-pool
     *
     * Retrieve operation of resource: sdm-pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolSdmPoolTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        SdmPoolPac response = api.retrieveContextTopologyNodeOwnedNodeEdgePointSdmPoolSdmPool(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        Capacity response = api.retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        Capacity response = api.retrieveContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve topology
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyTopologyTest() throws ApiException {
        List<String> response = api.retrieveContextTopologyTopology();

        // TODO: test validations
    }
    
    /**
     * Retrieve topology by ID
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyTopologyByIdTest() throws ApiException {
        String uuid = null;
        Topology response = api.retrieveContextTopologyTopologyById(uuid);

        // TODO: test validations
    }
    
    /**
     * Update context by ID
     *
     * Update operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextByIdTest() throws ApiException {
        ContextSchema context = null;
        api.updateContextById(context);

        // TODO: test validations
    }
    
    /**
     * Update connection-end-point by ID
     *
     * Update operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectionConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        api.updateContextConnectionConnectionEndPointConnectionEndPointById(uuid, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Update connectivity-service-end-point by ID
     *
     * Update operation of resource: connectivity-service-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        ConnectivityServiceEndPointRef connectivityServiceEndPoint = null;
        api.updateContextConnectionConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(uuid, connectionEndPointUuid, connectivityServiceEndPoint);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectionConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextConnectionConnectionEndPointNameNameById(uuid, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update connection-end-point by ID
     *
     * Update operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectionRouteConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        api.updateContextConnectionRouteConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Update connectivity-service-end-point by ID
     *
     * Update operation of resource: connectivity-service-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectivityServiceEndPointRef connectivityServiceEndPoint = null;
        api.updateContextConnectionRouteConnectionEndPointConnectivityServiceEndPointConnectivityServiceEndPointById(uuid, localId, connectionEndPointUuid, connectivityServiceEndPoint);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectionRouteConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextConnectionRouteConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update connectivity-service by ID
     *
     * Update operation of resource: connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceConnectivityServiceByIdTest() throws ApiException {
        String uuid = null;
        ConnectivityServiceSchema connectivityService = null;
        api.updateContextConnectivityServiceConnectivityServiceById(uuid, connectivityService);

        // TODO: test validations
    }
    
    /**
     * Update coroute-inclusion by ID
     *
     * Update operation of resource: coroute-inclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceCorouteInclusionCorouteInclusionByIdTest() throws ApiException {
        String uuid = null;
        ConnectivityServiceRef corouteInclusion = null;
        api.updateContextConnectivityServiceCorouteInclusionCorouteInclusionById(uuid, corouteInclusion);

        // TODO: test validations
    }
    
    /**
     * Update cost-characteristic by ID
     *
     * Update operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic costCharacteristic = null;
        api.updateContextConnectivityServiceCostCharacteristicCostCharacteristicById(uuid, costName, costCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Update diversity-exclusion by ID
     *
     * Update operation of resource: diversity-exclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceDiversityExclusionDiversityExclusionByIdTest() throws ApiException {
        String uuid = null;
        String connectivityServiceId = null;
        ConnectivityServiceRef diversityExclusion = null;
        api.updateContextConnectivityServiceDiversityExclusionDiversityExclusionById(uuid, connectivityServiceId, diversityExclusion);

        // TODO: test validations
    }
    
    /**
     * Update bandwidth-profile by ID
     *
     * Update operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        BandwidthProfile bandwidthProfile = null;
        api.updateContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(uuid, localId, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Update committed-burst-size by ID
     *
     * Update operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedBurstSize = null;
        api.updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, localId, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update committed-information-rate by ID
     *
     * Update operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedInformationRate = null;
        api.updateContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, localId, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update peak-burst-size by ID
     *
     * Update operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakBurstSize = null;
        api.updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, localId, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update peak-information-rate by ID
     *
     * Update operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakInformationRate = null;
        api.updateContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, localId, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update capacity by ID
     *
     * Update operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceEndPointCapacityCapacityByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Capacity capacity = null;
        api.updateContextConnectivityServiceEndPointCapacityCapacityById(uuid, localId, capacity);

        // TODO: test validations
    }
    
    /**
     * Update total-size by ID
     *
     * Update operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue totalSize = null;
        api.updateContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(uuid, localId, totalSize);

        // TODO: test validations
    }
    
    /**
     * Update end-point by ID
     *
     * Update operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ConnectivityServiceEndPoint endPoint = null;
        api.updateContextConnectivityServiceEndPointEndPointById(uuid, localId, endPoint);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextConnectivityServiceEndPointNameNameById(uuid, localId, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update service-interface-point by ID
     *
     * Update operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ServiceInterfacePointRef serviceInterfacePoint = null;
        api.updateContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Update include-core by ID
     *
     * Update operation of resource: include-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceIncludeCoreIncludeCoreByIdTest() throws ApiException {
        String uuid = null;
        SdmTerminationPac includeCore = null;
        api.updateContextConnectivityServiceIncludeCoreIncludeCoreById(uuid, includeCore);

        // TODO: test validations
    }
    
    /**
     * Update latency-characteristic by ID
     *
     * Update operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic latencyCharacteristic = null;
        api.updateContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName, latencyCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextConnectivityServiceNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update bandwidth-profile by ID
     *
     * Update operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        BandwidthProfile bandwidthProfile = null;
        api.updateContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(uuid, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Update committed-burst-size by ID
     *
     * Update operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue committedBurstSize = null;
        api.updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update committed-information-rate by ID
     *
     * Update operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue committedInformationRate = null;
        api.updateContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update peak-burst-size by ID
     *
     * Update operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue peakBurstSize = null;
        api.updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update peak-information-rate by ID
     *
     * Update operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue peakInformationRate = null;
        api.updateContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update requested-capacity by ID
     *
     * Update operation of resource: requested-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceRequestedCapacityRequestedCapacityByIdTest() throws ApiException {
        String uuid = null;
        Capacity requestedCapacity = null;
        api.updateContextConnectivityServiceRequestedCapacityRequestedCapacityById(uuid, requestedCapacity);

        // TODO: test validations
    }
    
    /**
     * Update total-size by ID
     *
     * Update operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue totalSize = null;
        api.updateContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(uuid, totalSize);

        // TODO: test validations
    }
    
    /**
     * Update resilience-type by ID
     *
     * Update operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceResilienceTypeResilienceTypeByIdTest() throws ApiException {
        String uuid = null;
        ResilienceType resilienceType = null;
        api.updateContextConnectivityServiceResilienceTypeResilienceTypeById(uuid, resilienceType);

        // TODO: test validations
    }
    
    /**
     * Update schedule by ID
     *
     * Update operation of resource: schedule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityServiceScheduleScheduleByIdTest() throws ApiException {
        String uuid = null;
        TimeRange schedule = null;
        api.updateContextConnectivityServiceScheduleScheduleById(uuid, schedule);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextNameNameByIdTest() throws ApiException {
        String valueName = null;
        NameAndValue name = null;
        api.updateContextNameNameById(valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update end-point by ID
     *
     * Update operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathCompServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        PathServiceEndPoint endPoint = null;
        api.updateContextPathCompServiceEndPointEndPointById(uuid, localId, endPoint);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathCompServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathCompServiceEndPointNameNameById(uuid, localId, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathCompServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathCompServiceNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathCompServiceObjectiveFunctionNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathCompServiceObjectiveFunctionNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update objective-function by ID
     *
     * Update operation of resource: objective-function
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdTest() throws ApiException {
        String uuid = null;
        PathObjectiveFunction objectiveFunction = null;
        api.updateContextPathCompServiceObjectiveFunctionObjectiveFunctionById(uuid, objectiveFunction);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathCompServiceOptimizationConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathCompServiceOptimizationConstraintNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update optimization-constraint by ID
     *
     * Update operation of resource: optimization-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdTest() throws ApiException {
        String uuid = null;
        PathOptimizationConstraint optimizationConstraint = null;
        api.updateContextPathCompServiceOptimizationConstraintOptimizationConstraintById(uuid, optimizationConstraint);

        // TODO: test validations
    }
    
    /**
     * Update path-comp-service by ID
     *
     * Update operation of resource: path-comp-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathCompServicePathCompServiceByIdTest() throws ApiException {
        String uuid = null;
        PathComputationService pathCompService = null;
        api.updateContextPathCompServicePathCompServiceById(uuid, pathCompService);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathCompServiceRoutingConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathCompServiceRoutingConstraintNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update routing-constraint by ID
     *
     * Update operation of resource: routing-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathCompServiceRoutingConstraintRoutingConstraintByIdTest() throws ApiException {
        String uuid = null;
        RoutingConstraint routingConstraint = null;
        api.updateContextPathCompServiceRoutingConstraintRoutingConstraintById(uuid, routingConstraint);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextServiceInterfacePointNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update service-interface-point by ID
     *
     * Update operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        ServiceInterfacePoint serviceInterfacePoint = null;
        api.updateContextServiceInterfacePointServiceInterfacePointById(uuid, serviceInterfacePoint);

        // TODO: test validations
    }
    
}
