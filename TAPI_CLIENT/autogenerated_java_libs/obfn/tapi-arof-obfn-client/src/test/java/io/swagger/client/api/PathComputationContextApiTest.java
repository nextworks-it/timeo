/*
 * tapi-arof API
 * tapi-arof API generated from tapi-arof.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ArofPoolSchema;
import io.swagger.client.model.ArofServiceInterfacePointSpec;
import io.swagger.client.model.BandwidthProfile;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.CapacityValue;
import io.swagger.client.model.CostCharacteristic;
import io.swagger.client.model.LatencyCharacteristic;
import io.swagger.client.model.LinkRef;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.NodeRef;
import io.swagger.client.model.Path;
import io.swagger.client.model.PathComputationContext;
import io.swagger.client.model.PathComputationService;
import io.swagger.client.model.PathObjectiveFunction;
import io.swagger.client.model.PathOptimizationConstraint;
import io.swagger.client.model.PathRef;
import io.swagger.client.model.PathServiceEndPoint;
import io.swagger.client.model.RiskCharacteristic;
import io.swagger.client.model.RoutingConstraint;
import io.swagger.client.model.ServiceInterfacePointRef;
import io.swagger.client.model.ServiceInterfacePointSchema;
import io.swagger.client.model.TopologyConstraint;
import io.swagger.client.model.TopologyRef;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PathComputationContextApi
 */
@Ignore
public class PathComputationContextApiTest {

    private final PathComputationContextApi api = new PathComputationContextApi();

    
    /**
     * Create bandwidth-profile by ID
     *
     * Create operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        BandwidthProfile bandwidthProfile = null;
        api.createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(uuid, localId, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Create committed-burst-size by ID
     *
     * Create operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedBurstSize = null;
        api.createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, localId, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create committed-information-rate by ID
     *
     * Create operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedInformationRate = null;
        api.createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, localId, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create peak-burst-size by ID
     *
     * Create operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakBurstSize = null;
        api.createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, localId, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create peak-information-rate by ID
     *
     * Create operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakInformationRate = null;
        api.createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, localId, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create capacity by ID
     *
     * Create operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Capacity capacity = null;
        api.createContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(uuid, localId, capacity);

        // TODO: test validations
    }
    
    /**
     * Create total-size by ID
     *
     * Create operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue totalSize = null;
        api.createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(uuid, localId, totalSize);

        // TODO: test validations
    }
    
    /**
     * Create end-point by ID
     *
     * Create operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        PathServiceEndPoint endPoint = null;
        api.createContextPathComputationContextPathCompServiceEndPointEndPointById(uuid, localId, endPoint);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathComputationContextPathCompServiceEndPointNameNameById(uuid, localId, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create arof-service-interface-point-spec by ID
     *
     * Create operation of resource: arof-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ArofServiceInterfacePointSpec arofServiceInterfacePointSpec = null;
        api.createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create service-interface-point by ID
     *
     * Create operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ServiceInterfacePointSchema serviceInterfacePoint = null;
        api.createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathComputationContextPathCompServiceNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create objective-function by ID
     *
     * Create operation of resource: objective-function
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdTest() throws ApiException {
        String uuid = null;
        PathObjectiveFunction objectiveFunction = null;
        api.createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById(uuid, objectiveFunction);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create optimization-constraint by ID
     *
     * Create operation of resource: optimization-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdTest() throws ApiException {
        String uuid = null;
        PathOptimizationConstraint optimizationConstraint = null;
        api.createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById(uuid, optimizationConstraint);

        // TODO: test validations
    }
    
    /**
     * Create path-comp-service by ID
     *
     * Create operation of resource: path-comp-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServicePathCompServiceByIdTest() throws ApiException {
        String uuid = null;
        PathComputationService pathCompService = null;
        api.createContextPathComputationContextPathCompServicePathCompServiceById(uuid, pathCompService);

        // TODO: test validations
    }
    
    /**
     * Create cost-characteristic by ID
     *
     * Create operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic costCharacteristic = null;
        api.createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(uuid, costName, costCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Create latency-characteristic by ID
     *
     * Create operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic latencyCharacteristic = null;
        api.createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName, latencyCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Create risk-diversity-characteristic by ID
     *
     * Create operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic riskDiversityCharacteristic = null;
        api.createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName, riskDiversityCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Create routing-constraint by ID
     *
     * Create operation of resource: routing-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdTest() throws ApiException {
        String uuid = null;
        RoutingConstraint routingConstraint = null;
        api.createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById(uuid, routingConstraint);

        // TODO: test validations
    }
    
    /**
     * Create topology-constraint by ID
     *
     * Create operation of resource: topology-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdTest() throws ApiException {
        String uuid = null;
        TopologyConstraint topologyConstraint = null;
        api.createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById(uuid, topologyConstraint);

        // TODO: test validations
    }
    
    /**
     * Create path-computation-context by ID
     *
     * Create operation of resource: path-computation-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathComputationContextByIdTest() throws ApiException {
        PathComputationContext pathComputationContext = null;
        api.createContextPathComputationContextPathComputationContextById(pathComputationContext);

        // TODO: test validations
    }
    
    /**
     * Delete bandwidth-profile by ID
     *
     * Delete operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete committed-burst-size by ID
     *
     * Delete operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete committed-information-rate by ID
     *
     * Delete operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete peak-burst-size by ID
     *
     * Delete operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete peak-information-rate by ID
     *
     * Delete operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete capacity by ID
     *
     * Delete operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete total-size by ID
     *
     * Delete operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete end-point by ID
     *
     * Delete operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointEndPointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointNameNameById(uuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete arof-service-interface-point-spec by ID
     *
     * Delete operation of resource: arof-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete service-interface-point by ID
     *
     * Delete operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        api.deleteContextPathComputationContextPathCompServiceNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        api.deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete objective-function by ID
     *
     * Delete operation of resource: objective-function
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        api.deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete optimization-constraint by ID
     *
     * Delete operation of resource: optimization-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete path-comp-service by ID
     *
     * Delete operation of resource: path-comp-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServicePathCompServiceByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextPathComputationContextPathCompServicePathCompServiceById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete cost-characteristic by ID
     *
     * Delete operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        api.deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(uuid, costName);

        // TODO: test validations
    }
    
    /**
     * Delete latency-characteristic by ID
     *
     * Delete operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        api.deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Delete risk-diversity-characteristic by ID
     *
     * Delete operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        api.deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Delete routing-constraint by ID
     *
     * Delete operation of resource: routing-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete topology-constraint by ID
     *
     * Delete operation of resource: topology-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete path-computation-context by ID
     *
     * Delete operation of resource: path-computation-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathComputationContextByIdTest() throws ApiException {
        api.deleteContextPathComputationContextPathComputationContextById();

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String localId = null;
        BandwidthProfile response = api.retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfile(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve capacity
     *
     * Retrieve operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacityTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Capacity response = api.retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacity(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSize(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve end-point
     *
     * Retrieve operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointEndPointTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointEndPoint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve end-point by ID
     *
     * Retrieve operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        PathServiceEndPoint response = api.retrieveContextPathComputationContextPathCompServiceEndPointEndPointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointNameName(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointNameNameById(uuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve arof-pool
     *
     * Retrieve operation of resource: arof-pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ArofPoolSchema response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPool(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve arof-service-interface-point-spec
     *
     * Retrieve operation of resource: arof-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ArofServiceInterfacePointSpec response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpec(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        Capacity response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacity(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        BandwidthProfile response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameName(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ServiceInterfacePointRef response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePoint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point by ID
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ServiceInterfacePointSchema response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        BandwidthProfile response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        Capacity response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathComputationContextPathCompServiceNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve objective-function
     *
     * Retrieve operation of resource: objective-function
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionTest() throws ApiException {
        String uuid = null;
        PathObjectiveFunction response = api.retrieveContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunction(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve optimization-constraint
     *
     * Retrieve operation of resource: optimization-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintTest() throws ApiException {
        String uuid = null;
        PathOptimizationConstraint response = api.retrieveContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve path-comp-service
     *
     * Retrieve operation of resource: path-comp-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServicePathCompServiceTest() throws ApiException {
        List<String> response = api.retrieveContextPathComputationContextPathCompServicePathCompService();

        // TODO: test validations
    }
    
    /**
     * Retrieve path-comp-service by ID
     *
     * Retrieve operation of resource: path-comp-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServicePathCompServiceByIdTest() throws ApiException {
        String uuid = null;
        PathComputationService response = api.retrieveContextPathComputationContextPathCompServicePathCompServiceById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve path
     *
     * Retrieve operation of resource: path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServicePathPathTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServicePathPath(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve path by ID
     *
     * Retrieve operation of resource: path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServicePathPathByIdTest() throws ApiException {
        String uuid = null;
        String pathUuid = null;
        PathRef response = api.retrieveContextPathComputationContextPathCompServicePathPathById(uuid, pathUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(uuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-diversity-characteristic
     *
     * Retrieve operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-diversity-characteristic by ID
     *
     * Retrieve operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic response = api.retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve routing-constraint
     *
     * Retrieve operation of resource: routing-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintTest() throws ApiException {
        String uuid = null;
        RoutingConstraint response = api.retrieveContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve avoid-topology
     *
     * Retrieve operation of resource: avoid-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopology(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve avoid-topology by ID
     *
     * Retrieve operation of resource: avoid-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuid = null;
        TopologyRef response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyById(uuid, topologyUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-link
     *
     * Retrieve operation of resource: exclude-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLink(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-link by ID
     *
     * Retrieve operation of resource: exclude-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuidLinkUuid = null;
        LinkRef response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkById(uuid, topologyUuidLinkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-node
     *
     * Retrieve operation of resource: exclude-node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNode(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-node by ID
     *
     * Retrieve operation of resource: exclude-node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuidNodeUuid = null;
        NodeRef response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeById(uuid, topologyUuidNodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-path
     *
     * Retrieve operation of resource: exclude-path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePath(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-path by ID
     *
     * Retrieve operation of resource: exclude-path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathByIdTest() throws ApiException {
        String uuid = null;
        String pathUuid = null;
        PathRef response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathById(uuid, pathUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-link
     *
     * Retrieve operation of resource: include-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLink(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-link by ID
     *
     * Retrieve operation of resource: include-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuidLinkUuid = null;
        LinkRef response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkById(uuid, topologyUuidLinkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-node
     *
     * Retrieve operation of resource: include-node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNode(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-node by ID
     *
     * Retrieve operation of resource: include-node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuidNodeUuid = null;
        NodeRef response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeById(uuid, topologyUuidNodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-path
     *
     * Retrieve operation of resource: include-path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePath(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-path by ID
     *
     * Retrieve operation of resource: include-path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathByIdTest() throws ApiException {
        String uuid = null;
        String pathUuid = null;
        PathRef response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathById(uuid, pathUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-topology
     *
     * Retrieve operation of resource: include-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopology(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-topology by ID
     *
     * Retrieve operation of resource: include-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuid = null;
        TopologyRef response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyById(uuid, topologyUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve topology-constraint
     *
     * Retrieve operation of resource: topology-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintTest() throws ApiException {
        String uuid = null;
        TopologyConstraint response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve path-computation-context
     *
     * Retrieve operation of resource: path-computation-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathComputationContextTest() throws ApiException {
        PathComputationContext response = api.retrieveContextPathComputationContextPathComputationContext();

        // TODO: test validations
    }
    
    /**
     * Retrieve link
     *
     * Retrieve operation of resource: link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathLinkLinkTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathLinkLink(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve link by ID
     *
     * Retrieve operation of resource: link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathLinkLinkByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuidLinkUuid = null;
        LinkRef response = api.retrieveContextPathComputationContextPathLinkLinkById(uuid, topologyUuidLinkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathComputationContextPathNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve path
     *
     * Retrieve operation of resource: path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathPathTest() throws ApiException {
        List<String> response = api.retrieveContextPathComputationContextPathPath();

        // TODO: test validations
    }
    
    /**
     * Retrieve path by ID
     *
     * Retrieve operation of resource: path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathPathByIdTest() throws ApiException {
        String uuid = null;
        Path response = api.retrieveContextPathComputationContextPathPathById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicById(uuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-diversity-characteristic
     *
     * Retrieve operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-diversity-characteristic by ID
     *
     * Retrieve operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic response = api.retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve routing-constraint
     *
     * Retrieve operation of resource: routing-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathRoutingConstraintRoutingConstraintTest() throws ApiException {
        String uuid = null;
        RoutingConstraint response = api.retrieveContextPathComputationContextPathRoutingConstraintRoutingConstraint(uuid);

        // TODO: test validations
    }
    
    /**
     * Update bandwidth-profile by ID
     *
     * Update operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        BandwidthProfile bandwidthProfile = null;
        api.updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(uuid, localId, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Update committed-burst-size by ID
     *
     * Update operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedBurstSize = null;
        api.updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, localId, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update committed-information-rate by ID
     *
     * Update operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedInformationRate = null;
        api.updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, localId, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update peak-burst-size by ID
     *
     * Update operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakBurstSize = null;
        api.updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, localId, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update peak-information-rate by ID
     *
     * Update operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakInformationRate = null;
        api.updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, localId, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update capacity by ID
     *
     * Update operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Capacity capacity = null;
        api.updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(uuid, localId, capacity);

        // TODO: test validations
    }
    
    /**
     * Update total-size by ID
     *
     * Update operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue totalSize = null;
        api.updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(uuid, localId, totalSize);

        // TODO: test validations
    }
    
    /**
     * Update end-point by ID
     *
     * Update operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        PathServiceEndPoint endPoint = null;
        api.updateContextPathComputationContextPathCompServiceEndPointEndPointById(uuid, localId, endPoint);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathComputationContextPathCompServiceEndPointNameNameById(uuid, localId, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update arof-service-interface-point-spec by ID
     *
     * Update operation of resource: arof-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ArofServiceInterfacePointSpec arofServiceInterfacePointSpec = null;
        api.updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update service-interface-point by ID
     *
     * Update operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ServiceInterfacePointSchema serviceInterfacePoint = null;
        api.updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathComputationContextPathCompServiceNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update objective-function by ID
     *
     * Update operation of resource: objective-function
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdTest() throws ApiException {
        String uuid = null;
        PathObjectiveFunction objectiveFunction = null;
        api.updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById(uuid, objectiveFunction);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update optimization-constraint by ID
     *
     * Update operation of resource: optimization-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdTest() throws ApiException {
        String uuid = null;
        PathOptimizationConstraint optimizationConstraint = null;
        api.updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById(uuid, optimizationConstraint);

        // TODO: test validations
    }
    
    /**
     * Update path-comp-service by ID
     *
     * Update operation of resource: path-comp-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServicePathCompServiceByIdTest() throws ApiException {
        String uuid = null;
        PathComputationService pathCompService = null;
        api.updateContextPathComputationContextPathCompServicePathCompServiceById(uuid, pathCompService);

        // TODO: test validations
    }
    
    /**
     * Update cost-characteristic by ID
     *
     * Update operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic costCharacteristic = null;
        api.updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(uuid, costName, costCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Update latency-characteristic by ID
     *
     * Update operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic latencyCharacteristic = null;
        api.updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName, latencyCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Update risk-diversity-characteristic by ID
     *
     * Update operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic riskDiversityCharacteristic = null;
        api.updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName, riskDiversityCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Update routing-constraint by ID
     *
     * Update operation of resource: routing-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdTest() throws ApiException {
        String uuid = null;
        RoutingConstraint routingConstraint = null;
        api.updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById(uuid, routingConstraint);

        // TODO: test validations
    }
    
    /**
     * Update topology-constraint by ID
     *
     * Update operation of resource: topology-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdTest() throws ApiException {
        String uuid = null;
        TopologyConstraint topologyConstraint = null;
        api.updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById(uuid, topologyConstraint);

        // TODO: test validations
    }
    
    /**
     * Update path-computation-context by ID
     *
     * Update operation of resource: path-computation-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathComputationContextByIdTest() throws ApiException {
        PathComputationContext pathComputationContext = null;
        api.updateContextPathComputationContextPathComputationContextById(pathComputationContext);

        // TODO: test validations
    }
    
}
