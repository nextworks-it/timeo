/*
 * tapi-arof API
 * tapi-arof API generated from tapi-arof.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ArofPoolSchema;
import io.swagger.client.model.ArofServiceInterfacePointSpec;
import io.swagger.client.model.BandwidthProfile;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.CapacityValue;
import io.swagger.client.model.CostCharacteristic;
import io.swagger.client.model.LatencyCharacteristic;
import io.swagger.client.model.LinkRef;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.NodeRef;
import io.swagger.client.model.Path;
import io.swagger.client.model.PathComputationContext;
import io.swagger.client.model.PathComputationService;
import io.swagger.client.model.PathObjectiveFunction;
import io.swagger.client.model.PathOptimizationConstraint;
import io.swagger.client.model.PathRef;
import io.swagger.client.model.PathServiceEndPoint;
import io.swagger.client.model.RiskCharacteristic;
import io.swagger.client.model.RoutingConstraint;
import io.swagger.client.model.ServiceInterfacePointRef;
import io.swagger.client.model.ServiceInterfacePointSchema;
import io.swagger.client.model.TopologyConstraint;
import io.swagger.client.model.TopologyRef;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PathComputationContextApi {
    private ApiClient apiClient;

    public PathComputationContextApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PathComputationContextApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, String localId, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bandwidthProfile;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(String uuid, String localId, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'bandwidthProfile' is set
        if (bandwidthProfile == null) {
            throw new ApiException("Missing the required parameter 'bandwidthProfile' when calling createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, localId, bandwidthProfile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create bandwidth-profile by ID
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, localId, bandwidthProfile);
    }

    /**
     * Create bandwidth-profile by ID
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, bandwidthProfile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create bandwidth-profile by ID (asynchronously)
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, String localId, BandwidthProfile bandwidthProfile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, bandwidthProfile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, String localId, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'committedBurstSize' is set
        if (committedBurstSize == null) {
            throw new ApiException("Missing the required parameter 'committedBurstSize' when calling createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, localId, committedBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create committed-burst-size by ID
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, localId, committedBurstSize);
    }

    /**
     * Create committed-burst-size by ID
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, committedBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create committed-burst-size by ID (asynchronously)
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, String localId, CapacityValue committedBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, committedBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, String localId, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(String uuid, String localId, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'committedInformationRate' is set
        if (committedInformationRate == null) {
            throw new ApiException("Missing the required parameter 'committedInformationRate' when calling createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, localId, committedInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create committed-information-rate by ID
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, localId, committedInformationRate);
    }

    /**
     * Create committed-information-rate by ID
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, committedInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create committed-information-rate by ID (asynchronously)
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, String localId, CapacityValue committedInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, committedInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, String localId, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'peakBurstSize' is set
        if (peakBurstSize == null) {
            throw new ApiException("Missing the required parameter 'peakBurstSize' when calling createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, localId, peakBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create peak-burst-size by ID
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, localId, peakBurstSize);
    }

    /**
     * Create peak-burst-size by ID
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, peakBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create peak-burst-size by ID (asynchronously)
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, String localId, CapacityValue peakBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, peakBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, String localId, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(String uuid, String localId, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'peakInformationRate' is set
        if (peakInformationRate == null) {
            throw new ApiException("Missing the required parameter 'peakInformationRate' when calling createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, localId, peakInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create peak-information-rate by ID
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, localId, peakInformationRate);
    }

    /**
     * Create peak-information-rate by ID
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, peakInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create peak-information-rate by ID (asynchronously)
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, String localId, CapacityValue peakInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, peakInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceEndPointCapacityCapacityById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdCall(String uuid, String localId, Capacity capacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = capacity;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdValidateBeforeCall(String uuid, String localId, Capacity capacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'capacity' is set
        if (capacity == null) {
            throw new ApiException("Missing the required parameter 'capacity' when calling createContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdCall(uuid, localId, capacity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create capacity by ID
     * Create operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(String uuid, String localId, Capacity capacity) throws ApiException {
        createContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdWithHttpInfo(uuid, localId, capacity);
    }

    /**
     * Create capacity by ID
     * Create operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdWithHttpInfo(String uuid, String localId, Capacity capacity) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, capacity, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create capacity by ID (asynchronously)
     * Create operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdAsync(String uuid, String localId, Capacity capacity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, capacity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdCall(String uuid, String localId, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = totalSize;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'totalSize' is set
        if (totalSize == null) {
            throw new ApiException("Missing the required parameter 'totalSize' when calling createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdCall(uuid, localId, totalSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create total-size by ID
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, localId, totalSize);
    }

    /**
     * Create total-size by ID
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, totalSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create total-size by ID (asynchronously)
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdAsync(String uuid, String localId, CapacityValue totalSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, totalSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointEndPointByIdCall(String uuid, String localId, PathServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = endPoint;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, PathServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextPathComputationContextPathCompServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'endPoint' is set
        if (endPoint == null) {
            throw new ApiException("Missing the required parameter 'endPoint' when calling createContextPathComputationContextPathCompServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointEndPointByIdCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create end-point by ID
     * Create operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceEndPointEndPointById(String uuid, String localId, PathServiceEndPoint endPoint) throws ApiException {
        createContextPathComputationContextPathCompServiceEndPointEndPointByIdWithHttpInfo(uuid, localId, endPoint);
    }

    /**
     * Create end-point by ID
     * Create operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId, PathServiceEndPoint endPoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create end-point by ID (asynchronously)
     * Create operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointEndPointByIdAsync(String uuid, String localId, PathServiceEndPoint endPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextPathComputationContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextPathComputationContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextPathComputationContextPathCompServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointNameNameByIdCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceEndPointNameNameById(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        createContextPathComputationContextPathCompServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdCall(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = arofServiceInterfacePointSpec;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/arof-service-interface-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'arofServiceInterfacePointSpec' is set
        if (arofServiceInterfacePointSpec == null) {
            throw new ApiException("Missing the required parameter 'arofServiceInterfacePointSpec' when calling createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdCall(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create arof-service-interface-point-spec by ID
     * Create operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec) throws ApiException {
        createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec);
    }

    /**
     * Create arof-service-interface-point-spec by ID
     * Create operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create arof-service-interface-point-spec by ID (asynchronously)
     * Create operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdCall(uuid, localId, serviceInterfacePointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name) throws ApiException {
        createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint) throws ApiException {
        createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint);
    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create service-interface-point by ID (asynchronously)
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextPathComputationContextPathCompServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextPathComputationContextPathCompServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        createContextPathComputationContextPathCompServiceNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/objective-function/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdCall(String uuid, PathObjectiveFunction objectiveFunction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = objectiveFunction;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/objective-function/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(String uuid, PathObjectiveFunction objectiveFunction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById(Async)");
        }
        
        // verify the required parameter 'objectiveFunction' is set
        if (objectiveFunction == null) {
            throw new ApiException("Missing the required parameter 'objectiveFunction' when calling createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdCall(uuid, objectiveFunction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create objective-function by ID
     * Create operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById(String uuid, PathObjectiveFunction objectiveFunction) throws ApiException {
        createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdWithHttpInfo(uuid, objectiveFunction);
    }

    /**
     * Create objective-function by ID
     * Create operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdWithHttpInfo(String uuid, PathObjectiveFunction objectiveFunction) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(uuid, objectiveFunction, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create objective-function by ID (asynchronously)
     * Create operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdAsync(String uuid, PathObjectiveFunction objectiveFunction, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(uuid, objectiveFunction, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/optimization-constraint/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdCall(String uuid, PathOptimizationConstraint optimizationConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = optimizationConstraint;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/optimization-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(String uuid, PathOptimizationConstraint optimizationConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById(Async)");
        }
        
        // verify the required parameter 'optimizationConstraint' is set
        if (optimizationConstraint == null) {
            throw new ApiException("Missing the required parameter 'optimizationConstraint' when calling createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdCall(uuid, optimizationConstraint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create optimization-constraint by ID
     * Create operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById(String uuid, PathOptimizationConstraint optimizationConstraint) throws ApiException {
        createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdWithHttpInfo(uuid, optimizationConstraint);
    }

    /**
     * Create optimization-constraint by ID
     * Create operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdWithHttpInfo(String uuid, PathOptimizationConstraint optimizationConstraint) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(uuid, optimizationConstraint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create optimization-constraint by ID (asynchronously)
     * Create operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdAsync(String uuid, PathOptimizationConstraint optimizationConstraint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(uuid, optimizationConstraint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServicePathCompServiceById
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServicePathCompServiceByIdCall(String uuid, PathComputationService pathCompService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pathCompService;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServicePathCompServiceByIdValidateBeforeCall(String uuid, PathComputationService pathCompService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServicePathCompServiceById(Async)");
        }
        
        // verify the required parameter 'pathCompService' is set
        if (pathCompService == null) {
            throw new ApiException("Missing the required parameter 'pathCompService' when calling createContextPathComputationContextPathCompServicePathCompServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServicePathCompServiceByIdCall(uuid, pathCompService, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create path-comp-service by ID
     * Create operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServicePathCompServiceById(String uuid, PathComputationService pathCompService) throws ApiException {
        createContextPathComputationContextPathCompServicePathCompServiceByIdWithHttpInfo(uuid, pathCompService);
    }

    /**
     * Create path-comp-service by ID
     * Create operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServicePathCompServiceByIdWithHttpInfo(String uuid, PathComputationService pathCompService) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, pathCompService, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create path-comp-service by ID (asynchronously)
     * Create operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServicePathCompServiceByIdAsync(String uuid, PathComputationService pathCompService, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, pathCompService, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, CostCharacteristic costCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = costCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String costName, CostCharacteristic costCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costCharacteristic' is set
        if (costCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'costCharacteristic' when calling createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdCall(uuid, costName, costCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create cost-characteristic by ID
     * Create operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName, costCharacteristic);
    }

    /**
     * Create cost-characteristic by ID
     * Create operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, costCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create cost-characteristic by ID (asynchronously)
     * Create operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, CostCharacteristic costCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, costCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = latencyCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'latencyCharacteristic' is set
        if (latencyCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'latencyCharacteristic' when calling createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, latencyCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create latency-characteristic by ID
     * Create operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName, latencyCharacteristic);
    }

    /**
     * Create latency-characteristic by ID
     * Create operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, latencyCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create latency-characteristic by ID (asynchronously)
     * Create operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, latencyCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = riskDiversityCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/risk-diversity-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskDiversityCharacteristic' is set
        if (riskDiversityCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'riskDiversityCharacteristic' when calling createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create risk-diversity-characteristic by ID
     * Create operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic) throws ApiException {
        createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(uuid, riskCharacteristicName, riskDiversityCharacteristic);
    }

    /**
     * Create risk-diversity-characteristic by ID
     * Create operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create risk-diversity-characteristic by ID (asynchronously)
     * Create operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdAsync(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdCall(String uuid, RoutingConstraint routingConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = routingConstraint;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(String uuid, RoutingConstraint routingConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById(Async)");
        }
        
        // verify the required parameter 'routingConstraint' is set
        if (routingConstraint == null) {
            throw new ApiException("Missing the required parameter 'routingConstraint' when calling createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdCall(uuid, routingConstraint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create routing-constraint by ID
     * Create operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById(String uuid, RoutingConstraint routingConstraint) throws ApiException {
        createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdWithHttpInfo(uuid, routingConstraint);
    }

    /**
     * Create routing-constraint by ID
     * Create operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdWithHttpInfo(String uuid, RoutingConstraint routingConstraint) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(uuid, routingConstraint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create routing-constraint by ID (asynchronously)
     * Create operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdAsync(String uuid, RoutingConstraint routingConstraint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(uuid, routingConstraint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById
     * @param uuid ID of uuid (required)
     * @param topologyConstraint topology-constraintbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdCall(String uuid, TopologyConstraint topologyConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = topologyConstraint;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdValidateBeforeCall(String uuid, TopologyConstraint topologyConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById(Async)");
        }
        
        // verify the required parameter 'topologyConstraint' is set
        if (topologyConstraint == null) {
            throw new ApiException("Missing the required parameter 'topologyConstraint' when calling createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdCall(uuid, topologyConstraint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create topology-constraint by ID
     * Create operation of resource: topology-constraint
     * @param uuid ID of uuid (required)
     * @param topologyConstraint topology-constraintbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById(String uuid, TopologyConstraint topologyConstraint) throws ApiException {
        createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdWithHttpInfo(uuid, topologyConstraint);
    }

    /**
     * Create topology-constraint by ID
     * Create operation of resource: topology-constraint
     * @param uuid ID of uuid (required)
     * @param topologyConstraint topology-constraintbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdWithHttpInfo(String uuid, TopologyConstraint topologyConstraint) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdValidateBeforeCall(uuid, topologyConstraint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create topology-constraint by ID (asynchronously)
     * Create operation of resource: topology-constraint
     * @param uuid ID of uuid (required)
     * @param topologyConstraint topology-constraintbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdAsync(String uuid, TopologyConstraint topologyConstraint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdValidateBeforeCall(uuid, topologyConstraint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextPathComputationContextPathComputationContextById
     * @param pathComputationContext path-computation-contextbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathComputationContextByIdCall(PathComputationContext pathComputationContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pathComputationContext;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextPathComputationContextPathComputationContextByIdValidateBeforeCall(PathComputationContext pathComputationContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pathComputationContext' is set
        if (pathComputationContext == null) {
            throw new ApiException("Missing the required parameter 'pathComputationContext' when calling createContextPathComputationContextPathComputationContextById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextPathComputationContextPathComputationContextByIdCall(pathComputationContext, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create path-computation-context by ID
     * Create operation of resource: path-computation-context
     * @param pathComputationContext path-computation-contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextPathComputationContextPathComputationContextById(PathComputationContext pathComputationContext) throws ApiException {
        createContextPathComputationContextPathComputationContextByIdWithHttpInfo(pathComputationContext);
    }

    /**
     * Create path-computation-context by ID
     * Create operation of resource: path-computation-context
     * @param pathComputationContext path-computation-contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextPathComputationContextPathComputationContextByIdWithHttpInfo(PathComputationContext pathComputationContext) throws ApiException {
        com.squareup.okhttp.Call call = createContextPathComputationContextPathComputationContextByIdValidateBeforeCall(pathComputationContext, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create path-computation-context by ID (asynchronously)
     * Create operation of resource: path-computation-context
     * @param pathComputationContext path-computation-contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextPathComputationContextPathComputationContextByIdAsync(PathComputationContext pathComputationContext, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextPathComputationContextPathComputationContextByIdValidateBeforeCall(pathComputationContext, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete bandwidth-profile by ID
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(String uuid, String localId) throws ApiException {
        deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete bandwidth-profile by ID
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete bandwidth-profile by ID (asynchronously)
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete committed-burst-size by ID
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, String localId) throws ApiException {
        deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete committed-burst-size by ID
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete committed-burst-size by ID (asynchronously)
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete committed-information-rate by ID
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, String localId) throws ApiException {
        deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete committed-information-rate by ID
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete committed-information-rate by ID (asynchronously)
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete peak-burst-size by ID
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, String localId) throws ApiException {
        deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete peak-burst-size by ID
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete peak-burst-size by ID (asynchronously)
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete peak-information-rate by ID
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, String localId) throws ApiException {
        deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete peak-information-rate by ID
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete peak-information-rate by ID (asynchronously)
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete capacity by ID
     * Delete operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(String uuid, String localId) throws ApiException {
        deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete capacity by ID
     * Delete operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete capacity by ID (asynchronously)
     * Delete operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete total-size by ID
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(String uuid, String localId) throws ApiException {
        deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete total-size by ID
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete total-size by ID (asynchronously)
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointEndPointByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextPathComputationContextPathCompServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointEndPointByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete end-point by ID
     * Delete operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceEndPointEndPointById(String uuid, String localId) throws ApiException {
        deleteContextPathComputationContextPathCompServiceEndPointEndPointByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete end-point by ID
     * Delete operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete end-point by ID (asynchronously)
     * Delete operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointEndPointByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextPathComputationContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextPathComputationContextPathCompServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointNameNameByIdCall(uuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceEndPointNameNameById(String uuid, String localId, String valueName) throws ApiException {
        deleteContextPathComputationContextPathCompServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/arof-service-interface-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete arof-service-interface-point-spec by ID
     * Delete operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
    }

    /**
     * Delete arof-service-interface-point-spec by ID
     * Delete operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete arof-service-interface-point-spec by ID (asynchronously)
     * Delete operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdCall(uuid, localId, serviceInterfacePointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(String uuid, String localId, String serviceInterfacePointUuid, String valueName) throws ApiException {
        deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete service-interface-point by ID (asynchronously)
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextPathComputationContextPathCompServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceNameNameById(String uuid, String valueName) throws ApiException {
        deleteContextPathComputationContextPathCompServiceNameNameByIdWithHttpInfo(uuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceNameNameByIdAsync(String uuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/objective-function/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(String uuid, String valueName) throws ApiException {
        deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(uuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdAsync(String uuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/objective-function/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete objective-function by ID
     * Delete operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById(String uuid) throws ApiException {
        deleteContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdWithHttpInfo(uuid);
    }

    /**
     * Delete objective-function by ID
     * Delete operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete objective-function by ID (asynchronously)
     * Delete operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/optimization-constraint/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(String uuid, String valueName) throws ApiException {
        deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(uuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdAsync(String uuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/optimization-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete optimization-constraint by ID
     * Delete operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById(String uuid) throws ApiException {
        deleteContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdWithHttpInfo(uuid);
    }

    /**
     * Delete optimization-constraint by ID
     * Delete operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete optimization-constraint by ID (asynchronously)
     * Delete operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServicePathCompServiceById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServicePathCompServiceByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServicePathCompServiceByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServicePathCompServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServicePathCompServiceByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete path-comp-service by ID
     * Delete operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServicePathCompServiceById(String uuid) throws ApiException {
        deleteContextPathComputationContextPathCompServicePathCompServiceByIdWithHttpInfo(uuid);
    }

    /**
     * Delete path-comp-service by ID
     * Delete operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServicePathCompServiceByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete path-comp-service by ID (asynchronously)
     * Delete operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServicePathCompServiceByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdCall(uuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete cost-characteristic by ID
     * Delete operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(String uuid, String costName) throws ApiException {
        deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName);
    }

    /**
     * Delete cost-characteristic by ID
     * Delete operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete cost-characteristic by ID (asynchronously)
     * Delete operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete latency-characteristic by ID
     * Delete operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName) throws ApiException {
        deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName);
    }

    /**
     * Delete latency-characteristic by ID
     * Delete operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete latency-characteristic by ID (asynchronously)
     * Delete operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(String uuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/risk-diversity-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(String uuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete risk-diversity-characteristic by ID
     * Delete operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(String uuid, String riskCharacteristicName) throws ApiException {
        deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(uuid, riskCharacteristicName);
    }

    /**
     * Delete risk-diversity-characteristic by ID
     * Delete operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(String uuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete risk-diversity-characteristic by ID (asynchronously)
     * Delete operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdAsync(String uuid, String riskCharacteristicName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete routing-constraint by ID
     * Delete operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById(String uuid) throws ApiException {
        deleteContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdWithHttpInfo(uuid);
    }

    /**
     * Delete routing-constraint by ID
     * Delete operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete routing-constraint by ID (asynchronously)
     * Delete operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete topology-constraint by ID
     * Delete operation of resource: topology-constraint
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById(String uuid) throws ApiException {
        deleteContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdWithHttpInfo(uuid);
    }

    /**
     * Delete topology-constraint by ID
     * Delete operation of resource: topology-constraint
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete topology-constraint by ID (asynchronously)
     * Delete operation of resource: topology-constraint
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextPathComputationContextPathComputationContextById
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathComputationContextByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextPathComputationContextPathComputationContextByIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathComputationContextByIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete path-computation-context by ID
     * Delete operation of resource: path-computation-context
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextPathComputationContextPathComputationContextById() throws ApiException {
        deleteContextPathComputationContextPathComputationContextByIdWithHttpInfo();
    }

    /**
     * Delete path-computation-context by ID
     * Delete operation of resource: path-computation-context
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextPathComputationContextPathComputationContextByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathComputationContextByIdValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete path-computation-context by ID (asynchronously)
     * Delete operation of resource: path-computation-context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextPathComputationContextPathComputationContextByIdAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextPathComputationContextPathComputationContextByIdValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfile(String uuid, String localId) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String localId, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacityCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacityValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacity(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacityCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve capacity
     * Retrieve operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacity(String uuid, String localId) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacityWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve capacity
     * Retrieve operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacityWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacityValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve capacity (asynchronously)
     * Retrieve operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacityAsync(String uuid, String localId, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacityValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSize(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointEndPoint
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointEndPointCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointEndPointValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointEndPointCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve end-point
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceEndPointEndPoint(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceEndPointEndPointWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve end-point
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceEndPointEndPointWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointEndPointValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve end-point (asynchronously)
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointEndPointAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointEndPointValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointEndPointByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointEndPointByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve end-point by ID
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return PathServiceEndPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathServiceEndPoint retrieveContextPathComputationContextPathCompServiceEndPointEndPointById(String uuid, String localId) throws ApiException {
        ApiResponse<PathServiceEndPoint> resp = retrieveContextPathComputationContextPathCompServiceEndPointEndPointByIdWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve end-point by ID
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;PathServiceEndPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathServiceEndPoint> retrieveContextPathComputationContextPathCompServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<PathServiceEndPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve end-point by ID (asynchronously)
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointEndPointByIdAsync(String uuid, String localId, final ApiCallback<PathServiceEndPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathServiceEndPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointNameName
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointNameNameCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointNameNameValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointNameNameCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceEndPointNameName(String uuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceEndPointNameNameWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceEndPointNameNameWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointNameNameValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointNameNameAsync(String uuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointNameNameValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextPathComputationContextPathCompServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointNameNameByIdCall(uuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextPathComputationContextPathCompServiceEndPointNameNameById(String uuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextPathComputationContextPathCompServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPool
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/arof-service-interface-point-spec/arof-pool/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPool(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPool(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPool(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve arof-pool
     * Retrieve operation of resource: arof-pool
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ArofPoolSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArofPoolSchema retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPool(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<ArofPoolSchema> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve arof-pool
     * Retrieve operation of resource: arof-pool
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;ArofPoolSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArofPoolSchema> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<ArofPoolSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve arof-pool (asynchronously)
     * Retrieve operation of resource: arof-pool
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<ArofPoolSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArofPoolSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/arof-service-interface-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpec(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpec(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpec(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve arof-service-interface-point-spec
     * Retrieve operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ArofServiceInterfacePointSpec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArofServiceInterfacePointSpec retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpec(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<ArofServiceInterfacePointSpec> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve arof-service-interface-point-spec
     * Retrieve operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;ArofServiceInterfacePointSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArofServiceInterfacePointSpec> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<ArofServiceInterfacePointSpec>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve arof-service-interface-point-spec (asynchronously)
     * Retrieve operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<ArofServiceInterfacePointSpec> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArofServiceInterfacePointSpec>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacity(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSize(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameName
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameName(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameName(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdCall(uuid, localId, serviceInterfacePointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(String uuid, String localId, String serviceInterfacePointUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ServiceInterfacePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInterfacePointRef retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePoint(String uuid, String localId) throws ApiException {
        ApiResponse<ServiceInterfacePointRef> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;ServiceInterfacePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInterfacePointRef> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve service-interface-point (asynchronously)
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointAsync(String uuid, String localId, final ApiCallback<ServiceInterfacePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve service-interface-point by ID
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ServiceInterfacePointSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInterfacePointSchema retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<ServiceInterfacePointSchema> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve service-interface-point by ID
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;ServiceInterfacePointSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInterfacePointSchema> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve service-interface-point by ID (asynchronously)
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<ServiceInterfacePointSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextPathComputationContextPathCompServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextPathComputationContextPathCompServiceNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextPathComputationContextPathCompServiceNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextPathComputationContextPathCompServiceNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/objective-function/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/objective-function/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunction
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/objective-function/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunction(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve objective-function
     * Retrieve operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @return PathObjectiveFunction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathObjectiveFunction retrieveContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunction(String uuid) throws ApiException {
        ApiResponse<PathObjectiveFunction> resp = retrieveContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve objective-function
     * Retrieve operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;PathObjectiveFunction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathObjectiveFunction> retrieveContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<PathObjectiveFunction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve objective-function (asynchronously)
     * Retrieve operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionAsync(String uuid, final ApiCallback<PathObjectiveFunction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathObjectiveFunction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/optimization-constraint/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/optimization-constraint/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraint
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/optimization-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve optimization-constraint
     * Retrieve operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @return PathOptimizationConstraint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathOptimizationConstraint retrieveContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraint(String uuid) throws ApiException {
        ApiResponse<PathOptimizationConstraint> resp = retrieveContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve optimization-constraint
     * Retrieve operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;PathOptimizationConstraint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathOptimizationConstraint> retrieveContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<PathOptimizationConstraint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve optimization-constraint (asynchronously)
     * Retrieve operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintAsync(String uuid, final ApiCallback<PathOptimizationConstraint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathOptimizationConstraint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServicePathCompService
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServicePathCompServiceCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServicePathCompServiceValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServicePathCompServiceCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve path-comp-service
     * Retrieve operation of resource: path-comp-service
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServicePathCompService() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServicePathCompServiceWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve path-comp-service
     * Retrieve operation of resource: path-comp-service
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServicePathCompServiceWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServicePathCompServiceValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve path-comp-service (asynchronously)
     * Retrieve operation of resource: path-comp-service
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServicePathCompServiceAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServicePathCompServiceValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServicePathCompServiceById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServicePathCompServiceByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServicePathCompServiceByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServicePathCompServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServicePathCompServiceByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve path-comp-service by ID
     * Retrieve operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @return PathComputationService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathComputationService retrieveContextPathComputationContextPathCompServicePathCompServiceById(String uuid) throws ApiException {
        ApiResponse<PathComputationService> resp = retrieveContextPathComputationContextPathCompServicePathCompServiceByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve path-comp-service by ID
     * Retrieve operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;PathComputationService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathComputationService> retrieveContextPathComputationContextPathCompServicePathCompServiceByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<PathComputationService>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve path-comp-service by ID (asynchronously)
     * Retrieve operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServicePathCompServiceByIdAsync(String uuid, final ApiCallback<PathComputationService> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathComputationService>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServicePathPath
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServicePathPathCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/path/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServicePathPathValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServicePathPath(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServicePathPathCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve path
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServicePathPath(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServicePathPathWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve path
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServicePathPathWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServicePathPathValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve path (asynchronously)
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServicePathPathAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServicePathPathValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServicePathPathById
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServicePathPathByIdCall(String uuid, String pathUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/path/{path_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "path_uuid" + "\\}", apiClient.escapeString(pathUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServicePathPathByIdValidateBeforeCall(String uuid, String pathUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServicePathPathById(Async)");
        }
        
        // verify the required parameter 'pathUuid' is set
        if (pathUuid == null) {
            throw new ApiException("Missing the required parameter 'pathUuid' when calling retrieveContextPathComputationContextPathCompServicePathPathById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServicePathPathByIdCall(uuid, pathUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve path by ID
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @return PathRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathRef retrieveContextPathComputationContextPathCompServicePathPathById(String uuid, String pathUuid) throws ApiException {
        ApiResponse<PathRef> resp = retrieveContextPathComputationContextPathCompServicePathPathByIdWithHttpInfo(uuid, pathUuid);
        return resp.getData();
    }

    /**
     * Retrieve path by ID
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @return ApiResponse&lt;PathRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathRef> retrieveContextPathComputationContextPathCompServicePathPathByIdWithHttpInfo(String uuid, String pathUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServicePathPathByIdValidateBeforeCall(uuid, pathUuid, null, null);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve path by ID (asynchronously)
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServicePathPathByIdAsync(String uuid, String pathUuid, final ApiCallback<PathRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServicePathPathByIdValidateBeforeCall(uuid, pathUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdCall(uuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(String uuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristic
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/risk-diversity-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-diversity-characteristic
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve risk-diversity-characteristic
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-diversity-characteristic (asynchronously)
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(String uuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/risk-diversity-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(String uuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-diversity-characteristic by ID
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return RiskCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RiskCharacteristic retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(String uuid, String riskCharacteristicName) throws ApiException {
        ApiResponse<RiskCharacteristic> resp = retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(uuid, riskCharacteristicName);
        return resp.getData();
    }

    /**
     * Retrieve risk-diversity-characteristic by ID
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;RiskCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RiskCharacteristic> retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(String uuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, null, null);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-diversity-characteristic by ID (asynchronously)
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdAsync(String uuid, String riskCharacteristicName, final ApiCallback<RiskCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraint
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve routing-constraint
     * Retrieve operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @return RoutingConstraint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoutingConstraint retrieveContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraint(String uuid) throws ApiException {
        ApiResponse<RoutingConstraint> resp = retrieveContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve routing-constraint
     * Retrieve operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;RoutingConstraint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoutingConstraint> retrieveContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<RoutingConstraint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve routing-constraint (asynchronously)
     * Retrieve operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintAsync(String uuid, final ApiCallback<RoutingConstraint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoutingConstraint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopology
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/avoid-topology/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopology(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve avoid-topology
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopology(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve avoid-topology
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve avoid-topology (asynchronously)
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyById
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyByIdCall(String uuid, String topologyUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/avoid-topology/{topology_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_uuid" + "\\}", apiClient.escapeString(topologyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyByIdValidateBeforeCall(String uuid, String topologyUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyById(Async)");
        }
        
        // verify the required parameter 'topologyUuid' is set
        if (topologyUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyByIdCall(uuid, topologyUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve avoid-topology by ID
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyById(String uuid, String topologyUuid) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyByIdWithHttpInfo(uuid, topologyUuid);
        return resp.getData();
    }

    /**
     * Retrieve avoid-topology by ID
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyByIdWithHttpInfo(String uuid, String topologyUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyByIdValidateBeforeCall(uuid, topologyUuid, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve avoid-topology by ID (asynchronously)
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyByIdAsync(String uuid, String topologyUuid, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintAvoidTopologyAvoidTopologyByIdValidateBeforeCall(uuid, topologyUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLink
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/exclude-link/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLink(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-link
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLink(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-link
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-link (asynchronously)
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkById
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkByIdCall(String uuid, String topologyUuidLinkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/exclude-link/{topology_uuid_link_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_uuid_link_uuid" + "\\}", apiClient.escapeString(topologyUuidLinkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkByIdValidateBeforeCall(String uuid, String topologyUuidLinkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkById(Async)");
        }
        
        // verify the required parameter 'topologyUuidLinkUuid' is set
        if (topologyUuidLinkUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidLinkUuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkByIdCall(uuid, topologyUuidLinkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-link by ID
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return LinkRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkRef retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkById(String uuid, String topologyUuidLinkUuid) throws ApiException {
        ApiResponse<LinkRef> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkByIdWithHttpInfo(uuid, topologyUuidLinkUuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-link by ID
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return ApiResponse&lt;LinkRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkRef> retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkByIdWithHttpInfo(String uuid, String topologyUuidLinkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkByIdValidateBeforeCall(uuid, topologyUuidLinkUuid, null, null);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-link by ID (asynchronously)
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkByIdAsync(String uuid, String topologyUuidLinkUuid, final ApiCallback<LinkRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeLinkExcludeLinkByIdValidateBeforeCall(uuid, topologyUuidLinkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNode
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/exclude-node/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNode(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-node
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNode(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-node
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-node (asynchronously)
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeById
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeByIdCall(String uuid, String topologyUuidNodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/exclude-node/{topology_uuid_node_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeByIdValidateBeforeCall(String uuid, String topologyUuidNodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuid' is set
        if (topologyUuidNodeUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeByIdCall(uuid, topologyUuidNodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-node by ID
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @return NodeRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRef retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeById(String uuid, String topologyUuidNodeUuid) throws ApiException {
        ApiResponse<NodeRef> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeByIdWithHttpInfo(uuid, topologyUuidNodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-node by ID
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @return ApiResponse&lt;NodeRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRef> retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeByIdWithHttpInfo(String uuid, String topologyUuidNodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeByIdValidateBeforeCall(uuid, topologyUuidNodeUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-node by ID (asynchronously)
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeByIdAsync(String uuid, String topologyUuidNodeUuid, final ApiCallback<NodeRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludeNodeExcludeNodeByIdValidateBeforeCall(uuid, topologyUuidNodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePath
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/exclude-path/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePath(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-path
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePath(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-path
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-path (asynchronously)
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathById
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathByIdCall(String uuid, String pathUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/exclude-path/{path_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "path_uuid" + "\\}", apiClient.escapeString(pathUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathByIdValidateBeforeCall(String uuid, String pathUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathById(Async)");
        }
        
        // verify the required parameter 'pathUuid' is set
        if (pathUuid == null) {
            throw new ApiException("Missing the required parameter 'pathUuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathByIdCall(uuid, pathUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-path by ID
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @return PathRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathRef retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathById(String uuid, String pathUuid) throws ApiException {
        ApiResponse<PathRef> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathByIdWithHttpInfo(uuid, pathUuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-path by ID
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @return ApiResponse&lt;PathRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathRef> retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathByIdWithHttpInfo(String uuid, String pathUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathByIdValidateBeforeCall(uuid, pathUuid, null, null);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-path by ID (asynchronously)
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathByIdAsync(String uuid, String pathUuid, final ApiCallback<PathRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintExcludePathExcludePathByIdValidateBeforeCall(uuid, pathUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLink
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/include-link/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLink(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-link
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLink(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-link
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-link (asynchronously)
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkById
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkByIdCall(String uuid, String topologyUuidLinkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/include-link/{topology_uuid_link_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_uuid_link_uuid" + "\\}", apiClient.escapeString(topologyUuidLinkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkByIdValidateBeforeCall(String uuid, String topologyUuidLinkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkById(Async)");
        }
        
        // verify the required parameter 'topologyUuidLinkUuid' is set
        if (topologyUuidLinkUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidLinkUuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkByIdCall(uuid, topologyUuidLinkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-link by ID
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return LinkRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkRef retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkById(String uuid, String topologyUuidLinkUuid) throws ApiException {
        ApiResponse<LinkRef> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkByIdWithHttpInfo(uuid, topologyUuidLinkUuid);
        return resp.getData();
    }

    /**
     * Retrieve include-link by ID
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return ApiResponse&lt;LinkRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkRef> retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkByIdWithHttpInfo(String uuid, String topologyUuidLinkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkByIdValidateBeforeCall(uuid, topologyUuidLinkUuid, null, null);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-link by ID (asynchronously)
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkByIdAsync(String uuid, String topologyUuidLinkUuid, final ApiCallback<LinkRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeLinkIncludeLinkByIdValidateBeforeCall(uuid, topologyUuidLinkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNode
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/include-node/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNode(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-node
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNode(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-node
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-node (asynchronously)
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeById
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeByIdCall(String uuid, String topologyUuidNodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/include-node/{topology_uuid_node_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeByIdValidateBeforeCall(String uuid, String topologyUuidNodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuid' is set
        if (topologyUuidNodeUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeByIdCall(uuid, topologyUuidNodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-node by ID
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @return NodeRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRef retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeById(String uuid, String topologyUuidNodeUuid) throws ApiException {
        ApiResponse<NodeRef> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeByIdWithHttpInfo(uuid, topologyUuidNodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve include-node by ID
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @return ApiResponse&lt;NodeRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRef> retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeByIdWithHttpInfo(String uuid, String topologyUuidNodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeByIdValidateBeforeCall(uuid, topologyUuidNodeUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-node by ID (asynchronously)
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeByIdAsync(String uuid, String topologyUuidNodeUuid, final ApiCallback<NodeRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeNodeIncludeNodeByIdValidateBeforeCall(uuid, topologyUuidNodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePath
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/include-path/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePath(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-path
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePath(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-path
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-path (asynchronously)
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathById
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathByIdCall(String uuid, String pathUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/include-path/{path_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "path_uuid" + "\\}", apiClient.escapeString(pathUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathByIdValidateBeforeCall(String uuid, String pathUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathById(Async)");
        }
        
        // verify the required parameter 'pathUuid' is set
        if (pathUuid == null) {
            throw new ApiException("Missing the required parameter 'pathUuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathByIdCall(uuid, pathUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-path by ID
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @return PathRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathRef retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathById(String uuid, String pathUuid) throws ApiException {
        ApiResponse<PathRef> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathByIdWithHttpInfo(uuid, pathUuid);
        return resp.getData();
    }

    /**
     * Retrieve include-path by ID
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @return ApiResponse&lt;PathRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathRef> retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathByIdWithHttpInfo(String uuid, String pathUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathByIdValidateBeforeCall(uuid, pathUuid, null, null);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-path by ID (asynchronously)
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathByIdAsync(String uuid, String pathUuid, final ApiCallback<PathRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludePathIncludePathByIdValidateBeforeCall(uuid, pathUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopology
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/include-topology/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopology(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-topology
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopology(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-topology
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-topology (asynchronously)
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyById
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyByIdCall(String uuid, String topologyUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/include-topology/{topology_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_uuid" + "\\}", apiClient.escapeString(topologyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyByIdValidateBeforeCall(String uuid, String topologyUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyById(Async)");
        }
        
        // verify the required parameter 'topologyUuid' is set
        if (topologyUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyByIdCall(uuid, topologyUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-topology by ID
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyById(String uuid, String topologyUuid) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyByIdWithHttpInfo(uuid, topologyUuid);
        return resp.getData();
    }

    /**
     * Retrieve include-topology by ID
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyByIdWithHttpInfo(String uuid, String topologyUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyByIdValidateBeforeCall(uuid, topologyUuid, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-topology by ID (asynchronously)
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyByIdAsync(String uuid, String topologyUuid, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintIncludeTopologyIncludeTopologyByIdValidateBeforeCall(uuid, topologyUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraint
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve topology-constraint
     * Retrieve operation of resource: topology-constraint
     * @param uuid ID of uuid (required)
     * @return TopologyConstraint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyConstraint retrieveContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraint(String uuid) throws ApiException {
        ApiResponse<TopologyConstraint> resp = retrieveContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve topology-constraint
     * Retrieve operation of resource: topology-constraint
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;TopologyConstraint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyConstraint> retrieveContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<TopologyConstraint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve topology-constraint (asynchronously)
     * Retrieve operation of resource: topology-constraint
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintAsync(String uuid, final ApiCallback<TopologyConstraint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyConstraint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathComputationContext
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathComputationContextCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathComputationContextValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathComputationContextCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve path-computation-context
     * Retrieve operation of resource: path-computation-context
     * @return PathComputationContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathComputationContext retrieveContextPathComputationContextPathComputationContext() throws ApiException {
        ApiResponse<PathComputationContext> resp = retrieveContextPathComputationContextPathComputationContextWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve path-computation-context
     * Retrieve operation of resource: path-computation-context
     * @return ApiResponse&lt;PathComputationContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathComputationContext> retrieveContextPathComputationContextPathComputationContextWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathComputationContextValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<PathComputationContext>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve path-computation-context (asynchronously)
     * Retrieve operation of resource: path-computation-context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathComputationContextAsync(final ApiCallback<PathComputationContext> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathComputationContextValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathComputationContext>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathLinkLink
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathLinkLinkCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path/{uuid}/link/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathLinkLinkValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathLinkLink(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathLinkLinkCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve link
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathLinkLink(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathLinkLinkWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve link
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathLinkLinkWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathLinkLinkValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve link (asynchronously)
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathLinkLinkAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathLinkLinkValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathLinkLinkById
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathLinkLinkByIdCall(String uuid, String topologyUuidLinkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path/{uuid}/link/{topology_uuid_link_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_uuid_link_uuid" + "\\}", apiClient.escapeString(topologyUuidLinkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathLinkLinkByIdValidateBeforeCall(String uuid, String topologyUuidLinkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathLinkLinkById(Async)");
        }
        
        // verify the required parameter 'topologyUuidLinkUuid' is set
        if (topologyUuidLinkUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidLinkUuid' when calling retrieveContextPathComputationContextPathLinkLinkById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathLinkLinkByIdCall(uuid, topologyUuidLinkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve link by ID
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return LinkRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkRef retrieveContextPathComputationContextPathLinkLinkById(String uuid, String topologyUuidLinkUuid) throws ApiException {
        ApiResponse<LinkRef> resp = retrieveContextPathComputationContextPathLinkLinkByIdWithHttpInfo(uuid, topologyUuidLinkUuid);
        return resp.getData();
    }

    /**
     * Retrieve link by ID
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return ApiResponse&lt;LinkRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkRef> retrieveContextPathComputationContextPathLinkLinkByIdWithHttpInfo(String uuid, String topologyUuidLinkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathLinkLinkByIdValidateBeforeCall(uuid, topologyUuidLinkUuid, null, null);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve link by ID (asynchronously)
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathLinkLinkByIdAsync(String uuid, String topologyUuidLinkUuid, final ApiCallback<LinkRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathLinkLinkByIdValidateBeforeCall(uuid, topologyUuidLinkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path/{uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextPathComputationContextPathNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextPathComputationContextPathNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextPathComputationContextPathNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextPathComputationContextPathNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathPath
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathPathCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathPathValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathPathCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve path
     * Retrieve operation of resource: path
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathPath() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathPathWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve path
     * Retrieve operation of resource: path
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathPathWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathPathValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve path (asynchronously)
     * Retrieve operation of resource: path
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathPathAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathPathValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathPathById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathPathByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathPathByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathPathById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathPathByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve path by ID
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @return Path
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Path retrieveContextPathComputationContextPathPathById(String uuid) throws ApiException {
        ApiResponse<Path> resp = retrieveContextPathComputationContextPathPathByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve path by ID
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Path&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Path> retrieveContextPathComputationContextPathPathByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathPathByIdValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Path>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve path by ID (asynchronously)
     * Retrieve operation of resource: path
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathPathByIdAsync(String uuid, final ApiCallback<Path> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathPathByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Path>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path/{uuid}/routing-constraint/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path/{uuid}/routing-constraint/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdCall(uuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicById(String uuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path/{uuid}/routing-constraint/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path/{uuid}/routing-constraint/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristic
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path/{uuid}/routing-constraint/risk-diversity-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-diversity-characteristic
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve risk-diversity-characteristic
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-diversity-characteristic (asynchronously)
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(String uuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path/{uuid}/routing-constraint/risk-diversity-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(String uuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-diversity-characteristic by ID
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return RiskCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RiskCharacteristic retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(String uuid, String riskCharacteristicName) throws ApiException {
        ApiResponse<RiskCharacteristic> resp = retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(uuid, riskCharacteristicName);
        return resp.getData();
    }

    /**
     * Retrieve risk-diversity-characteristic by ID
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;RiskCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RiskCharacteristic> retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(String uuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, null, null);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-diversity-characteristic by ID (asynchronously)
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdAsync(String uuid, String riskCharacteristicName, final ApiCallback<RiskCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextPathComputationContextPathRoutingConstraintRoutingConstraint
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintRoutingConstraintCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path/{uuid}/routing-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintRoutingConstraintValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextPathComputationContextPathRoutingConstraintRoutingConstraint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintRoutingConstraintCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve routing-constraint
     * Retrieve operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @return RoutingConstraint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoutingConstraint retrieveContextPathComputationContextPathRoutingConstraintRoutingConstraint(String uuid) throws ApiException {
        ApiResponse<RoutingConstraint> resp = retrieveContextPathComputationContextPathRoutingConstraintRoutingConstraintWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve routing-constraint
     * Retrieve operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;RoutingConstraint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoutingConstraint> retrieveContextPathComputationContextPathRoutingConstraintRoutingConstraintWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintRoutingConstraintValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<RoutingConstraint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve routing-constraint (asynchronously)
     * Retrieve operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextPathComputationContextPathRoutingConstraintRoutingConstraintAsync(String uuid, final ApiCallback<RoutingConstraint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextPathComputationContextPathRoutingConstraintRoutingConstraintValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoutingConstraint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, String localId, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bandwidthProfile;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(String uuid, String localId, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'bandwidthProfile' is set
        if (bandwidthProfile == null) {
            throw new ApiException("Missing the required parameter 'bandwidthProfile' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, localId, bandwidthProfile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update bandwidth-profile by ID
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, localId, bandwidthProfile);
    }

    /**
     * Update bandwidth-profile by ID
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, bandwidthProfile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update bandwidth-profile by ID (asynchronously)
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, String localId, BandwidthProfile bandwidthProfile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, bandwidthProfile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, String localId, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'committedBurstSize' is set
        if (committedBurstSize == null) {
            throw new ApiException("Missing the required parameter 'committedBurstSize' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, localId, committedBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update committed-burst-size by ID
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, localId, committedBurstSize);
    }

    /**
     * Update committed-burst-size by ID
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, committedBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update committed-burst-size by ID (asynchronously)
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, String localId, CapacityValue committedBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, committedBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, String localId, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(String uuid, String localId, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'committedInformationRate' is set
        if (committedInformationRate == null) {
            throw new ApiException("Missing the required parameter 'committedInformationRate' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, localId, committedInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update committed-information-rate by ID
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, localId, committedInformationRate);
    }

    /**
     * Update committed-information-rate by ID
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, committedInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update committed-information-rate by ID (asynchronously)
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, String localId, CapacityValue committedInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, committedInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, String localId, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'peakBurstSize' is set
        if (peakBurstSize == null) {
            throw new ApiException("Missing the required parameter 'peakBurstSize' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, localId, peakBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update peak-burst-size by ID
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, localId, peakBurstSize);
    }

    /**
     * Update peak-burst-size by ID
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, peakBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update peak-burst-size by ID (asynchronously)
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, String localId, CapacityValue peakBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, peakBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, String localId, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(String uuid, String localId, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'peakInformationRate' is set
        if (peakInformationRate == null) {
            throw new ApiException("Missing the required parameter 'peakInformationRate' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, localId, peakInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update peak-information-rate by ID
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, localId, peakInformationRate);
    }

    /**
     * Update peak-information-rate by ID
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, peakInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update peak-information-rate by ID (asynchronously)
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, String localId, CapacityValue peakInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, peakInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdCall(String uuid, String localId, Capacity capacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = capacity;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdValidateBeforeCall(String uuid, String localId, Capacity capacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'capacity' is set
        if (capacity == null) {
            throw new ApiException("Missing the required parameter 'capacity' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdCall(uuid, localId, capacity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update capacity by ID
     * Update operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(String uuid, String localId, Capacity capacity) throws ApiException {
        updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdWithHttpInfo(uuid, localId, capacity);
    }

    /**
     * Update capacity by ID
     * Update operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdWithHttpInfo(String uuid, String localId, Capacity capacity) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, capacity, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update capacity by ID (asynchronously)
     * Update operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdAsync(String uuid, String localId, Capacity capacity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, capacity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdCall(String uuid, String localId, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = totalSize;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'totalSize' is set
        if (totalSize == null) {
            throw new ApiException("Missing the required parameter 'totalSize' when calling updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdCall(uuid, localId, totalSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update total-size by ID
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, localId, totalSize);
    }

    /**
     * Update total-size by ID
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, totalSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update total-size by ID (asynchronously)
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdAsync(String uuid, String localId, CapacityValue totalSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, totalSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointEndPointByIdCall(String uuid, String localId, PathServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = endPoint;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, PathServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextPathComputationContextPathCompServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'endPoint' is set
        if (endPoint == null) {
            throw new ApiException("Missing the required parameter 'endPoint' when calling updateContextPathComputationContextPathCompServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointEndPointByIdCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update end-point by ID
     * Update operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceEndPointEndPointById(String uuid, String localId, PathServiceEndPoint endPoint) throws ApiException {
        updateContextPathComputationContextPathCompServiceEndPointEndPointByIdWithHttpInfo(uuid, localId, endPoint);
    }

    /**
     * Update end-point by ID
     * Update operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId, PathServiceEndPoint endPoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update end-point by ID (asynchronously)
     * Update operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointEndPointByIdAsync(String uuid, String localId, PathServiceEndPoint endPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextPathComputationContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextPathComputationContextPathCompServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextPathComputationContextPathCompServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointNameNameByIdCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceEndPointNameNameById(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        updateContextPathComputationContextPathCompServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdCall(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = arofServiceInterfacePointSpec;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/arof-service-interface-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'arofServiceInterfacePointSpec' is set
        if (arofServiceInterfacePointSpec == null) {
            throw new ApiException("Missing the required parameter 'arofServiceInterfacePointSpec' when calling updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdCall(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update arof-service-interface-point-spec by ID
     * Update operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec) throws ApiException {
        updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec);
    }

    /**
     * Update arof-service-interface-point-spec by ID
     * Update operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update arof-service-interface-point-spec by ID (asynchronously)
     * Update operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdCall(uuid, localId, serviceInterfacePointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name) throws ApiException {
        updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint) throws ApiException {
        updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint);
    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update service-interface-point by ID (asynchronously)
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextPathComputationContextPathCompServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextPathComputationContextPathCompServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        updateContextPathComputationContextPathCompServiceNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/objective-function/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdCall(String uuid, PathObjectiveFunction objectiveFunction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = objectiveFunction;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/objective-function/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(String uuid, PathObjectiveFunction objectiveFunction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById(Async)");
        }
        
        // verify the required parameter 'objectiveFunction' is set
        if (objectiveFunction == null) {
            throw new ApiException("Missing the required parameter 'objectiveFunction' when calling updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdCall(uuid, objectiveFunction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update objective-function by ID
     * Update operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById(String uuid, PathObjectiveFunction objectiveFunction) throws ApiException {
        updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdWithHttpInfo(uuid, objectiveFunction);
    }

    /**
     * Update objective-function by ID
     * Update operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdWithHttpInfo(String uuid, PathObjectiveFunction objectiveFunction) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(uuid, objectiveFunction, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update objective-function by ID (asynchronously)
     * Update operation of resource: objective-function
     * @param uuid ID of uuid (required)
     * @param objectiveFunction objective-functionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdAsync(String uuid, PathObjectiveFunction objectiveFunction, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdValidateBeforeCall(uuid, objectiveFunction, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/optimization-constraint/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdCall(String uuid, PathOptimizationConstraint optimizationConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = optimizationConstraint;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/optimization-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(String uuid, PathOptimizationConstraint optimizationConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById(Async)");
        }
        
        // verify the required parameter 'optimizationConstraint' is set
        if (optimizationConstraint == null) {
            throw new ApiException("Missing the required parameter 'optimizationConstraint' when calling updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdCall(uuid, optimizationConstraint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update optimization-constraint by ID
     * Update operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById(String uuid, PathOptimizationConstraint optimizationConstraint) throws ApiException {
        updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdWithHttpInfo(uuid, optimizationConstraint);
    }

    /**
     * Update optimization-constraint by ID
     * Update operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdWithHttpInfo(String uuid, PathOptimizationConstraint optimizationConstraint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(uuid, optimizationConstraint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update optimization-constraint by ID (asynchronously)
     * Update operation of resource: optimization-constraint
     * @param uuid ID of uuid (required)
     * @param optimizationConstraint optimization-constraintbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdAsync(String uuid, PathOptimizationConstraint optimizationConstraint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdValidateBeforeCall(uuid, optimizationConstraint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServicePathCompServiceById
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServicePathCompServiceByIdCall(String uuid, PathComputationService pathCompService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pathCompService;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServicePathCompServiceByIdValidateBeforeCall(String uuid, PathComputationService pathCompService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServicePathCompServiceById(Async)");
        }
        
        // verify the required parameter 'pathCompService' is set
        if (pathCompService == null) {
            throw new ApiException("Missing the required parameter 'pathCompService' when calling updateContextPathComputationContextPathCompServicePathCompServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServicePathCompServiceByIdCall(uuid, pathCompService, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update path-comp-service by ID
     * Update operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServicePathCompServiceById(String uuid, PathComputationService pathCompService) throws ApiException {
        updateContextPathComputationContextPathCompServicePathCompServiceByIdWithHttpInfo(uuid, pathCompService);
    }

    /**
     * Update path-comp-service by ID
     * Update operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServicePathCompServiceByIdWithHttpInfo(String uuid, PathComputationService pathCompService) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, pathCompService, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update path-comp-service by ID (asynchronously)
     * Update operation of resource: path-comp-service
     * @param uuid ID of uuid (required)
     * @param pathCompService path-comp-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServicePathCompServiceByIdAsync(String uuid, PathComputationService pathCompService, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServicePathCompServiceByIdValidateBeforeCall(uuid, pathCompService, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, CostCharacteristic costCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = costCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String costName, CostCharacteristic costCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costCharacteristic' is set
        if (costCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'costCharacteristic' when calling updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdCall(uuid, costName, costCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update cost-characteristic by ID
     * Update operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName, costCharacteristic);
    }

    /**
     * Update cost-characteristic by ID
     * Update operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, costCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update cost-characteristic by ID (asynchronously)
     * Update operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, CostCharacteristic costCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, costCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = latencyCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'latencyCharacteristic' is set
        if (latencyCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'latencyCharacteristic' when calling updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, latencyCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update latency-characteristic by ID
     * Update operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName, latencyCharacteristic);
    }

    /**
     * Update latency-characteristic by ID
     * Update operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, latencyCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update latency-characteristic by ID (asynchronously)
     * Update operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, latencyCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = riskDiversityCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/risk-diversity-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskDiversityCharacteristic' is set
        if (riskDiversityCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'riskDiversityCharacteristic' when calling updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update risk-diversity-characteristic by ID
     * Update operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic) throws ApiException {
        updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(uuid, riskCharacteristicName, riskDiversityCharacteristic);
    }

    /**
     * Update risk-diversity-characteristic by ID
     * Update operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update risk-diversity-characteristic by ID (asynchronously)
     * Update operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdAsync(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdCall(String uuid, RoutingConstraint routingConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = routingConstraint;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/routing-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(String uuid, RoutingConstraint routingConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById(Async)");
        }
        
        // verify the required parameter 'routingConstraint' is set
        if (routingConstraint == null) {
            throw new ApiException("Missing the required parameter 'routingConstraint' when calling updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdCall(uuid, routingConstraint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update routing-constraint by ID
     * Update operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById(String uuid, RoutingConstraint routingConstraint) throws ApiException {
        updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdWithHttpInfo(uuid, routingConstraint);
    }

    /**
     * Update routing-constraint by ID
     * Update operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdWithHttpInfo(String uuid, RoutingConstraint routingConstraint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(uuid, routingConstraint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update routing-constraint by ID (asynchronously)
     * Update operation of resource: routing-constraint
     * @param uuid ID of uuid (required)
     * @param routingConstraint routing-constraintbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdAsync(String uuid, RoutingConstraint routingConstraint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdValidateBeforeCall(uuid, routingConstraint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById
     * @param uuid ID of uuid (required)
     * @param topologyConstraint topology-constraintbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdCall(String uuid, TopologyConstraint topologyConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = topologyConstraint;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/path-comp-service/{uuid}/topology-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdValidateBeforeCall(String uuid, TopologyConstraint topologyConstraint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById(Async)");
        }
        
        // verify the required parameter 'topologyConstraint' is set
        if (topologyConstraint == null) {
            throw new ApiException("Missing the required parameter 'topologyConstraint' when calling updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdCall(uuid, topologyConstraint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update topology-constraint by ID
     * Update operation of resource: topology-constraint
     * @param uuid ID of uuid (required)
     * @param topologyConstraint topology-constraintbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById(String uuid, TopologyConstraint topologyConstraint) throws ApiException {
        updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdWithHttpInfo(uuid, topologyConstraint);
    }

    /**
     * Update topology-constraint by ID
     * Update operation of resource: topology-constraint
     * @param uuid ID of uuid (required)
     * @param topologyConstraint topology-constraintbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdWithHttpInfo(String uuid, TopologyConstraint topologyConstraint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdValidateBeforeCall(uuid, topologyConstraint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update topology-constraint by ID (asynchronously)
     * Update operation of resource: topology-constraint
     * @param uuid ID of uuid (required)
     * @param topologyConstraint topology-constraintbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdAsync(String uuid, TopologyConstraint topologyConstraint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdValidateBeforeCall(uuid, topologyConstraint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextPathComputationContextPathComputationContextById
     * @param pathComputationContext path-computation-contextbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathComputationContextByIdCall(PathComputationContext pathComputationContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pathComputationContext;

        // create path and map variables
        String localVarPath = "/config/context/path-computation-context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextPathComputationContextPathComputationContextByIdValidateBeforeCall(PathComputationContext pathComputationContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pathComputationContext' is set
        if (pathComputationContext == null) {
            throw new ApiException("Missing the required parameter 'pathComputationContext' when calling updateContextPathComputationContextPathComputationContextById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathComputationContextByIdCall(pathComputationContext, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update path-computation-context by ID
     * Update operation of resource: path-computation-context
     * @param pathComputationContext path-computation-contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextPathComputationContextPathComputationContextById(PathComputationContext pathComputationContext) throws ApiException {
        updateContextPathComputationContextPathComputationContextByIdWithHttpInfo(pathComputationContext);
    }

    /**
     * Update path-computation-context by ID
     * Update operation of resource: path-computation-context
     * @param pathComputationContext path-computation-contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextPathComputationContextPathComputationContextByIdWithHttpInfo(PathComputationContext pathComputationContext) throws ApiException {
        com.squareup.okhttp.Call call = updateContextPathComputationContextPathComputationContextByIdValidateBeforeCall(pathComputationContext, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update path-computation-context by ID (asynchronously)
     * Update operation of resource: path-computation-context
     * @param pathComputationContext path-computation-contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextPathComputationContextPathComputationContextByIdAsync(PathComputationContext pathComputationContext, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextPathComputationContextPathComputationContextByIdValidateBeforeCall(pathComputationContext, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
