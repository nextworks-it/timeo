/*
 * tapi-arof API
 * tapi-arof API generated from tapi-arof.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ArofConnectionEndPointSpec;
import io.swagger.client.model.ArofPoolSchema;
import io.swagger.client.model.ArofPropertiesPac;
import io.swagger.client.model.ArofServiceInterfacePointSpec;
import io.swagger.client.model.BandwidthProfile;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.CapacityValue;
import io.swagger.client.model.Connection;
import io.swagger.client.model.ConnectionEndPointRef;
import io.swagger.client.model.ConnectionEndPointSchema;
import io.swagger.client.model.ConnectionRef;
import io.swagger.client.model.ConnectivityContext;
import io.swagger.client.model.ConnectivityService;
import io.swagger.client.model.ConnectivityServiceEndPoint;
import io.swagger.client.model.ConnectivityServiceRef;
import io.swagger.client.model.CostCharacteristic;
import io.swagger.client.model.FrequencyConstraint;
import io.swagger.client.model.LatencyCharacteristic;
import io.swagger.client.model.LinkRef;
import io.swagger.client.model.ModelSwitch;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.NodeEdgePointRef;
import io.swagger.client.model.NodeRef;
import io.swagger.client.model.PathRef;
import io.swagger.client.model.ResilienceType;
import io.swagger.client.model.RiskCharacteristic;
import io.swagger.client.model.Route;
import io.swagger.client.model.RouteRef;
import io.swagger.client.model.ServiceInterfacePointRef;
import io.swagger.client.model.ServiceInterfacePointSchema;
import io.swagger.client.model.SpectrumBand;
import io.swagger.client.model.SwitchControl;
import io.swagger.client.model.SwitchControlRef;
import io.swagger.client.model.TimeRange;
import io.swagger.client.model.TopologyRef;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectivityContextApi {
    private ApiClient apiClient;

    public ConnectivityContextApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectivityContextApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(String uuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = arofConnectionEndPointSpec;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'arofConnectionEndPointSpec' is set
        if (arofConnectionEndPointSpec == null) {
            throw new ApiException("Missing the required parameter 'arofConnectionEndPointSpec' when calling createContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(uuid, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create arof-connection-end-point-spec by ID
     * Create operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(String uuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        createContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(uuid, connectionEndPointUuid, arofConnectionEndPointSpec);
    }

    /**
     * Create arof-connection-end-point-spec by ID
     * Create operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(String uuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, connectionEndPointUuid, arofConnectionEndPointSpec, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create arof-connection-end-point-spec by ID (asynchronously)
     * Create operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdAsync(String uuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdCall(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectionEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPoint' is set
        if (connectionEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPoint' when calling createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdCall(uuid, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create connection-end-point by ID
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, connectionEndPointUuid, connectionEndPoint);
    }

    /**
     * Create connection-end-point by ID
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, connectionEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create connection-end-point by ID (asynchronously)
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdAsync(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectionConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectionConnectionEndPointNameNameByIdCall(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextConnectivityContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextConnectivityContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextConnectivityContextConnectionConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionConnectionEndPointNameNameByIdCall(uuid, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectionConnectionEndPointNameNameById(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        createContextConnectivityContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(uuid, connectionEndPointUuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectionConnectionEndPointNameNameByIdAsync(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = arofConnectionEndPointSpec;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'arofConnectionEndPointSpec' is set
        if (arofConnectionEndPointSpec == null) {
            throw new ApiException("Missing the required parameter 'arofConnectionEndPointSpec' when calling createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create arof-connection-end-point-spec by ID
     * Create operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec);
    }

    /**
     * Create arof-connection-end-point-spec by ID
     * Create operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create arof-connection-end-point-spec by ID (asynchronously)
     * Create operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdAsync(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectionEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPoint' is set
        if (connectionEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPoint' when calling createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create connection-end-point by ID
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, connectionEndPoint);
    }

    /**
     * Create connection-end-point by ID
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create connection-end-point by ID (asynchronously)
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdAsync(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectionRouteConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdCall(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdCall(uuid, localId, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        createContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdAsync(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityContextById
     * @param connectivityContext connectivity-contextbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityContextByIdCall(ConnectivityContext connectivityContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectivityContext;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityContextByIdValidateBeforeCall(ConnectivityContext connectivityContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'connectivityContext' is set
        if (connectivityContext == null) {
            throw new ApiException("Missing the required parameter 'connectivityContext' when calling createContextConnectivityContextConnectivityContextById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityContextByIdCall(connectivityContext, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create connectivity-context by ID
     * Create operation of resource: connectivity-context
     * @param connectivityContext connectivity-contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityContextById(ConnectivityContext connectivityContext) throws ApiException {
        createContextConnectivityContextConnectivityContextByIdWithHttpInfo(connectivityContext);
    }

    /**
     * Create connectivity-context by ID
     * Create operation of resource: connectivity-context
     * @param connectivityContext connectivity-contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityContextByIdWithHttpInfo(ConnectivityContext connectivityContext) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityContextByIdValidateBeforeCall(connectivityContext, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create connectivity-context by ID (asynchronously)
     * Create operation of resource: connectivity-context
     * @param connectivityContext connectivity-contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityContextByIdAsync(ConnectivityContext connectivityContext, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityContextByIdValidateBeforeCall(connectivityContext, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceConnectivityServiceById
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(String uuid, ConnectivityService connectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectivityService;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(String uuid, ConnectivityService connectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceConnectivityServiceById(Async)");
        }
        
        // verify the required parameter 'connectivityService' is set
        if (connectivityService == null) {
            throw new ApiException("Missing the required parameter 'connectivityService' when calling createContextConnectivityContextConnectivityServiceConnectivityServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(uuid, connectivityService, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create connectivity-service by ID
     * Create operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceConnectivityServiceById(String uuid, ConnectivityService connectivityService) throws ApiException {
        createContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(uuid, connectivityService);
    }

    /**
     * Create connectivity-service by ID
     * Create operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(String uuid, ConnectivityService connectivityService) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, connectivityService, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create connectivity-service by ID (asynchronously)
     * Create operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceConnectivityServiceByIdAsync(String uuid, ConnectivityService connectivityService, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, connectivityService, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(String uuid, ConnectivityServiceRef corouteInclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = corouteInclusion;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/coroute-inclusion/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(String uuid, ConnectivityServiceRef corouteInclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(Async)");
        }
        
        // verify the required parameter 'corouteInclusion' is set
        if (corouteInclusion == null) {
            throw new ApiException("Missing the required parameter 'corouteInclusion' when calling createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(uuid, corouteInclusion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create coroute-inclusion by ID
     * Create operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(String uuid, ConnectivityServiceRef corouteInclusion) throws ApiException {
        createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(uuid, corouteInclusion);
    }

    /**
     * Create coroute-inclusion by ID
     * Create operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(String uuid, ConnectivityServiceRef corouteInclusion) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(uuid, corouteInclusion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create coroute-inclusion by ID (asynchronously)
     * Create operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdAsync(String uuid, ConnectivityServiceRef corouteInclusion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(uuid, corouteInclusion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, CostCharacteristic costCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = costCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String costName, CostCharacteristic costCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costCharacteristic' is set
        if (costCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'costCharacteristic' when calling createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, costCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create cost-characteristic by ID
     * Create operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName, costCharacteristic);
    }

    /**
     * Create cost-characteristic by ID
     * Create operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, costCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create cost-characteristic by ID (asynchronously)
     * Create operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, CostCharacteristic costCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, costCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = diversityExclusion;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/diversity-exclusion/{connectivity_service_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connectivity_service_uuid" + "\\}", apiClient.escapeString(connectivityServiceUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceUuid' is set
        if (connectivityServiceUuid == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceUuid' when calling createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'diversityExclusion' is set
        if (diversityExclusion == null) {
            throw new ApiException("Missing the required parameter 'diversityExclusion' when calling createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceUuid, diversityExclusion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create diversity-exclusion by ID
     * Create operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion) throws ApiException {
        createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(uuid, connectivityServiceUuid, diversityExclusion);
    }

    /**
     * Create diversity-exclusion by ID
     * Create operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceUuid, diversityExclusion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create diversity-exclusion by ID (asynchronously)
     * Create operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdAsync(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceUuid, diversityExclusion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, String localId, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bandwidthProfile;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(String uuid, String localId, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'bandwidthProfile' is set
        if (bandwidthProfile == null) {
            throw new ApiException("Missing the required parameter 'bandwidthProfile' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, localId, bandwidthProfile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create bandwidth-profile by ID
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, localId, bandwidthProfile);
    }

    /**
     * Create bandwidth-profile by ID
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, bandwidthProfile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create bandwidth-profile by ID (asynchronously)
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, String localId, BandwidthProfile bandwidthProfile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, bandwidthProfile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, String localId, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'committedBurstSize' is set
        if (committedBurstSize == null) {
            throw new ApiException("Missing the required parameter 'committedBurstSize' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, localId, committedBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create committed-burst-size by ID
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, localId, committedBurstSize);
    }

    /**
     * Create committed-burst-size by ID
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, committedBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create committed-burst-size by ID (asynchronously)
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, String localId, CapacityValue committedBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, committedBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, String localId, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(String uuid, String localId, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'committedInformationRate' is set
        if (committedInformationRate == null) {
            throw new ApiException("Missing the required parameter 'committedInformationRate' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, localId, committedInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create committed-information-rate by ID
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, localId, committedInformationRate);
    }

    /**
     * Create committed-information-rate by ID
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, committedInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create committed-information-rate by ID (asynchronously)
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, String localId, CapacityValue committedInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, committedInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, String localId, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'peakBurstSize' is set
        if (peakBurstSize == null) {
            throw new ApiException("Missing the required parameter 'peakBurstSize' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, localId, peakBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create peak-burst-size by ID
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, localId, peakBurstSize);
    }

    /**
     * Create peak-burst-size by ID
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, peakBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create peak-burst-size by ID (asynchronously)
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, String localId, CapacityValue peakBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, peakBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, String localId, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(String uuid, String localId, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'peakInformationRate' is set
        if (peakInformationRate == null) {
            throw new ApiException("Missing the required parameter 'peakInformationRate' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, localId, peakInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create peak-information-rate by ID
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, localId, peakInformationRate);
    }

    /**
     * Create peak-information-rate by ID
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, peakInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create peak-information-rate by ID (asynchronously)
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, String localId, CapacityValue peakInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, peakInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdCall(String uuid, String localId, Capacity capacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = capacity;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(String uuid, String localId, Capacity capacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'capacity' is set
        if (capacity == null) {
            throw new ApiException("Missing the required parameter 'capacity' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdCall(uuid, localId, capacity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create capacity by ID
     * Create operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(String uuid, String localId, Capacity capacity) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(uuid, localId, capacity);
    }

    /**
     * Create capacity by ID
     * Create operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(String uuid, String localId, Capacity capacity) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, capacity, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create capacity by ID (asynchronously)
     * Create operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdAsync(String uuid, String localId, Capacity capacity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, capacity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(String uuid, String localId, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = totalSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'totalSize' is set
        if (totalSize == null) {
            throw new ApiException("Missing the required parameter 'totalSize' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(uuid, localId, totalSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create total-size by ID
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, localId, totalSize);
    }

    /**
     * Create total-size by ID
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, totalSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create total-size by ID (asynchronously)
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdAsync(String uuid, String localId, CapacityValue totalSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, totalSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = arofConnectionEndPointSpec;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'arofConnectionEndPointSpec' is set
        if (arofConnectionEndPointSpec == null) {
            throw new ApiException("Missing the required parameter 'arofConnectionEndPointSpec' when calling createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create arof-connection-end-point-spec by ID
     * Create operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec);
    }

    /**
     * Create arof-connection-end-point-spec by ID
     * Create operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create arof-connection-end-point-spec by ID (asynchronously)
     * Create operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdAsync(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdCall(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectionEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPoint' is set
        if (connectionEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPoint' when calling createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create connection-end-point by ID
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, connectionEndPoint);
    }

    /**
     * Create connection-end-point by ID
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create connection-end-point by ID (asynchronously)
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdAsync(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdCall(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdCall(uuid, localId, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdAsync(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = endPoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'endPoint' is set
        if (endPoint == null) {
            throw new ApiException("Missing the required parameter 'endPoint' when calling createContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create end-point by ID
     * Create operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointEndPointById(String uuid, String localId, ConnectivityServiceEndPoint endPoint) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(uuid, localId, endPoint);
    }

    /**
     * Create end-point by ID
     * Create operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId, ConnectivityServiceEndPoint endPoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create end-point by ID (asynchronously)
     * Create operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointEndPointByIdAsync(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointNameNameById(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdCall(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = arofServiceInterfacePointSpec;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/arof-service-interface-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'arofServiceInterfacePointSpec' is set
        if (arofServiceInterfacePointSpec == null) {
            throw new ApiException("Missing the required parameter 'arofServiceInterfacePointSpec' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdCall(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create arof-service-interface-point-spec by ID
     * Create operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec);
    }

    /**
     * Create arof-service-interface-point-spec by ID
     * Create operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create arof-service-interface-point-spec by ID (asynchronously)
     * Create operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdCall(uuid, localId, serviceInterfacePointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, serviceInterfacePoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, localId, serviceInterfacePoint);
    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create service-interface-point by ID (asynchronously)
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0Call(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0ValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0Call(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0WithHttpInfo(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint);
    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0WithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0ValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create service-interface-point by ID (asynchronously)
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0Async(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0ValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = latencyCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'latencyCharacteristic' is set
        if (latencyCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'latencyCharacteristic' when calling createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, latencyCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create latency-characteristic by ID
     * Create operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName, latencyCharacteristic);
    }

    /**
     * Create latency-characteristic by ID
     * Create operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, latencyCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create latency-characteristic by ID (asynchronously)
     * Create operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, latencyCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        createContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bandwidthProfile;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(String uuid, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'bandwidthProfile' is set
        if (bandwidthProfile == null) {
            throw new ApiException("Missing the required parameter 'bandwidthProfile' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, bandwidthProfile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create bandwidth-profile by ID
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(String uuid, BandwidthProfile bandwidthProfile) throws ApiException {
        createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, bandwidthProfile);
    }

    /**
     * Create bandwidth-profile by ID
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, BandwidthProfile bandwidthProfile) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, bandwidthProfile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create bandwidth-profile by ID (asynchronously)
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, BandwidthProfile bandwidthProfile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, bandwidthProfile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(String uuid, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'committedBurstSize' is set
        if (committedBurstSize == null) {
            throw new ApiException("Missing the required parameter 'committedBurstSize' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, committedBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create committed-burst-size by ID
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, CapacityValue committedBurstSize) throws ApiException {
        createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, committedBurstSize);
    }

    /**
     * Create committed-burst-size by ID
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, CapacityValue committedBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, committedBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create committed-burst-size by ID (asynchronously)
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, CapacityValue committedBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, committedBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(String uuid, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'committedInformationRate' is set
        if (committedInformationRate == null) {
            throw new ApiException("Missing the required parameter 'committedInformationRate' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, committedInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create committed-information-rate by ID
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, CapacityValue committedInformationRate) throws ApiException {
        createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, committedInformationRate);
    }

    /**
     * Create committed-information-rate by ID
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, CapacityValue committedInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, committedInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create committed-information-rate by ID (asynchronously)
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, CapacityValue committedInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, committedInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(String uuid, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'peakBurstSize' is set
        if (peakBurstSize == null) {
            throw new ApiException("Missing the required parameter 'peakBurstSize' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, peakBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create peak-burst-size by ID
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, CapacityValue peakBurstSize) throws ApiException {
        createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, peakBurstSize);
    }

    /**
     * Create peak-burst-size by ID
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, CapacityValue peakBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, peakBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create peak-burst-size by ID (asynchronously)
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, CapacityValue peakBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, peakBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(String uuid, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'peakInformationRate' is set
        if (peakInformationRate == null) {
            throw new ApiException("Missing the required parameter 'peakInformationRate' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, peakInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create peak-information-rate by ID
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, CapacityValue peakInformationRate) throws ApiException {
        createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, peakInformationRate);
    }

    /**
     * Create peak-information-rate by ID
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, CapacityValue peakInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, peakInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create peak-information-rate by ID (asynchronously)
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, CapacityValue peakInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, peakInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(String uuid, Capacity requestedCapacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestedCapacity;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(String uuid, Capacity requestedCapacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(Async)");
        }
        
        // verify the required parameter 'requestedCapacity' is set
        if (requestedCapacity == null) {
            throw new ApiException("Missing the required parameter 'requestedCapacity' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(uuid, requestedCapacity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create requested-capacity by ID
     * Create operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(String uuid, Capacity requestedCapacity) throws ApiException {
        createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(uuid, requestedCapacity);
    }

    /**
     * Create requested-capacity by ID
     * Create operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(String uuid, Capacity requestedCapacity) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(uuid, requestedCapacity, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create requested-capacity by ID (asynchronously)
     * Create operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdAsync(String uuid, Capacity requestedCapacity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(uuid, requestedCapacity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(String uuid, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = totalSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(String uuid, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'totalSize' is set
        if (totalSize == null) {
            throw new ApiException("Missing the required parameter 'totalSize' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(uuid, totalSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create total-size by ID
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(String uuid, CapacityValue totalSize) throws ApiException {
        createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, totalSize);
    }

    /**
     * Create total-size by ID
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, CapacityValue totalSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, totalSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create total-size by ID (asynchronously)
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdAsync(String uuid, CapacityValue totalSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, totalSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(String uuid, ResilienceType resilienceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resilienceType;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/resilience-type/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(String uuid, ResilienceType resilienceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(Async)");
        }
        
        // verify the required parameter 'resilienceType' is set
        if (resilienceType == null) {
            throw new ApiException("Missing the required parameter 'resilienceType' when calling createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(uuid, resilienceType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create resilience-type by ID
     * Create operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(String uuid, ResilienceType resilienceType) throws ApiException {
        createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(uuid, resilienceType);
    }

    /**
     * Create resilience-type by ID
     * Create operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(String uuid, ResilienceType resilienceType) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(uuid, resilienceType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create resilience-type by ID (asynchronously)
     * Create operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdAsync(String uuid, ResilienceType resilienceType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(uuid, resilienceType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = riskDiversityCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/risk-diversity-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskDiversityCharacteristic' is set
        if (riskDiversityCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'riskDiversityCharacteristic' when calling createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create risk-diversity-characteristic by ID
     * Create operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic) throws ApiException {
        createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(uuid, riskCharacteristicName, riskDiversityCharacteristic);
    }

    /**
     * Create risk-diversity-characteristic by ID
     * Create operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create risk-diversity-characteristic by ID (asynchronously)
     * Create operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdAsync(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextConnectivityContextConnectivityServiceScheduleScheduleById
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceScheduleScheduleByIdCall(String uuid, TimeRange schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = schedule;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/schedule/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(String uuid, TimeRange schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceScheduleScheduleById(Async)");
        }
        
        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling createContextConnectivityContextConnectivityServiceScheduleScheduleById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceScheduleScheduleByIdCall(uuid, schedule, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create schedule by ID
     * Create operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceScheduleScheduleById(String uuid, TimeRange schedule) throws ApiException {
        createContextConnectivityContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(uuid, schedule);
    }

    /**
     * Create schedule by ID
     * Create operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(String uuid, TimeRange schedule) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(uuid, schedule, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create schedule by ID (asynchronously)
     * Create operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceScheduleScheduleByIdAsync(String uuid, TimeRange schedule, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(uuid, schedule, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete arof-connection-end-point-spec by ID
     * Delete operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(String uuid, String connectionEndPointUuid) throws ApiException {
        deleteContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(uuid, connectionEndPointUuid);
    }

    /**
     * Delete arof-connection-end-point-spec by ID
     * Delete operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete arof-connection-end-point-spec by ID (asynchronously)
     * Delete operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdAsync(String uuid, String connectionEndPointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete connection-end-point by ID
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(String uuid, String connectionEndPointUuid) throws ApiException {
        deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, connectionEndPointUuid);
    }

    /**
     * Delete connection-end-point by ID
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete connection-end-point by ID (asynchronously)
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdAsync(String uuid, String connectionEndPointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectionConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectionConnectionEndPointNameNameByIdCall(String uuid, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextConnectivityContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextConnectivityContextConnectionConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionConnectionEndPointNameNameByIdCall(uuid, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectionConnectionEndPointNameNameById(String uuid, String connectionEndPointUuid, String valueName) throws ApiException {
        deleteContextConnectivityContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(uuid, connectionEndPointUuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String connectionEndPointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectionConnectionEndPointNameNameByIdAsync(String uuid, String connectionEndPointUuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete arof-connection-end-point-spec by ID
     * Delete operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        deleteContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(uuid, localId, connectionEndPointUuid);
    }

    /**
     * Delete arof-connection-end-point-spec by ID
     * Delete operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete arof-connection-end-point-spec by ID (asynchronously)
     * Delete operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete connection-end-point by ID
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid);
    }

    /**
     * Delete connection-end-point by ID
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete connection-end-point by ID (asynchronously)
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdCall(String uuid, String localId, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdCall(uuid, localId, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(String uuid, String localId, String connectionEndPointUuid, String valueName) throws ApiException {
        deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdAsync(String uuid, String localId, String connectionEndPointUuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityContextById
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityContextByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityContextByIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityContextByIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete connectivity-context by ID
     * Delete operation of resource: connectivity-context
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityContextById() throws ApiException {
        deleteContextConnectivityContextConnectivityContextByIdWithHttpInfo();
    }

    /**
     * Delete connectivity-context by ID
     * Delete operation of resource: connectivity-context
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityContextByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityContextByIdValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete connectivity-context by ID (asynchronously)
     * Delete operation of resource: connectivity-context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityContextByIdAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityContextByIdValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceConnectivityServiceById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceConnectivityServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete connectivity-service by ID
     * Delete operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceConnectivityServiceById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(uuid);
    }

    /**
     * Delete connectivity-service by ID
     * Delete operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete connectivity-service by ID (asynchronously)
     * Delete operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/coroute-inclusion/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete coroute-inclusion by ID
     * Delete operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(uuid);
    }

    /**
     * Delete coroute-inclusion by ID
     * Delete operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete coroute-inclusion by ID (asynchronously)
     * Delete operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete cost-characteristic by ID
     * Delete operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(String uuid, String costName) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName);
    }

    /**
     * Delete cost-characteristic by ID
     * Delete operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete cost-characteristic by ID (asynchronously)
     * Delete operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(String uuid, String connectivityServiceUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/diversity-exclusion/{connectivity_service_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connectivity_service_uuid" + "\\}", apiClient.escapeString(connectivityServiceUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(String uuid, String connectivityServiceUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceUuid' is set
        if (connectivityServiceUuid == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceUuid' when calling deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete diversity-exclusion by ID
     * Delete operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(String uuid, String connectivityServiceUuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(uuid, connectivityServiceUuid);
    }

    /**
     * Delete diversity-exclusion by ID
     * Delete operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(String uuid, String connectivityServiceUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete diversity-exclusion by ID (asynchronously)
     * Delete operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdAsync(String uuid, String connectivityServiceUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete bandwidth-profile by ID
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete bandwidth-profile by ID
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete bandwidth-profile by ID (asynchronously)
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete committed-burst-size by ID
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete committed-burst-size by ID
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete committed-burst-size by ID (asynchronously)
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete committed-information-rate by ID
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete committed-information-rate by ID
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete committed-information-rate by ID (asynchronously)
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete peak-burst-size by ID
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete peak-burst-size by ID
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete peak-burst-size by ID (asynchronously)
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete peak-information-rate by ID
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete peak-information-rate by ID
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete peak-information-rate by ID (asynchronously)
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete capacity by ID
     * Delete operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete capacity by ID
     * Delete operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete capacity by ID (asynchronously)
     * Delete operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete total-size by ID
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete total-size by ID
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete total-size by ID (asynchronously)
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete arof-connection-end-point-spec by ID
     * Delete operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(uuid, localId, connectionEndPointUuid);
    }

    /**
     * Delete arof-connection-end-point-spec by ID
     * Delete operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete arof-connection-end-point-spec by ID (asynchronously)
     * Delete operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete connection-end-point by ID
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid);
    }

    /**
     * Delete connection-end-point by ID
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete connection-end-point by ID (asynchronously)
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdCall(String uuid, String localId, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdCall(uuid, localId, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(String uuid, String localId, String connectionEndPointUuid, String valueName) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdAsync(String uuid, String localId, String connectionEndPointUuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete end-point by ID
     * Delete operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointEndPointById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete end-point by ID
     * Delete operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete end-point by ID (asynchronously)
     * Delete operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointNameNameById(String uuid, String localId, String valueName) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/arof-service-interface-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete arof-service-interface-point-spec by ID
     * Delete operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
    }

    /**
     * Delete arof-service-interface-point-spec by ID
     * Delete operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete arof-service-interface-point-spec by ID (asynchronously)
     * Delete operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdCall(uuid, localId, serviceInterfacePointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(String uuid, String localId, String serviceInterfacePointUuid, String valueName) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete service-interface-point by ID (asynchronously)
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0Call(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0ValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0Call(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0WithHttpInfo(uuid, localId, serviceInterfacePointUuid);
    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0WithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0ValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete service-interface-point by ID (asynchronously)
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0Async(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0ValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete latency-characteristic by ID
     * Delete operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName);
    }

    /**
     * Delete latency-characteristic by ID
     * Delete operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete latency-characteristic by ID (asynchronously)
     * Delete operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceNameNameById(String uuid, String valueName) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(uuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceNameNameByIdAsync(String uuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete bandwidth-profile by ID
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid);
    }

    /**
     * Delete bandwidth-profile by ID
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete bandwidth-profile by ID (asynchronously)
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete committed-burst-size by ID
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid);
    }

    /**
     * Delete committed-burst-size by ID
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete committed-burst-size by ID (asynchronously)
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete committed-information-rate by ID
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid);
    }

    /**
     * Delete committed-information-rate by ID
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete committed-information-rate by ID (asynchronously)
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete peak-burst-size by ID
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid);
    }

    /**
     * Delete peak-burst-size by ID
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete peak-burst-size by ID (asynchronously)
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete peak-information-rate by ID
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid);
    }

    /**
     * Delete peak-information-rate by ID
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete peak-information-rate by ID (asynchronously)
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete requested-capacity by ID
     * Delete operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(uuid);
    }

    /**
     * Delete requested-capacity by ID
     * Delete operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete requested-capacity by ID (asynchronously)
     * Delete operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete total-size by ID
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid);
    }

    /**
     * Delete total-size by ID
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete total-size by ID (asynchronously)
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/resilience-type/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete resilience-type by ID
     * Delete operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(uuid);
    }

    /**
     * Delete resilience-type by ID
     * Delete operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete resilience-type by ID (asynchronously)
     * Delete operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(String uuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/risk-diversity-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(String uuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete risk-diversity-characteristic by ID
     * Delete operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(String uuid, String riskCharacteristicName) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(uuid, riskCharacteristicName);
    }

    /**
     * Delete risk-diversity-characteristic by ID
     * Delete operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(String uuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete risk-diversity-characteristic by ID (asynchronously)
     * Delete operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdAsync(String uuid, String riskCharacteristicName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextConnectivityContextConnectivityServiceScheduleScheduleById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/schedule/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceScheduleScheduleById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete schedule by ID
     * Delete operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceScheduleScheduleById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(uuid);
    }

    /**
     * Delete schedule by ID
     * Delete operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete schedule by ID (asynchronously)
     * Delete operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnection
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection
     * Retrieve operation of resource: connection
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionConnection() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionConnectionWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve connection
     * Retrieve operation of resource: connection
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionConnectionWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection (asynchronously)
     * Retrieve operation of resource: connection
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnectionById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection by ID
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @return Connection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Connection retrieveContextConnectivityContextConnectionConnectionById(String uuid) throws ApiException {
        ApiResponse<Connection> resp = retrieveContextConnectivityContextConnectionConnectionByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve connection by ID
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Connection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Connection> retrieveContextConnectivityContextConnectionConnectionByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionByIdValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection by ID (asynchronously)
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionByIdAsync(String uuid, final ApiCallback<Connection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/aggregated-connection-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-connection-end-point
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointWithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-connection-end-point
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-connection-end-point (asynchronously)
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointAsync(String uuid, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdCall(String uuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/aggregated-connection-end-point/{topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdCall(uuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-connection-end-point by ID
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ConnectionEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointRef retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(String uuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointRef> resp = retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdWithHttpInfo(uuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-connection-end-point by ID
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointRef> retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdWithHttpInfo(String uuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdAsync(String uuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ApiCallback<ConnectionEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve arof-connection-end-point-spec
     * Retrieve operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ArofConnectionEndPointSpec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArofConnectionEndPointSpec retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ArofConnectionEndPointSpec> resp = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecWithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve arof-connection-end-point-spec
     * Retrieve operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ArofConnectionEndPointSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArofConnectionEndPointSpec> retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ArofConnectionEndPointSpec>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve arof-connection-end-point-spec (asynchronously)
     * Retrieve operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecAsync(String uuid, String connectionEndPointUuid, final ApiCallback<ArofConnectionEndPointSpec> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArofConnectionEndPointSpec>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/media-channel/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve media-channel
     * Retrieve operation of resource: media-channel
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ArofPropertiesPac
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArofPropertiesPac retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ArofPropertiesPac> resp = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelWithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve media-channel
     * Retrieve operation of resource: media-channel
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ArofPropertiesPac&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArofPropertiesPac> retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ArofPropertiesPac>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve media-channel (asynchronously)
     * Retrieve operation of resource: media-channel
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelAsync(String uuid, String connectionEndPointUuid, final ApiCallback<ArofPropertiesPac> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArofPropertiesPac>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/media-channel/occupied-spectrum/frequency-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve frequency-constraint
     * Retrieve operation of resource: frequency-constraint
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return FrequencyConstraint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FrequencyConstraint retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<FrequencyConstraint> resp = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintWithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve frequency-constraint
     * Retrieve operation of resource: frequency-constraint
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;FrequencyConstraint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FrequencyConstraint> retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<FrequencyConstraint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve frequency-constraint (asynchronously)
     * Retrieve operation of resource: frequency-constraint
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintAsync(String uuid, String connectionEndPointUuid, final ApiCallback<FrequencyConstraint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FrequencyConstraint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/media-channel/occupied-spectrum/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve occupied-spectrum
     * Retrieve operation of resource: occupied-spectrum
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return SpectrumBand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpectrumBand retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<SpectrumBand> resp = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumWithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve occupied-spectrum
     * Retrieve operation of resource: occupied-spectrum
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;SpectrumBand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpectrumBand> retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<SpectrumBand>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve occupied-spectrum (asynchronously)
     * Retrieve operation of resource: occupied-spectrum
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumAsync(String uuid, String connectionEndPointUuid, final ApiCallback<SpectrumBand> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpectrumBand>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/client-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve client-node-edge-point
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointWithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve client-node-edge-point
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve client-node-edge-point (asynchronously)
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointAsync(String uuid, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdCall(String uuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/client-node-edge-point/{topology_uuid_node_uuid_node_edge_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdCall(uuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve client-node-edge-point by ID
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return NodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEdgePointRef retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(String uuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        ApiResponse<NodeEdgePointRef> resp = retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdWithHttpInfo(uuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve client-node-edge-point by ID
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return ApiResponse&lt;NodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEdgePointRef> retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdWithHttpInfo(String uuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(uuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve client-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdAsync(String uuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ApiCallback<NodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(uuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPoint
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPoint(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdCall(String uuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdCall(uuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ConnectionEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointRef retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(String uuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointRef> resp = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointRef> retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdAsync(String uuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ApiCallback<ConnectionEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0Call(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0ValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0Call(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ConnectionEndPointSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointSchema retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointSchema> resp = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0WithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointSchema> retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0WithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0ValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0Async(String uuid, String connectionEndPointUuid, final ApiCallback<ConnectionEndPointSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0ValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnectionEndPointNameName
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointNameNameCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointNameNameValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointNameName(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointNameNameCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionConnectionEndPointNameName(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionConnectionEndPointNameNameWithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionConnectionEndPointNameNameWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointNameNameValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointNameNameAsync(String uuid, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointNameNameValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointNameNameByIdCall(String uuid, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectionConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointNameNameByIdCall(uuid, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectionConnectionEndPointNameNameById(String uuid, String connectionEndPointUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(uuid, connectionEndPointUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String connectionEndPointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointNameNameByIdAsync(String uuid, String connectionEndPointUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/parent-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(String uuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve parent-node-edge-point
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return NodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEdgePointRef retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(String uuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<NodeEdgePointRef> resp = retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointWithHttpInfo(uuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve parent-node-edge-point
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;NodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEdgePointRef> retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointWithHttpInfo(String uuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(uuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve parent-node-edge-point (asynchronously)
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointAsync(String uuid, String connectionEndPointUuid, final ApiCallback<NodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(uuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionLowerConnectionLowerConnection
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/lower-connection/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionLowerConnectionLowerConnection(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve lower-connection
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionLowerConnectionLowerConnection(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve lower-connection
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve lower-connection (asynchronously)
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionById
     * @param uuid ID of uuid (required)
     * @param connectionUuid ID of connection_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdCall(String uuid, String connectionUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/lower-connection/{connection_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_uuid" + "\\}", apiClient.escapeString(connectionUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdValidateBeforeCall(String uuid, String connectionUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionById(Async)");
        }
        
        // verify the required parameter 'connectionUuid' is set
        if (connectionUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionUuid' when calling retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdCall(uuid, connectionUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve lower-connection by ID
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @param connectionUuid ID of connection_uuid (required)
     * @return ConnectionRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionRef retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionById(String uuid, String connectionUuid) throws ApiException {
        ApiResponse<ConnectionRef> resp = retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdWithHttpInfo(uuid, connectionUuid);
        return resp.getData();
    }

    /**
     * Retrieve lower-connection by ID
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @param connectionUuid ID of connection_uuid (required)
     * @return ApiResponse&lt;ConnectionRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionRef> retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdWithHttpInfo(String uuid, String connectionUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdValidateBeforeCall(uuid, connectionUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve lower-connection by ID (asynchronously)
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @param connectionUuid ID of connection_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdAsync(String uuid, String connectionUuid, final ApiCallback<ConnectionRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdValidateBeforeCall(uuid, connectionUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectionNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectionNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectionNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectionNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/aggregated-connection-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-connection-end-point
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-connection-end-point
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-connection-end-point (asynchronously)
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdCall(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/aggregated-connection-end-point/{topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdCall(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-connection-end-point by ID
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ConnectionEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointRef retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointRef> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-connection-end-point by ID
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointRef> retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdAsync(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ApiCallback<ConnectionEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve arof-connection-end-point-spec
     * Retrieve operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ArofConnectionEndPointSpec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArofConnectionEndPointSpec retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ArofConnectionEndPointSpec> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve arof-connection-end-point-spec
     * Retrieve operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ArofConnectionEndPointSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArofConnectionEndPointSpec> retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ArofConnectionEndPointSpec>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve arof-connection-end-point-spec (asynchronously)
     * Retrieve operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<ArofConnectionEndPointSpec> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArofConnectionEndPointSpec>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/media-channel/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve media-channel
     * Retrieve operation of resource: media-channel
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ArofPropertiesPac
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArofPropertiesPac retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ArofPropertiesPac> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve media-channel
     * Retrieve operation of resource: media-channel
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ArofPropertiesPac&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArofPropertiesPac> retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ArofPropertiesPac>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve media-channel (asynchronously)
     * Retrieve operation of resource: media-channel
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<ArofPropertiesPac> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArofPropertiesPac>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/media-channel/occupied-spectrum/frequency-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve frequency-constraint
     * Retrieve operation of resource: frequency-constraint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return FrequencyConstraint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FrequencyConstraint retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<FrequencyConstraint> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve frequency-constraint
     * Retrieve operation of resource: frequency-constraint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;FrequencyConstraint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FrequencyConstraint> retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<FrequencyConstraint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve frequency-constraint (asynchronously)
     * Retrieve operation of resource: frequency-constraint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<FrequencyConstraint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FrequencyConstraint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/media-channel/occupied-spectrum/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve occupied-spectrum
     * Retrieve operation of resource: occupied-spectrum
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return SpectrumBand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpectrumBand retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<SpectrumBand> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve occupied-spectrum
     * Retrieve operation of resource: occupied-spectrum
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;SpectrumBand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpectrumBand> retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<SpectrumBand>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve occupied-spectrum (asynchronously)
     * Retrieve operation of resource: occupied-spectrum
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<SpectrumBand> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpectrumBand>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/client-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve client-node-edge-point
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve client-node-edge-point
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve client-node-edge-point (asynchronously)
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdCall(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/client-node-edge-point/{topology_uuid_node_uuid_node_edge_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdCall(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve client-node-edge-point by ID
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return NodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEdgePointRef retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        ApiResponse<NodeEdgePointRef> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve client-node-edge-point by ID
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return ApiResponse&lt;NodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEdgePointRef> retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve client-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdAsync(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ApiCallback<NodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPoint(String uuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointAsync(String uuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ConnectionEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointRef retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointRef> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointRef> retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdAsync(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ApiCallback<ConnectionEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0Call(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0ValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0Call(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ConnectionEndPointSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointSchema retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointSchema> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0WithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointSchema> retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0WithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0ValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0Async(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<ConnectionEndPointSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0ValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameName
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameName(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameName(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdCall(String uuid, String localId, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdCall(uuid, localId, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(String uuid, String localId, String connectionEndPointUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdAsync(String uuid, String localId, String connectionEndPointUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/parent-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve parent-node-edge-point
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return NodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEdgePointRef retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<NodeEdgePointRef> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve parent-node-edge-point
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;NodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEdgePointRef> retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve parent-node-edge-point (asynchronously)
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<NodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteNameName
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteNameNameCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteNameNameValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteNameNameCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionRouteNameName(String uuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionRouteNameNameWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionRouteNameNameWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteNameNameValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteNameNameAsync(String uuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteNameNameValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteNameNameByIdCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectionRouteNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteNameNameByIdCall(uuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectionRouteNameNameById(String uuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectionRouteNameNameByIdWithHttpInfo(uuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectionRouteNameNameByIdWithHttpInfo(String uuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteNameNameByIdValidateBeforeCall(uuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteNameNameByIdAsync(String uuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteNameNameByIdValidateBeforeCall(uuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteRoute
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteRouteCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteRouteValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteRoute(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteRouteCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve route
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionRouteRoute(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionRouteRouteWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve route
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionRouteRouteWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteRouteValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve route (asynchronously)
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteRouteAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteRouteValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionRouteRouteById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteRouteByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteRouteByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteRouteById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteRouteById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteRouteByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve route by ID
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return Route
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Route retrieveContextConnectivityContextConnectionRouteRouteById(String uuid, String localId) throws ApiException {
        ApiResponse<Route> resp = retrieveContextConnectivityContextConnectionRouteRouteByIdWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve route by ID
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Route&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Route> retrieveContextConnectivityContextConnectionRouteRouteByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteRouteByIdValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<Route>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve route by ID (asynchronously)
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteRouteByIdAsync(String uuid, String localId, final ApiCallback<Route> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteRouteByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Route>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLink
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/supported-client-link/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLink(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve supported-client-link
     * Retrieve operation of resource: supported-client-link
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLink(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve supported-client-link
     * Retrieve operation of resource: supported-client-link
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve supported-client-link (asynchronously)
     * Retrieve operation of resource: supported-client-link
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkById
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdCall(String uuid, String topologyUuidLinkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/supported-client-link/{topology_uuid_link_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_uuid_link_uuid" + "\\}", apiClient.escapeString(topologyUuidLinkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdValidateBeforeCall(String uuid, String topologyUuidLinkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkById(Async)");
        }
        
        // verify the required parameter 'topologyUuidLinkUuid' is set
        if (topologyUuidLinkUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidLinkUuid' when calling retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdCall(uuid, topologyUuidLinkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve supported-client-link by ID
     * Retrieve operation of resource: supported-client-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return LinkRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkRef retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkById(String uuid, String topologyUuidLinkUuid) throws ApiException {
        ApiResponse<LinkRef> resp = retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdWithHttpInfo(uuid, topologyUuidLinkUuid);
        return resp.getData();
    }

    /**
     * Retrieve supported-client-link by ID
     * Retrieve operation of resource: supported-client-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return ApiResponse&lt;LinkRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkRef> retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdWithHttpInfo(String uuid, String topologyUuidLinkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdValidateBeforeCall(uuid, topologyUuidLinkUuid, null, null);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve supported-client-link by ID (asynchronously)
     * Retrieve operation of resource: supported-client-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdAsync(String uuid, String topologyUuidLinkUuid, final ApiCallback<LinkRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdValidateBeforeCall(uuid, topologyUuidLinkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSwitchControlNameName
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlNameNameCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlNameNameValidateBeforeCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlNameName(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlNameNameCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSwitchControlNameName(String uuid, String switchControlUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSwitchControlNameNameWithHttpInfo(uuid, switchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSwitchControlNameNameWithHttpInfo(String uuid, String switchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlNameNameValidateBeforeCall(uuid, switchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlNameNameAsync(String uuid, String switchControlUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlNameNameValidateBeforeCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSwitchControlNameNameById
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdCall(String uuid, String switchControlUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdValidateBeforeCall(String uuid, String switchControlUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlNameNameById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectionSwitchControlNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdCall(uuid, switchControlUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectionSwitchControlNameNameById(String uuid, String switchControlUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdWithHttpInfo(uuid, switchControlUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdWithHttpInfo(String uuid, String switchControlUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdValidateBeforeCall(uuid, switchControlUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdAsync(String uuid, String switchControlUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdValidateBeforeCall(uuid, switchControlUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceType
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/resilience-type/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeValidateBeforeCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceType(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceType(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ResilienceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResilienceType retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceType(String uuid, String switchControlUuid) throws ApiException {
        ApiResponse<ResilienceType> resp = retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeWithHttpInfo(uuid, switchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ApiResponse&lt;ResilienceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResilienceType> retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeWithHttpInfo(String uuid, String switchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeValidateBeforeCall(uuid, switchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve resilience-type (asynchronously)
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeAsync(String uuid, String switchControlUuid, final ApiCallback<ResilienceType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeValidateBeforeCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControl
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/sub-switch-control/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlValidateBeforeCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControl(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControl(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve sub-switch-control
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControl(String uuid, String switchControlUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlWithHttpInfo(uuid, switchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve sub-switch-control
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlWithHttpInfo(String uuid, String switchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlValidateBeforeCall(uuid, switchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve sub-switch-control (asynchronously)
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlAsync(String uuid, String switchControlUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlValidateBeforeCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlById
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param connectionUuidSwitchControlUuid ID of connection_uuid_switch_control_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdCall(String uuid, String switchControlUuid, String connectionUuidSwitchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/sub-switch-control/{connection_uuid_switch_control_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "connection_uuid_switch_control_uuid" + "\\}", apiClient.escapeString(connectionUuidSwitchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdValidateBeforeCall(String uuid, String switchControlUuid, String connectionUuidSwitchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlById(Async)");
        }
        
        // verify the required parameter 'connectionUuidSwitchControlUuid' is set
        if (connectionUuidSwitchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionUuidSwitchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdCall(uuid, switchControlUuid, connectionUuidSwitchControlUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve sub-switch-control by ID
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param connectionUuidSwitchControlUuid ID of connection_uuid_switch_control_uuid (required)
     * @return SwitchControlRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwitchControlRef retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlById(String uuid, String switchControlUuid, String connectionUuidSwitchControlUuid) throws ApiException {
        ApiResponse<SwitchControlRef> resp = retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdWithHttpInfo(uuid, switchControlUuid, connectionUuidSwitchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve sub-switch-control by ID
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param connectionUuidSwitchControlUuid ID of connection_uuid_switch_control_uuid (required)
     * @return ApiResponse&lt;SwitchControlRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwitchControlRef> retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdWithHttpInfo(String uuid, String switchControlUuid, String connectionUuidSwitchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdValidateBeforeCall(uuid, switchControlUuid, connectionUuidSwitchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<SwitchControlRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve sub-switch-control by ID (asynchronously)
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param connectionUuidSwitchControlUuid ID of connection_uuid_switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdAsync(String uuid, String switchControlUuid, String connectionUuidSwitchControlUuid, final ApiCallback<SwitchControlRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdValidateBeforeCall(uuid, switchControlUuid, connectionUuidSwitchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwitchControlRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchControl
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchControlCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchControlValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchControl(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchControlCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve switch-control
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSwitchControlSwitchControl(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchControlWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve switch-control
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSwitchControlSwitchControlWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchControlValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve switch-control (asynchronously)
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchControlAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchControlValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchControlById
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdValidateBeforeCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchControlById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchControlById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve switch-control by ID
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return SwitchControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwitchControl retrieveContextConnectivityContextConnectionSwitchControlSwitchControlById(String uuid, String switchControlUuid) throws ApiException {
        ApiResponse<SwitchControl> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdWithHttpInfo(uuid, switchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve switch-control by ID
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ApiResponse&lt;SwitchControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwitchControl> retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdWithHttpInfo(String uuid, String switchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdValidateBeforeCall(uuid, switchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<SwitchControl>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve switch-control by ID (asynchronously)
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdAsync(String uuid, String switchControlUuid, final ApiCallback<SwitchControl> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdValidateBeforeCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwitchControl>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchNameName
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameValidateBeforeCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchNameName(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSwitchControlSwitchNameName(String uuid, String switchControlUuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameWithHttpInfo(uuid, switchControlUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameWithHttpInfo(String uuid, String switchControlUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameValidateBeforeCall(uuid, switchControlUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameAsync(String uuid, String switchControlUuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameValidateBeforeCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameById
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdCall(String uuid, String switchControlUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdValidateBeforeCall(String uuid, String switchControlUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdCall(uuid, switchControlUuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameById(String uuid, String switchControlUuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdWithHttpInfo(uuid, switchControlUuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdWithHttpInfo(String uuid, String switchControlUuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdValidateBeforeCall(uuid, switchControlUuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdAsync(String uuid, String switchControlUuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdValidateBeforeCall(uuid, switchControlUuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/selected-connection-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointValidateBeforeCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-connection-end-point
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint(String uuid, String switchControlUuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointWithHttpInfo(uuid, switchControlUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve selected-connection-end-point
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointWithHttpInfo(String uuid, String switchControlUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointValidateBeforeCall(uuid, switchControlUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-connection-end-point (asynchronously)
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointAsync(String uuid, String switchControlUuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointValidateBeforeCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdCall(String uuid, String switchControlUuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/selected-connection-end-point/{topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdValidateBeforeCall(String uuid, String switchControlUuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdCall(uuid, switchControlUuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-connection-end-point by ID
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ConnectionEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointRef retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(String uuid, String switchControlUuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointRef> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdWithHttpInfo(uuid, switchControlUuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve selected-connection-end-point by ID
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointRef> retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdWithHttpInfo(String uuid, String switchControlUuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdValidateBeforeCall(uuid, switchControlUuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdAsync(String uuid, String switchControlUuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ApiCallback<ConnectionEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdValidateBeforeCall(uuid, switchControlUuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/selected-route/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteValidateBeforeCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-route
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute(String uuid, String switchControlUuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteWithHttpInfo(uuid, switchControlUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve selected-route
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteWithHttpInfo(String uuid, String switchControlUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteValidateBeforeCall(uuid, switchControlUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-route (asynchronously)
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteAsync(String uuid, String switchControlUuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteValidateBeforeCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionUuidRouteLocalId ID of connection_uuid_route_local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdCall(String uuid, String switchControlUuid, String localId, String connectionUuidRouteLocalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/selected-route/{connection_uuid_route_local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_uuid_route_local_id" + "\\}", apiClient.escapeString(connectionUuidRouteLocalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdValidateBeforeCall(String uuid, String switchControlUuid, String localId, String connectionUuidRouteLocalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(Async)");
        }
        
        // verify the required parameter 'connectionUuidRouteLocalId' is set
        if (connectionUuidRouteLocalId == null) {
            throw new ApiException("Missing the required parameter 'connectionUuidRouteLocalId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdCall(uuid, switchControlUuid, localId, connectionUuidRouteLocalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve selected-route by ID
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionUuidRouteLocalId ID of connection_uuid_route_local_id (required)
     * @return RouteRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RouteRef retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(String uuid, String switchControlUuid, String localId, String connectionUuidRouteLocalId) throws ApiException {
        ApiResponse<RouteRef> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdWithHttpInfo(uuid, switchControlUuid, localId, connectionUuidRouteLocalId);
        return resp.getData();
    }

    /**
     * Retrieve selected-route by ID
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionUuidRouteLocalId ID of connection_uuid_route_local_id (required)
     * @return ApiResponse&lt;RouteRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RouteRef> retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdWithHttpInfo(String uuid, String switchControlUuid, String localId, String connectionUuidRouteLocalId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdValidateBeforeCall(uuid, switchControlUuid, localId, connectionUuidRouteLocalId, null, null);
        Type localVarReturnType = new TypeToken<RouteRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-route by ID (asynchronously)
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionUuidRouteLocalId ID of connection_uuid_route_local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdAsync(String uuid, String switchControlUuid, String localId, String connectionUuidRouteLocalId, final ApiCallback<RouteRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdValidateBeforeCall(uuid, switchControlUuid, localId, connectionUuidRouteLocalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RouteRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchValidateBeforeCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitch(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitch(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve switch
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitch(String uuid, String switchControlUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchWithHttpInfo(uuid, switchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve switch
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchWithHttpInfo(String uuid, String switchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchValidateBeforeCall(uuid, switchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve switch (asynchronously)
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchAsync(String uuid, String switchControlUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchValidateBeforeCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchById
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdValidateBeforeCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve switch by ID
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return ModelSwitch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelSwitch retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchById(String uuid, String switchControlUuid, String localId) throws ApiException {
        ApiResponse<ModelSwitch> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdWithHttpInfo(uuid, switchControlUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve switch by ID
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;ModelSwitch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelSwitch> retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdWithHttpInfo(String uuid, String switchControlUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdValidateBeforeCall(uuid, switchControlUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<ModelSwitch>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve switch by ID (asynchronously)
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdAsync(String uuid, String switchControlUuid, String localId, final ApiCallback<ModelSwitch> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdValidateBeforeCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelSwitch>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityContext
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityContextCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityContextValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityContextCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connectivity-context
     * Retrieve operation of resource: connectivity-context
     * @return ConnectivityContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityContext retrieveContextConnectivityContextConnectivityContext() throws ApiException {
        ApiResponse<ConnectivityContext> resp = retrieveContextConnectivityContextConnectivityContextWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve connectivity-context
     * Retrieve operation of resource: connectivity-context
     * @return ApiResponse&lt;ConnectivityContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityContext> retrieveContextConnectivityContextConnectivityContextWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityContextValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConnectivityContext>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connectivity-context (asynchronously)
     * Retrieve operation of resource: connectivity-context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityContextAsync(final ApiCallback<ConnectivityContext> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityContextValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityContext>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopology
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/avoid-topology/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopology(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve avoid-topology
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopology(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve avoid-topology
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve avoid-topology (asynchronously)
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyById
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyByIdCall(String uuid, String topologyUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/avoid-topology/{topology_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_uuid" + "\\}", apiClient.escapeString(topologyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyByIdValidateBeforeCall(String uuid, String topologyUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyById(Async)");
        }
        
        // verify the required parameter 'topologyUuid' is set
        if (topologyUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuid' when calling retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyByIdCall(uuid, topologyUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve avoid-topology by ID
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyById(String uuid, String topologyUuid) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyByIdWithHttpInfo(uuid, topologyUuid);
        return resp.getData();
    }

    /**
     * Retrieve avoid-topology by ID
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyByIdWithHttpInfo(String uuid, String topologyUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyByIdValidateBeforeCall(uuid, topologyUuid, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve avoid-topology by ID (asynchronously)
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyByIdAsync(String uuid, String topologyUuid, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyByIdValidateBeforeCall(uuid, topologyUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceConnectionConnection
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectionConnectionCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/connection/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectionConnectionValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceConnectionConnection(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectionConnectionCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceConnectionConnection(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceConnectionConnectionWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve connection
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceConnectionConnectionWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectionConnectionValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection (asynchronously)
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectionConnectionAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectionConnectionValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceConnectionConnectionById
     * @param uuid ID of uuid (required)
     * @param connectionUuid ID of connection_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdCall(String uuid, String connectionUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/connection/{connection_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_uuid" + "\\}", apiClient.escapeString(connectionUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdValidateBeforeCall(String uuid, String connectionUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceConnectionConnectionById(Async)");
        }
        
        // verify the required parameter 'connectionUuid' is set
        if (connectionUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionUuid' when calling retrieveContextConnectivityContextConnectivityServiceConnectionConnectionById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdCall(uuid, connectionUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection by ID
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @param connectionUuid ID of connection_uuid (required)
     * @return ConnectionRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionRef retrieveContextConnectivityContextConnectivityServiceConnectionConnectionById(String uuid, String connectionUuid) throws ApiException {
        ApiResponse<ConnectionRef> resp = retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdWithHttpInfo(uuid, connectionUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection by ID
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @param connectionUuid ID of connection_uuid (required)
     * @return ApiResponse&lt;ConnectionRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionRef> retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdWithHttpInfo(String uuid, String connectionUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdValidateBeforeCall(uuid, connectionUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection by ID (asynchronously)
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @param connectionUuid ID of connection_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdAsync(String uuid, String connectionUuid, final ApiCallback<ConnectionRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdValidateBeforeCall(uuid, connectionUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceConnectivityService
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectivityServiceCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectivityServiceValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectivityServiceCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connectivity-service
     * Retrieve operation of resource: connectivity-service
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceConnectivityService() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceConnectivityServiceWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve connectivity-service
     * Retrieve operation of resource: connectivity-service
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceConnectivityServiceWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectivityServiceValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connectivity-service (asynchronously)
     * Retrieve operation of resource: connectivity-service
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectivityServiceAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectivityServiceValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceConnectivityServiceById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceConnectivityServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connectivity-service by ID
     * Retrieve operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @return ConnectivityService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityService retrieveContextConnectivityContextConnectivityServiceConnectivityServiceById(String uuid) throws ApiException {
        ApiResponse<ConnectivityService> resp = retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve connectivity-service by ID
     * Retrieve operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;ConnectivityService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityService> retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectivityService>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connectivity-service by ID (asynchronously)
     * Retrieve operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdAsync(String uuid, final ApiCallback<ConnectivityService> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityService>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusion
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/coroute-inclusion/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusion(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve coroute-inclusion
     * Retrieve operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @return ConnectivityServiceRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityServiceRef retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusion(String uuid) throws ApiException {
        ApiResponse<ConnectivityServiceRef> resp = retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve coroute-inclusion
     * Retrieve operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;ConnectivityServiceRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityServiceRef> retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectivityServiceRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve coroute-inclusion (asynchronously)
     * Retrieve operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionAsync(String uuid, final ApiCallback<ConnectivityServiceRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityServiceRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(String uuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusion
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/diversity-exclusion/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusion(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve diversity-exclusion
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusion(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve diversity-exclusion
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve diversity-exclusion (asynchronously)
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(String uuid, String connectivityServiceUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/diversity-exclusion/{connectivity_service_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connectivity_service_uuid" + "\\}", apiClient.escapeString(connectivityServiceUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(String uuid, String connectivityServiceUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceUuid' is set
        if (connectivityServiceUuid == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceUuid' when calling retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve diversity-exclusion by ID
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @return ConnectivityServiceRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityServiceRef retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(String uuid, String connectivityServiceUuid) throws ApiException {
        ApiResponse<ConnectivityServiceRef> resp = retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(uuid, connectivityServiceUuid);
        return resp.getData();
    }

    /**
     * Retrieve diversity-exclusion by ID
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @return ApiResponse&lt;ConnectivityServiceRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityServiceRef> retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(String uuid, String connectivityServiceUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectivityServiceRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve diversity-exclusion by ID (asynchronously)
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdAsync(String uuid, String connectivityServiceUuid, final ApiCallback<ConnectivityServiceRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityServiceRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfile(String uuid, String localId) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String localId, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacity(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve capacity
     * Retrieve operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacity(String uuid, String localId) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve capacity
     * Retrieve operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve capacity (asynchronously)
     * Retrieve operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityAsync(String uuid, String localId, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSize(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/aggregated-connection-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-connection-end-point
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-connection-end-point
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-connection-end-point (asynchronously)
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdCall(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/aggregated-connection-end-point/{topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdCall(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-connection-end-point by ID
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ConnectionEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointRef retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointRef> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-connection-end-point by ID
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointRef> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdAsync(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ApiCallback<ConnectionEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve arof-connection-end-point-spec
     * Retrieve operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ArofConnectionEndPointSpec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArofConnectionEndPointSpec retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ArofConnectionEndPointSpec> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve arof-connection-end-point-spec
     * Retrieve operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ArofConnectionEndPointSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArofConnectionEndPointSpec> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ArofConnectionEndPointSpec>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve arof-connection-end-point-spec (asynchronously)
     * Retrieve operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<ArofConnectionEndPointSpec> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArofConnectionEndPointSpec>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/media-channel/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve media-channel
     * Retrieve operation of resource: media-channel
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ArofPropertiesPac
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArofPropertiesPac retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ArofPropertiesPac> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve media-channel
     * Retrieve operation of resource: media-channel
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ArofPropertiesPac&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArofPropertiesPac> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ArofPropertiesPac>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve media-channel (asynchronously)
     * Retrieve operation of resource: media-channel
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<ArofPropertiesPac> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArofPropertiesPac>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/media-channel/occupied-spectrum/frequency-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve frequency-constraint
     * Retrieve operation of resource: frequency-constraint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return FrequencyConstraint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FrequencyConstraint retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<FrequencyConstraint> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve frequency-constraint
     * Retrieve operation of resource: frequency-constraint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;FrequencyConstraint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FrequencyConstraint> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<FrequencyConstraint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve frequency-constraint (asynchronously)
     * Retrieve operation of resource: frequency-constraint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<FrequencyConstraint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FrequencyConstraint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/media-channel/occupied-spectrum/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve occupied-spectrum
     * Retrieve operation of resource: occupied-spectrum
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return SpectrumBand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpectrumBand retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<SpectrumBand> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve occupied-spectrum
     * Retrieve operation of resource: occupied-spectrum
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;SpectrumBand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpectrumBand> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<SpectrumBand>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve occupied-spectrum (asynchronously)
     * Retrieve operation of resource: occupied-spectrum
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<SpectrumBand> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpectrumBand>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/client-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve client-node-edge-point
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve client-node-edge-point
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve client-node-edge-point (asynchronously)
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdCall(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/client-node-edge-point/{topology_uuid_node_uuid_node_edge_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdCall(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve client-node-edge-point by ID
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return NodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEdgePointRef retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        ApiResponse<NodeEdgePointRef> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve client-node-edge-point by ID
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return ApiResponse&lt;NodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEdgePointRef> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve client-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdAsync(String uuid, String localId, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ApiCallback<NodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPoint(String uuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointAsync(String uuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdCall(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdCall(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ConnectionEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointRef retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointRef> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointRef> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdAsync(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ApiCallback<ConnectionEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0Call(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0ValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0Call(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ConnectionEndPointSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointSchema retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointSchema> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0WithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointSchema> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0WithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0ValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0Async(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<ConnectionEndPointSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0ValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameName
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameName(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameName(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdCall(String uuid, String localId, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdCall(uuid, localId, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(String uuid, String localId, String connectionEndPointUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdAsync(String uuid, String localId, String connectionEndPointUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePointCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/parent-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePointCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve parent-node-edge-point
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return NodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEdgePointRef retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        ApiResponse<NodeEdgePointRef> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePointWithHttpInfo(uuid, localId, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve parent-node-edge-point
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;NodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEdgePointRef> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePointWithHttpInfo(String uuid, String localId, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(uuid, localId, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve parent-node-edge-point (asynchronously)
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePointAsync(String uuid, String localId, String connectionEndPointUuid, final ApiCallback<NodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(uuid, localId, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointEndPoint
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointEndPointCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointEndPointValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointEndPointCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve end-point
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceEndPointEndPoint(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceEndPointEndPointWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve end-point
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceEndPointEndPointWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointEndPointValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve end-point (asynchronously)
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointEndPointAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointEndPointValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve end-point by ID
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ConnectivityServiceEndPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityServiceEndPoint retrieveContextConnectivityContextConnectivityServiceEndPointEndPointById(String uuid, String localId) throws ApiException {
        ApiResponse<ConnectivityServiceEndPoint> resp = retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve end-point by ID
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;ConnectivityServiceEndPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityServiceEndPoint> retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<ConnectivityServiceEndPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve end-point by ID (asynchronously)
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdAsync(String uuid, String localId, final ApiCallback<ConnectivityServiceEndPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityServiceEndPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointNameName
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointNameNameCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointNameNameValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointNameNameCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceEndPointNameName(String uuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceEndPointNameNameWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceEndPointNameNameWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointNameNameValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointNameNameAsync(String uuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointNameNameValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectivityServiceEndPointNameNameById(String uuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPool
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/arof-service-interface-point-spec/arof-pool/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPool(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPool(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPool(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve arof-pool
     * Retrieve operation of resource: arof-pool
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ArofPoolSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArofPoolSchema retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPool(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<ArofPoolSchema> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve arof-pool
     * Retrieve operation of resource: arof-pool
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;ArofPoolSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArofPoolSchema> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<ArofPoolSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve arof-pool (asynchronously)
     * Retrieve operation of resource: arof-pool
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<ArofPoolSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArofPoolSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/arof-service-interface-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpec(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpec(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpec(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve arof-service-interface-point-spec
     * Retrieve operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ArofServiceInterfacePointSpec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArofServiceInterfacePointSpec retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpec(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<ArofServiceInterfacePointSpec> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve arof-service-interface-point-spec
     * Retrieve operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;ArofServiceInterfacePointSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArofServiceInterfacePointSpec> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<ArofServiceInterfacePointSpec>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve arof-service-interface-point-spec (asynchronously)
     * Retrieve operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<ArofServiceInterfacePointSpec> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArofServiceInterfacePointSpec>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacity(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSize(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameName
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameName(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameName(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdCall(uuid, localId, serviceInterfacePointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(String uuid, String localId, String serviceInterfacePointUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePoint
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointValidateBeforeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointCall(uuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ServiceInterfacePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInterfacePointRef retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePoint(String uuid, String localId) throws ApiException {
        ApiResponse<ServiceInterfacePointRef> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;ServiceInterfacePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInterfacePointRef> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointValidateBeforeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve service-interface-point (asynchronously)
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointAsync(String uuid, String localId, final ApiCallback<ServiceInterfacePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointValidateBeforeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve service-interface-point by ID
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ServiceInterfacePointSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInterfacePointSchema retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<ServiceInterfacePointSchema> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve service-interface-point by ID
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;ServiceInterfacePointSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInterfacePointSchema> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve service-interface-point by ID (asynchronously)
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<ServiceInterfacePointSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, localId, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String localId, String serviceInterfacePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLink
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/exclude-link/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLink(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-link
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLink(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-link
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-link (asynchronously)
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkById
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkByIdCall(String uuid, String topologyUuidLinkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/exclude-link/{topology_uuid_link_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_uuid_link_uuid" + "\\}", apiClient.escapeString(topologyUuidLinkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkByIdValidateBeforeCall(String uuid, String topologyUuidLinkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkById(Async)");
        }
        
        // verify the required parameter 'topologyUuidLinkUuid' is set
        if (topologyUuidLinkUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidLinkUuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkByIdCall(uuid, topologyUuidLinkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-link by ID
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return LinkRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkRef retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkById(String uuid, String topologyUuidLinkUuid) throws ApiException {
        ApiResponse<LinkRef> resp = retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkByIdWithHttpInfo(uuid, topologyUuidLinkUuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-link by ID
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return ApiResponse&lt;LinkRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkRef> retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkByIdWithHttpInfo(String uuid, String topologyUuidLinkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkByIdValidateBeforeCall(uuid, topologyUuidLinkUuid, null, null);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-link by ID (asynchronously)
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkByIdAsync(String uuid, String topologyUuidLinkUuid, final ApiCallback<LinkRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkByIdValidateBeforeCall(uuid, topologyUuidLinkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNode
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/exclude-node/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNode(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-node
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNode(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-node
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-node (asynchronously)
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeById
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeByIdCall(String uuid, String topologyUuidNodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/exclude-node/{topology_uuid_node_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeByIdValidateBeforeCall(String uuid, String topologyUuidNodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuid' is set
        if (topologyUuidNodeUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeByIdCall(uuid, topologyUuidNodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-node by ID
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @return NodeRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRef retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeById(String uuid, String topologyUuidNodeUuid) throws ApiException {
        ApiResponse<NodeRef> resp = retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeByIdWithHttpInfo(uuid, topologyUuidNodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-node by ID
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @return ApiResponse&lt;NodeRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRef> retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeByIdWithHttpInfo(String uuid, String topologyUuidNodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeByIdValidateBeforeCall(uuid, topologyUuidNodeUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-node by ID (asynchronously)
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeByIdAsync(String uuid, String topologyUuidNodeUuid, final ApiCallback<NodeRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeByIdValidateBeforeCall(uuid, topologyUuidNodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePath
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/exclude-path/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePath(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-path
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePath(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-path
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-path (asynchronously)
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathById
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathByIdCall(String uuid, String pathUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/exclude-path/{path_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "path_uuid" + "\\}", apiClient.escapeString(pathUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathByIdValidateBeforeCall(String uuid, String pathUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathById(Async)");
        }
        
        // verify the required parameter 'pathUuid' is set
        if (pathUuid == null) {
            throw new ApiException("Missing the required parameter 'pathUuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathByIdCall(uuid, pathUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve exclude-path by ID
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @return PathRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathRef retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathById(String uuid, String pathUuid) throws ApiException {
        ApiResponse<PathRef> resp = retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathByIdWithHttpInfo(uuid, pathUuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-path by ID
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @return ApiResponse&lt;PathRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathRef> retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathByIdWithHttpInfo(String uuid, String pathUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathByIdValidateBeforeCall(uuid, pathUuid, null, null);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-path by ID (asynchronously)
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathByIdAsync(String uuid, String pathUuid, final ApiCallback<PathRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathByIdValidateBeforeCall(uuid, pathUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLink
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-link/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLink(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-link
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLink(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-link
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-link (asynchronously)
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkById
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkByIdCall(String uuid, String topologyUuidLinkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-link/{topology_uuid_link_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_uuid_link_uuid" + "\\}", apiClient.escapeString(topologyUuidLinkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkByIdValidateBeforeCall(String uuid, String topologyUuidLinkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkById(Async)");
        }
        
        // verify the required parameter 'topologyUuidLinkUuid' is set
        if (topologyUuidLinkUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidLinkUuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkByIdCall(uuid, topologyUuidLinkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-link by ID
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return LinkRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkRef retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkById(String uuid, String topologyUuidLinkUuid) throws ApiException {
        ApiResponse<LinkRef> resp = retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkByIdWithHttpInfo(uuid, topologyUuidLinkUuid);
        return resp.getData();
    }

    /**
     * Retrieve include-link by ID
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return ApiResponse&lt;LinkRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkRef> retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkByIdWithHttpInfo(String uuid, String topologyUuidLinkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkByIdValidateBeforeCall(uuid, topologyUuidLinkUuid, null, null);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-link by ID (asynchronously)
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkByIdAsync(String uuid, String topologyUuidLinkUuid, final ApiCallback<LinkRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkByIdValidateBeforeCall(uuid, topologyUuidLinkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNode
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-node/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNode(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-node
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNode(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-node
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-node (asynchronously)
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeById
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeByIdCall(String uuid, String topologyUuidNodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-node/{topology_uuid_node_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeByIdValidateBeforeCall(String uuid, String topologyUuidNodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuid' is set
        if (topologyUuidNodeUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeByIdCall(uuid, topologyUuidNodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-node by ID
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @return NodeRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRef retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeById(String uuid, String topologyUuidNodeUuid) throws ApiException {
        ApiResponse<NodeRef> resp = retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeByIdWithHttpInfo(uuid, topologyUuidNodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve include-node by ID
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @return ApiResponse&lt;NodeRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRef> retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeByIdWithHttpInfo(String uuid, String topologyUuidNodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeByIdValidateBeforeCall(uuid, topologyUuidNodeUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-node by ID (asynchronously)
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeByIdAsync(String uuid, String topologyUuidNodeUuid, final ApiCallback<NodeRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeByIdValidateBeforeCall(uuid, topologyUuidNodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePath
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-path/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePath(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-path
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePath(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-path
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-path (asynchronously)
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathById
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathByIdCall(String uuid, String pathUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-path/{path_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "path_uuid" + "\\}", apiClient.escapeString(pathUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathByIdValidateBeforeCall(String uuid, String pathUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathById(Async)");
        }
        
        // verify the required parameter 'pathUuid' is set
        if (pathUuid == null) {
            throw new ApiException("Missing the required parameter 'pathUuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathByIdCall(uuid, pathUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-path by ID
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @return PathRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathRef retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathById(String uuid, String pathUuid) throws ApiException {
        ApiResponse<PathRef> resp = retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathByIdWithHttpInfo(uuid, pathUuid);
        return resp.getData();
    }

    /**
     * Retrieve include-path by ID
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @return ApiResponse&lt;PathRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathRef> retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathByIdWithHttpInfo(String uuid, String pathUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathByIdValidateBeforeCall(uuid, pathUuid, null, null);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-path by ID (asynchronously)
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathByIdAsync(String uuid, String pathUuid, final ApiCallback<PathRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathByIdValidateBeforeCall(uuid, pathUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopology
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-topology/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopology(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-topology
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopology(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-topology
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-topology (asynchronously)
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyById
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyByIdCall(String uuid, String topologyUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-topology/{topology_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "topology_uuid" + "\\}", apiClient.escapeString(topologyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyByIdValidateBeforeCall(String uuid, String topologyUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyById(Async)");
        }
        
        // verify the required parameter 'topologyUuid' is set
        if (topologyUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyByIdCall(uuid, topologyUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve include-topology by ID
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyById(String uuid, String topologyUuid) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyByIdWithHttpInfo(uuid, topologyUuid);
        return resp.getData();
    }

    /**
     * Retrieve include-topology by ID
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyByIdWithHttpInfo(String uuid, String topologyUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyByIdValidateBeforeCall(uuid, topologyUuid, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-topology by ID (asynchronously)
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyByIdAsync(String uuid, String topologyUuid, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyByIdValidateBeforeCall(uuid, topologyUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectivityServiceNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfile(String uuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileAsync(String uuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacity
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve requested-capacity
     * Retrieve operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacity(String uuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve requested-capacity
     * Retrieve operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve requested-capacity (asynchronously)
     * Retrieve operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityAsync(String uuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceType
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/resilience-type/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceType(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @return ResilienceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResilienceType retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceType(String uuid) throws ApiException {
        ApiResponse<ResilienceType> resp = retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;ResilienceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResilienceType> retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve resilience-type (asynchronously)
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeAsync(String uuid, final ApiCallback<ResilienceType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristic
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/risk-diversity-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-diversity-characteristic
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve risk-diversity-characteristic
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-diversity-characteristic (asynchronously)
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(String uuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/risk-diversity-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(String uuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-diversity-characteristic by ID
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return RiskCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RiskCharacteristic retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(String uuid, String riskCharacteristicName) throws ApiException {
        ApiResponse<RiskCharacteristic> resp = retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(uuid, riskCharacteristicName);
        return resp.getData();
    }

    /**
     * Retrieve risk-diversity-characteristic by ID
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;RiskCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RiskCharacteristic> retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(String uuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, null, null);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-diversity-characteristic by ID (asynchronously)
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdAsync(String uuid, String riskCharacteristicName, final ApiCallback<RiskCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextConnectivityContextConnectivityServiceScheduleSchedule
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceScheduleScheduleCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/schedule/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceScheduleScheduleValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceScheduleSchedule(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceScheduleScheduleCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve schedule
     * Retrieve operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @return TimeRange
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TimeRange retrieveContextConnectivityContextConnectivityServiceScheduleSchedule(String uuid) throws ApiException {
        ApiResponse<TimeRange> resp = retrieveContextConnectivityContextConnectivityServiceScheduleScheduleWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve schedule
     * Retrieve operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;TimeRange&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TimeRange> retrieveContextConnectivityContextConnectivityServiceScheduleScheduleWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceScheduleScheduleValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<TimeRange>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve schedule (asynchronously)
     * Retrieve operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceScheduleScheduleAsync(String uuid, final ApiCallback<TimeRange> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceScheduleScheduleValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TimeRange>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(String uuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = arofConnectionEndPointSpec;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'arofConnectionEndPointSpec' is set
        if (arofConnectionEndPointSpec == null) {
            throw new ApiException("Missing the required parameter 'arofConnectionEndPointSpec' when calling updateContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(uuid, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update arof-connection-end-point-spec by ID
     * Update operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(String uuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        updateContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(uuid, connectionEndPointUuid, arofConnectionEndPointSpec);
    }

    /**
     * Update arof-connection-end-point-spec by ID
     * Update operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(String uuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, connectionEndPointUuid, arofConnectionEndPointSpec, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update arof-connection-end-point-spec by ID (asynchronously)
     * Update operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdAsync(String uuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdCall(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectionEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPoint' is set
        if (connectionEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPoint' when calling updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdCall(uuid, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update connection-end-point by ID
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, connectionEndPointUuid, connectionEndPoint);
    }

    /**
     * Update connection-end-point by ID
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, connectionEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update connection-end-point by ID (asynchronously)
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdAsync(String uuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectionConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectionConnectionEndPointNameNameByIdCall(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextConnectivityContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextConnectivityContextConnectionConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextConnectivityContextConnectionConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionConnectionEndPointNameNameByIdCall(uuid, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectionConnectionEndPointNameNameById(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        updateContextConnectivityContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(uuid, connectionEndPointUuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectionConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectionConnectionEndPointNameNameByIdAsync(String uuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionConnectionEndPointNameNameByIdValidateBeforeCall(uuid, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = arofConnectionEndPointSpec;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'arofConnectionEndPointSpec' is set
        if (arofConnectionEndPointSpec == null) {
            throw new ApiException("Missing the required parameter 'arofConnectionEndPointSpec' when calling updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update arof-connection-end-point-spec by ID
     * Update operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec);
    }

    /**
     * Update arof-connection-end-point-spec by ID
     * Update operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update arof-connection-end-point-spec by ID (asynchronously)
     * Update operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdAsync(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectionEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPoint' is set
        if (connectionEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPoint' when calling updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update connection-end-point by ID
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, connectionEndPoint);
    }

    /**
     * Update connection-end-point by ID
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update connection-end-point by ID (asynchronously)
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdAsync(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdCall(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdCall(uuid, localId, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdAsync(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityContextById
     * @param connectivityContext connectivity-contextbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityContextByIdCall(ConnectivityContext connectivityContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectivityContext;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityContextByIdValidateBeforeCall(ConnectivityContext connectivityContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'connectivityContext' is set
        if (connectivityContext == null) {
            throw new ApiException("Missing the required parameter 'connectivityContext' when calling updateContextConnectivityContextConnectivityContextById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityContextByIdCall(connectivityContext, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update connectivity-context by ID
     * Update operation of resource: connectivity-context
     * @param connectivityContext connectivity-contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityContextById(ConnectivityContext connectivityContext) throws ApiException {
        updateContextConnectivityContextConnectivityContextByIdWithHttpInfo(connectivityContext);
    }

    /**
     * Update connectivity-context by ID
     * Update operation of resource: connectivity-context
     * @param connectivityContext connectivity-contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityContextByIdWithHttpInfo(ConnectivityContext connectivityContext) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityContextByIdValidateBeforeCall(connectivityContext, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update connectivity-context by ID (asynchronously)
     * Update operation of resource: connectivity-context
     * @param connectivityContext connectivity-contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityContextByIdAsync(ConnectivityContext connectivityContext, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityContextByIdValidateBeforeCall(connectivityContext, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceConnectivityServiceById
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(String uuid, ConnectivityService connectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectivityService;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(String uuid, ConnectivityService connectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceConnectivityServiceById(Async)");
        }
        
        // verify the required parameter 'connectivityService' is set
        if (connectivityService == null) {
            throw new ApiException("Missing the required parameter 'connectivityService' when calling updateContextConnectivityContextConnectivityServiceConnectivityServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(uuid, connectivityService, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update connectivity-service by ID
     * Update operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceConnectivityServiceById(String uuid, ConnectivityService connectivityService) throws ApiException {
        updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(uuid, connectivityService);
    }

    /**
     * Update connectivity-service by ID
     * Update operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(String uuid, ConnectivityService connectivityService) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, connectivityService, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update connectivity-service by ID (asynchronously)
     * Update operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdAsync(String uuid, ConnectivityService connectivityService, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdValidateBeforeCall(uuid, connectivityService, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(String uuid, ConnectivityServiceRef corouteInclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = corouteInclusion;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/coroute-inclusion/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(String uuid, ConnectivityServiceRef corouteInclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(Async)");
        }
        
        // verify the required parameter 'corouteInclusion' is set
        if (corouteInclusion == null) {
            throw new ApiException("Missing the required parameter 'corouteInclusion' when calling updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(uuid, corouteInclusion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update coroute-inclusion by ID
     * Update operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(String uuid, ConnectivityServiceRef corouteInclusion) throws ApiException {
        updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(uuid, corouteInclusion);
    }

    /**
     * Update coroute-inclusion by ID
     * Update operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(String uuid, ConnectivityServiceRef corouteInclusion) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(uuid, corouteInclusion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update coroute-inclusion by ID (asynchronously)
     * Update operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdAsync(String uuid, ConnectivityServiceRef corouteInclusion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdValidateBeforeCall(uuid, corouteInclusion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, CostCharacteristic costCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = costCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String costName, CostCharacteristic costCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costCharacteristic' is set
        if (costCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'costCharacteristic' when calling updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, costCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update cost-characteristic by ID
     * Update operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName, costCharacteristic);
    }

    /**
     * Update cost-characteristic by ID
     * Update operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, costCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update cost-characteristic by ID (asynchronously)
     * Update operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, CostCharacteristic costCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, costName, costCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = diversityExclusion;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/diversity-exclusion/{connectivity_service_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "connectivity_service_uuid" + "\\}", apiClient.escapeString(connectivityServiceUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceUuid' is set
        if (connectivityServiceUuid == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceUuid' when calling updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'diversityExclusion' is set
        if (diversityExclusion == null) {
            throw new ApiException("Missing the required parameter 'diversityExclusion' when calling updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceUuid, diversityExclusion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update diversity-exclusion by ID
     * Update operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion) throws ApiException {
        updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(uuid, connectivityServiceUuid, diversityExclusion);
    }

    /**
     * Update diversity-exclusion by ID
     * Update operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceUuid, diversityExclusion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update diversity-exclusion by ID (asynchronously)
     * Update operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdAsync(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdValidateBeforeCall(uuid, connectivityServiceUuid, diversityExclusion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, String localId, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bandwidthProfile;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(String uuid, String localId, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'bandwidthProfile' is set
        if (bandwidthProfile == null) {
            throw new ApiException("Missing the required parameter 'bandwidthProfile' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, localId, bandwidthProfile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update bandwidth-profile by ID
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, localId, bandwidthProfile);
    }

    /**
     * Update bandwidth-profile by ID
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, bandwidthProfile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update bandwidth-profile by ID (asynchronously)
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, String localId, BandwidthProfile bandwidthProfile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, localId, bandwidthProfile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, String localId, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'committedBurstSize' is set
        if (committedBurstSize == null) {
            throw new ApiException("Missing the required parameter 'committedBurstSize' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, localId, committedBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update committed-burst-size by ID
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, localId, committedBurstSize);
    }

    /**
     * Update committed-burst-size by ID
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, committedBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update committed-burst-size by ID (asynchronously)
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, String localId, CapacityValue committedBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, localId, committedBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, String localId, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(String uuid, String localId, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'committedInformationRate' is set
        if (committedInformationRate == null) {
            throw new ApiException("Missing the required parameter 'committedInformationRate' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, localId, committedInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update committed-information-rate by ID
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, localId, committedInformationRate);
    }

    /**
     * Update committed-information-rate by ID
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, committedInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update committed-information-rate by ID (asynchronously)
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, String localId, CapacityValue committedInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, localId, committedInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, String localId, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'peakBurstSize' is set
        if (peakBurstSize == null) {
            throw new ApiException("Missing the required parameter 'peakBurstSize' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, localId, peakBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update peak-burst-size by ID
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, localId, peakBurstSize);
    }

    /**
     * Update peak-burst-size by ID
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, peakBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update peak-burst-size by ID (asynchronously)
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, String localId, CapacityValue peakBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, localId, peakBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, String localId, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(String uuid, String localId, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'peakInformationRate' is set
        if (peakInformationRate == null) {
            throw new ApiException("Missing the required parameter 'peakInformationRate' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, localId, peakInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update peak-information-rate by ID
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, localId, peakInformationRate);
    }

    /**
     * Update peak-information-rate by ID
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, peakInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update peak-information-rate by ID (asynchronously)
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, String localId, CapacityValue peakInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, localId, peakInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdCall(String uuid, String localId, Capacity capacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = capacity;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(String uuid, String localId, Capacity capacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'capacity' is set
        if (capacity == null) {
            throw new ApiException("Missing the required parameter 'capacity' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdCall(uuid, localId, capacity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update capacity by ID
     * Update operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(String uuid, String localId, Capacity capacity) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(uuid, localId, capacity);
    }

    /**
     * Update capacity by ID
     * Update operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(String uuid, String localId, Capacity capacity) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, capacity, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update capacity by ID (asynchronously)
     * Update operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdAsync(String uuid, String localId, Capacity capacity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdValidateBeforeCall(uuid, localId, capacity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(String uuid, String localId, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = totalSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(String uuid, String localId, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'totalSize' is set
        if (totalSize == null) {
            throw new ApiException("Missing the required parameter 'totalSize' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(uuid, localId, totalSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update total-size by ID
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, localId, totalSize);
    }

    /**
     * Update total-size by ID
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, totalSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update total-size by ID (asynchronously)
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdAsync(String uuid, String localId, CapacityValue totalSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, localId, totalSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = arofConnectionEndPointSpec;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'arofConnectionEndPointSpec' is set
        if (arofConnectionEndPointSpec == null) {
            throw new ApiException("Missing the required parameter 'arofConnectionEndPointSpec' when calling updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update arof-connection-end-point-spec by ID
     * Update operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec);
    }

    /**
     * Update arof-connection-end-point-spec by ID
     * Update operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update arof-connection-end-point-spec by ID (asynchronously)
     * Update operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdAsync(String uuid, String localId, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdCall(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectionEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPoint' is set
        if (connectionEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPoint' when calling updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update connection-end-point by ID
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, connectionEndPoint);
    }

    /**
     * Update connection-end-point by ID
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update connection-end-point by ID (asynchronously)
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdAsync(String uuid, String localId, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdCall(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdCall(uuid, localId, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdWithHttpInfo(uuid, localId, connectionEndPointUuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdAsync(String uuid, String localId, String connectionEndPointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdValidateBeforeCall(uuid, localId, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointEndPointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = endPoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'endPoint' is set
        if (endPoint == null) {
            throw new ApiException("Missing the required parameter 'endPoint' when calling updateContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update end-point by ID
     * Update operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointEndPointById(String uuid, String localId, ConnectivityServiceEndPoint endPoint) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(uuid, localId, endPoint);
    }

    /**
     * Update end-point by ID
     * Update operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId, ConnectivityServiceEndPoint endPoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update end-point by ID (asynchronously)
     * Update operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdAsync(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdValidateBeforeCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointNameNameById(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdValidateBeforeCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdCall(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = arofServiceInterfacePointSpec;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/arof-service-interface-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        
        // verify the required parameter 'arofServiceInterfacePointSpec' is set
        if (arofServiceInterfacePointSpec == null) {
            throw new ApiException("Missing the required parameter 'arofServiceInterfacePointSpec' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdCall(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update arof-service-interface-point-spec by ID
     * Update operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec);
    }

    /**
     * Update arof-service-interface-point-spec by ID
     * Update operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update arof-service-interface-point-spec by ID (asynchronously)
     * Update operation of resource: arof-service-interface-point-spec
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param arofServiceInterfacePointSpec arof-service-interface-point-specbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, ArofServiceInterfacePointSpec arofServiceInterfacePointSpec, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdCall(uuid, localId, serviceInterfacePointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(uuid, localId, serviceInterfacePointUuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdAsync(String uuid, String localId, String serviceInterfacePointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, serviceInterfacePoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, localId, serviceInterfacePoint);
    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update service-interface-point by ID (asynchronously)
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdValidateBeforeCall(uuid, localId, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0Call(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/{service_interface_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0ValidateBeforeCall(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0Call(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0WithHttpInfo(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint);
    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0WithHttpInfo(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0ValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update service-interface-point by ID (asynchronously)
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0Async(String uuid, String localId, String serviceInterfacePointUuid, ServiceInterfacePointSchema serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0ValidateBeforeCall(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = latencyCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'latencyCharacteristic' is set
        if (latencyCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'latencyCharacteristic' when calling updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, latencyCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update latency-characteristic by ID
     * Update operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName, latencyCharacteristic);
    }

    /**
     * Update latency-characteristic by ID
     * Update operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, latencyCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update latency-characteristic by ID (asynchronously)
     * Update operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, trafficPropertyName, latencyCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceNameNameByIdValidateBeforeCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        updateContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceNameNameByIdValidateBeforeCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bandwidthProfile;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(String uuid, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'bandwidthProfile' is set
        if (bandwidthProfile == null) {
            throw new ApiException("Missing the required parameter 'bandwidthProfile' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, bandwidthProfile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update bandwidth-profile by ID
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(String uuid, BandwidthProfile bandwidthProfile) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, bandwidthProfile);
    }

    /**
     * Update bandwidth-profile by ID
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, BandwidthProfile bandwidthProfile) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, bandwidthProfile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update bandwidth-profile by ID (asynchronously)
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, BandwidthProfile bandwidthProfile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdValidateBeforeCall(uuid, bandwidthProfile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(String uuid, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'committedBurstSize' is set
        if (committedBurstSize == null) {
            throw new ApiException("Missing the required parameter 'committedBurstSize' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, committedBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update committed-burst-size by ID
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, CapacityValue committedBurstSize) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, committedBurstSize);
    }

    /**
     * Update committed-burst-size by ID
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, CapacityValue committedBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, committedBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update committed-burst-size by ID (asynchronously)
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, CapacityValue committedBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdValidateBeforeCall(uuid, committedBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(String uuid, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'committedInformationRate' is set
        if (committedInformationRate == null) {
            throw new ApiException("Missing the required parameter 'committedInformationRate' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, committedInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update committed-information-rate by ID
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, CapacityValue committedInformationRate) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, committedInformationRate);
    }

    /**
     * Update committed-information-rate by ID
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, CapacityValue committedInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, committedInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update committed-information-rate by ID (asynchronously)
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, CapacityValue committedInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdValidateBeforeCall(uuid, committedInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakBurstSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(String uuid, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'peakBurstSize' is set
        if (peakBurstSize == null) {
            throw new ApiException("Missing the required parameter 'peakBurstSize' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, peakBurstSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update peak-burst-size by ID
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, CapacityValue peakBurstSize) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, peakBurstSize);
    }

    /**
     * Update peak-burst-size by ID
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, CapacityValue peakBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, peakBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update peak-burst-size by ID (asynchronously)
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, CapacityValue peakBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdValidateBeforeCall(uuid, peakBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakInformationRate;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(String uuid, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'peakInformationRate' is set
        if (peakInformationRate == null) {
            throw new ApiException("Missing the required parameter 'peakInformationRate' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, peakInformationRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update peak-information-rate by ID
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, CapacityValue peakInformationRate) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, peakInformationRate);
    }

    /**
     * Update peak-information-rate by ID
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, CapacityValue peakInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, peakInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update peak-information-rate by ID (asynchronously)
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, CapacityValue peakInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdValidateBeforeCall(uuid, peakInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(String uuid, Capacity requestedCapacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestedCapacity;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(String uuid, Capacity requestedCapacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(Async)");
        }
        
        // verify the required parameter 'requestedCapacity' is set
        if (requestedCapacity == null) {
            throw new ApiException("Missing the required parameter 'requestedCapacity' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(uuid, requestedCapacity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update requested-capacity by ID
     * Update operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(String uuid, Capacity requestedCapacity) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(uuid, requestedCapacity);
    }

    /**
     * Update requested-capacity by ID
     * Update operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(String uuid, Capacity requestedCapacity) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(uuid, requestedCapacity, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update requested-capacity by ID (asynchronously)
     * Update operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdAsync(String uuid, Capacity requestedCapacity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdValidateBeforeCall(uuid, requestedCapacity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(String uuid, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = totalSize;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(String uuid, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'totalSize' is set
        if (totalSize == null) {
            throw new ApiException("Missing the required parameter 'totalSize' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(uuid, totalSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update total-size by ID
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(String uuid, CapacityValue totalSize) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, totalSize);
    }

    /**
     * Update total-size by ID
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, CapacityValue totalSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, totalSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update total-size by ID (asynchronously)
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdAsync(String uuid, CapacityValue totalSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdValidateBeforeCall(uuid, totalSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(String uuid, ResilienceType resilienceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resilienceType;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/resilience-type/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(String uuid, ResilienceType resilienceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(Async)");
        }
        
        // verify the required parameter 'resilienceType' is set
        if (resilienceType == null) {
            throw new ApiException("Missing the required parameter 'resilienceType' when calling updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(uuid, resilienceType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update resilience-type by ID
     * Update operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(String uuid, ResilienceType resilienceType) throws ApiException {
        updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(uuid, resilienceType);
    }

    /**
     * Update resilience-type by ID
     * Update operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(String uuid, ResilienceType resilienceType) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(uuid, resilienceType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update resilience-type by ID (asynchronously)
     * Update operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdAsync(String uuid, ResilienceType resilienceType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdValidateBeforeCall(uuid, resilienceType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = riskDiversityCharacteristic;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/risk-diversity-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskDiversityCharacteristic' is set
        if (riskDiversityCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'riskDiversityCharacteristic' when calling updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update risk-diversity-characteristic by ID
     * Update operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(uuid, riskCharacteristicName, riskDiversityCharacteristic);
    }

    /**
     * Update risk-diversity-characteristic by ID
     * Update operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update risk-diversity-characteristic by ID (asynchronously)
     * Update operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdAsync(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdValidateBeforeCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextConnectivityContextConnectivityServiceScheduleScheduleById
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdCall(String uuid, TimeRange schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = schedule;

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/schedule/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(String uuid, TimeRange schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceScheduleScheduleById(Async)");
        }
        
        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling updateContextConnectivityContextConnectivityServiceScheduleScheduleById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdCall(uuid, schedule, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update schedule by ID
     * Update operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceScheduleScheduleById(String uuid, TimeRange schedule) throws ApiException {
        updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(uuid, schedule);
    }

    /**
     * Update schedule by ID
     * Update operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(String uuid, TimeRange schedule) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(uuid, schedule, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update schedule by ID (asynchronously)
     * Update operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdAsync(String uuid, TimeRange schedule, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdValidateBeforeCall(uuid, schedule, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
