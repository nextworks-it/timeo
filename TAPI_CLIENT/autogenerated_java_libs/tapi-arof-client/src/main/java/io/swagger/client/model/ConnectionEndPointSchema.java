/**
 * tapi-arof API
 * tapi-arof API generated from tapi-arof.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ArofConnectionEndPointSpec;
import io.swagger.client.model.ConnectionEndPoint;
import io.swagger.client.model.ConnectionEndPointRef;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.NodeEdgePointRef;
import java.util.ArrayList;
import java.util.List;


/**
 * ConnectionEndPointSchema
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2019-06-07T14:21:00.609+02:00")
public class ConnectionEndPointSchema   {
  /**
   * Gets or Sets lifecycleState
   */
  public enum LifecycleStateEnum {
    @SerializedName("PLANNED")
    PLANNED("PLANNED"),
    
    @SerializedName("POTENTIAL_AVAILABLE")
    POTENTIAL_AVAILABLE("POTENTIAL_AVAILABLE"),
    
    @SerializedName("POTENTIAL_BUSY")
    POTENTIAL_BUSY("POTENTIAL_BUSY"),
    
    @SerializedName("INSTALLED")
    INSTALLED("INSTALLED"),
    
    @SerializedName("PENDING_REMOVAL")
    PENDING_REMOVAL("PENDING_REMOVAL");

    private String value;

    LifecycleStateEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("lifecycle-state")
  private LifecycleStateEnum lifecycleState = null;

  @SerializedName("connection-end-point_uuid")
  private String connectionEndPointUuid = null;

  @SerializedName("name")
  private List<NameAndValue> name = new ArrayList<NameAndValue>();

  /**
   * The overall directionality of the LP. - A BIDIRECTIONAL LP will have some SINK and/or SOURCE flowss. - A SINK LP can only contain elements with SINK flows or CONTRA_DIRECTION_SOURCE flows - A SOURCE LP can only contain SOURCE flows or CONTRA_DIRECTION_SINK flows
   */
  public enum TerminationDirectionEnum {
    @SerializedName("BIDIRECTIONAL")
    BIDIRECTIONAL("BIDIRECTIONAL"),
    
    @SerializedName("SINK")
    SINK("SINK"),
    
    @SerializedName("SOURCE")
    SOURCE("SOURCE"),
    
    @SerializedName("UNDEFINED_OR_UNKNOWN")
    UNDEFINED_OR_UNKNOWN("UNDEFINED_OR_UNKNOWN");

    private String value;

    TerminationDirectionEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("termination-direction")
  private TerminationDirectionEnum terminationDirection = null;

  /**
   * Indicates whether the layer is terminated and if so how.
   */
  public enum TerminationStateEnum {
    @SerializedName("LP_CAN_NEVER_TERMINATE")
    LP_CAN_NEVER_TERMINATE("LP_CAN_NEVER_TERMINATE"),
    
    @SerializedName("LT_NOT_TERMINATED")
    LT_NOT_TERMINATED("LT_NOT_TERMINATED"),
    
    @SerializedName("TERMINATED_SERVER_TO_CLIENT_FLOW")
    TERMINATED_SERVER_TO_CLIENT_FLOW("TERMINATED_SERVER_TO_CLIENT_FLOW"),
    
    @SerializedName("TERMINATED_CLIENT_TO_SERVER_FLOW")
    TERMINATED_CLIENT_TO_SERVER_FLOW("TERMINATED_CLIENT_TO_SERVER_FLOW"),
    
    @SerializedName("TERMINATED_BIDIRECTIONAL")
    TERMINATED_BIDIRECTIONAL("TERMINATED_BIDIRECTIONAL"),
    
    @SerializedName("LT_PERMENANTLY_TERMINATED")
    LT_PERMENANTLY_TERMINATED("LT_PERMENANTLY_TERMINATED"),
    
    @SerializedName("TERMINATION_STATE_UNKNOWN")
    TERMINATION_STATE_UNKNOWN("TERMINATION_STATE_UNKNOWN");

    private String value;

    TerminationStateEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("termination-state")
  private TerminationStateEnum terminationState = null;

  /**
   * Gets or Sets operationalState
   */
  public enum OperationalStateEnum {
    @SerializedName("DISABLED")
    DISABLED("DISABLED"),
    
    @SerializedName("ENABLED")
    ENABLED("ENABLED");

    private String value;

    OperationalStateEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("operational-state")
  private OperationalStateEnum operationalState = null;

  @SerializedName("arof-connection-end-point-spec")
  private ArofConnectionEndPointSpec arofConnectionEndPointSpec = null;

  public ConnectionEndPointSchema lifecycleState(LifecycleStateEnum lifecycleState) {
    this.lifecycleState = lifecycleState;
    return this;
  }

   /**
   * Get lifecycleState
   * @return lifecycleState
  **/
  @ApiModelProperty(example = "null", value = "")
  public LifecycleStateEnum getLifecycleState() {
    return lifecycleState;
  }

  public void setLifecycleState(LifecycleStateEnum lifecycleState) {
    this.lifecycleState = lifecycleState;
  }

  public ConnectionEndPointSchema connectionEndPointUuid(String connectionEndPointUuid) {
    this.connectionEndPointUuid = connectionEndPointUuid;
    return this;
  }

   /**
   * UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12} Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
   * @return connectionEndPointUuid
  **/
  @ApiModelProperty(example = "null", value = "UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12} Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6")
  public String getConnectionEndPointUuid() {
    return connectionEndPointUuid;
  }

  public void setConnectionEndPointUuid(String connectionEndPointUuid) {
    this.connectionEndPointUuid = connectionEndPointUuid;
  }

  public ConnectionEndPointSchema name(List<NameAndValue> name) {
    this.name = name;
    return this;
  }

  public ConnectionEndPointSchema addNameItem(NameAndValue nameItem) {
    this.name.add(nameItem);
    return this;
  }

   /**
   * List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.")
  public List<NameAndValue> getName() {
    return name;
  }

  public void setName(List<NameAndValue> name) {
    this.name = name;
  }

  public ConnectionEndPointSchema terminationDirection(TerminationDirectionEnum terminationDirection) {
    this.terminationDirection = terminationDirection;
    return this;
  }

   /**
   * The overall directionality of the LP. - A BIDIRECTIONAL LP will have some SINK and/or SOURCE flowss. - A SINK LP can only contain elements with SINK flows or CONTRA_DIRECTION_SOURCE flows - A SOURCE LP can only contain SOURCE flows or CONTRA_DIRECTION_SINK flows
   * @return terminationDirection
  **/
  @ApiModelProperty(example = "null", value = "The overall directionality of the LP. - A BIDIRECTIONAL LP will have some SINK and/or SOURCE flowss. - A SINK LP can only contain elements with SINK flows or CONTRA_DIRECTION_SOURCE flows - A SOURCE LP can only contain SOURCE flows or CONTRA_DIRECTION_SINK flows")
  public TerminationDirectionEnum getTerminationDirection() {
    return terminationDirection;
  }

  public void setTerminationDirection(TerminationDirectionEnum terminationDirection) {
    this.terminationDirection = terminationDirection;
  }

  public ConnectionEndPointSchema terminationState(TerminationStateEnum terminationState) {
    this.terminationState = terminationState;
    return this;
  }

   /**
   * Indicates whether the layer is terminated and if so how.
   * @return terminationState
  **/
  @ApiModelProperty(example = "null", value = "Indicates whether the layer is terminated and if so how.")
  public TerminationStateEnum getTerminationState() {
    return terminationState;
  }

  public void setTerminationState(TerminationStateEnum terminationState) {
    this.terminationState = terminationState;
  }

  public ConnectionEndPointSchema operationalState(OperationalStateEnum operationalState) {
    this.operationalState = operationalState;
    return this;
  }

   /**
   * Get operationalState
   * @return operationalState
  **/
  @ApiModelProperty(example = "null", value = "")
  public OperationalStateEnum getOperationalState() {
    return operationalState;
  }

  public void setOperationalState(OperationalStateEnum operationalState) {
    this.operationalState = operationalState;
  }

  public ConnectionEndPointSchema arofConnectionEndPointSpec(ArofConnectionEndPointSpec arofConnectionEndPointSpec) {
    this.arofConnectionEndPointSpec = arofConnectionEndPointSpec;
    return this;
  }

   /**
   * Get arofConnectionEndPointSpec
   * @return arofConnectionEndPointSpec
  **/
  @ApiModelProperty(example = "null", value = "")
  public ArofConnectionEndPointSpec getArofConnectionEndPointSpec() {
    return arofConnectionEndPointSpec;
  }

  public void setArofConnectionEndPointSpec(ArofConnectionEndPointSpec arofConnectionEndPointSpec) {
    this.arofConnectionEndPointSpec = arofConnectionEndPointSpec;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionEndPointSchema connectionEndPointSchema = (ConnectionEndPointSchema) o;
    return Objects.equals(this.lifecycleState, connectionEndPointSchema.lifecycleState) &&
        Objects.equals(this.connectionEndPointUuid, connectionEndPointSchema.connectionEndPointUuid) &&
        Objects.equals(this.name, connectionEndPointSchema.name) &&
        Objects.equals(this.terminationDirection, connectionEndPointSchema.terminationDirection) &&
        Objects.equals(this.terminationState, connectionEndPointSchema.terminationState) &&
        Objects.equals(this.operationalState, connectionEndPointSchema.operationalState) &&
        Objects.equals(this.arofConnectionEndPointSpec, connectionEndPointSchema.arofConnectionEndPointSpec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lifecycleState, connectionEndPointUuid, name, terminationDirection, terminationState, operationalState, arofConnectionEndPointSpec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionEndPointSchema {\n");
    
    sb.append("    lifecycleState: ").append(toIndentedString(lifecycleState)).append("\n");
    sb.append("    connectionEndPointUuid: ").append(toIndentedString(connectionEndPointUuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    terminationDirection: ").append(toIndentedString(terminationDirection)).append("\n");
    sb.append("    terminationState: ").append(toIndentedString(terminationState)).append("\n");
    sb.append("    operationalState: ").append(toIndentedString(operationalState)).append("\n");
    sb.append("    arofConnectionEndPointSpec: ").append(toIndentedString(arofConnectionEndPointSpec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

