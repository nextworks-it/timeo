/**
 * tapi-arof API
 * tapi-arof API generated from tapi-arof.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ConnectionEndPointRef;
import io.swagger.client.model.LocalClass;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.RouteRef;
import java.util.ArrayList;
import java.util.List;


/**
 * The class models the switched forwarding of traffic (traffic flow) between FcPorts (ConnectionEndPoints) and is present where there is protection functionality in the FC (Connection). If an FC exposes protection (having two or more FcPorts that provide alternative identical inputs/outputs), the FC will have one or more associated FcSwitch objects to represent the alternative flow choices visible at the edge of the FC. The FC switch represents and defines a protection switch structure encapsulated in the FC. Essentially performs one of the functions of the Protection Group in a traditional model. It associates to 2 or more FcPorts each playing the role of a Protection Unit. One or more protection, i.e. standby/backup, FcPorts provide protection for one or more working (i.e. regular/main/preferred) FcPorts where either protection or working can feed one or more protected FcPort. The switch may be used in revertive or non-revertive (symmetric) mode. When in revertive mode it may define a waitToRestore time. It may be used in one of several modes including source switch, destination switched, source and destination switched etc (covering cases such as 1+1 and 1:1). It may be locked out (prevented from switching), force switched or manual switched. It will indicate switch state and change of state. The switch can be switched away from all sources such that it becomes open and hence two coordinated switches can both feed the same LTP so long as at least one of the two is switched away from all sources (is &#39;open&#39;). The ability for a Switch to be &#39;high impedance&#39; allows bidirectional ForwardingConstructs to be overlaid on the same bidirectional LTP where the appropriate control is enabled to prevent signal conflict. This ability allows multiple alternate routes to be present that otherwise would be in conflict.
 */
@ApiModel(description = "The class models the switched forwarding of traffic (traffic flow) between FcPorts (ConnectionEndPoints) and is present where there is protection functionality in the FC (Connection). If an FC exposes protection (having two or more FcPorts that provide alternative identical inputs/outputs), the FC will have one or more associated FcSwitch objects to represent the alternative flow choices visible at the edge of the FC. The FC switch represents and defines a protection switch structure encapsulated in the FC. Essentially performs one of the functions of the Protection Group in a traditional model. It associates to 2 or more FcPorts each playing the role of a Protection Unit. One or more protection, i.e. standby/backup, FcPorts provide protection for one or more working (i.e. regular/main/preferred) FcPorts where either protection or working can feed one or more protected FcPort. The switch may be used in revertive or non-revertive (symmetric) mode. When in revertive mode it may define a waitToRestore time. It may be used in one of several modes including source switch, destination switched, source and destination switched etc (covering cases such as 1+1 and 1:1). It may be locked out (prevented from switching), force switched or manual switched. It will indicate switch state and change of state. The switch can be switched away from all sources such that it becomes open and hence two coordinated switches can both feed the same LTP so long as at least one of the two is switched away from all sources (is 'open'). The ability for a Switch to be 'high impedance' allows bidirectional ForwardingConstructs to be overlaid on the same bidirectional LTP where the appropriate control is enabled to prevent signal conflict. This ability allows multiple alternate routes to be present that otherwise would be in conflict.")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2019-06-07T14:21:00.609+02:00")
public class ModelSwitch   {
  @SerializedName("selected-connection-end-point")
  private List<ConnectionEndPointRef> selectedConnectionEndPoint = new ArrayList<ConnectionEndPointRef>();

  /**
   * The reason for the current switch selection.
   */
  public enum SelectionReasonEnum {
    @SerializedName("LOCKOUT")
    LOCKOUT("LOCKOUT"),
    
    @SerializedName("NORMAL")
    NORMAL("NORMAL"),
    
    @SerializedName("MANUAL")
    MANUAL("MANUAL"),
    
    @SerializedName("FORCED")
    FORCED("FORCED"),
    
    @SerializedName("WAIT_TO_REVERT")
    WAIT_TO_REVERT("WAIT_TO_REVERT"),
    
    @SerializedName("SIGNAL_DEGRADE")
    SIGNAL_DEGRADE("SIGNAL_DEGRADE"),
    
    @SerializedName("SIGNAL_FAIL")
    SIGNAL_FAIL("SIGNAL_FAIL");

    private String value;

    SelectionReasonEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("selection-reason")
  private SelectionReasonEnum selectionReason = null;

  /**
   * Indicates whether the switch selects from ingress to the FC or to egress of the FC, or both.
   */
  public enum SwitchDirectionEnum {
    @SerializedName("BIDIRECTIONAL")
    BIDIRECTIONAL("BIDIRECTIONAL"),
    
    @SerializedName("INPUT")
    INPUT("INPUT"),
    
    @SerializedName("OUTPUT")
    OUTPUT("OUTPUT"),
    
    @SerializedName("UNIDENTIFIED_OR_UNKNOWN")
    UNIDENTIFIED_OR_UNKNOWN("UNIDENTIFIED_OR_UNKNOWN");

    private String value;

    SwitchDirectionEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("switch-direction")
  private SwitchDirectionEnum switchDirection = null;

  @SerializedName("selected-route")
  private List<RouteRef> selectedRoute = new ArrayList<RouteRef>();

  /**
   * Degree of administrative control applied to the switch selection.
   */
  public enum SelectionControlEnum {
    @SerializedName("LOCK_OUT")
    LOCK_OUT("LOCK_OUT"),
    
    @SerializedName("NORMAL")
    NORMAL("NORMAL"),
    
    @SerializedName("MANUAL")
    MANUAL("MANUAL"),
    
    @SerializedName("FORCED")
    FORCED("FORCED");

    private String value;

    SelectionControlEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("selection-control")
  private SelectionControlEnum selectionControl = null;

  public ModelSwitch selectedConnectionEndPoint(List<ConnectionEndPointRef> selectedConnectionEndPoint) {
    this.selectedConnectionEndPoint = selectedConnectionEndPoint;
    return this;
  }

  public ModelSwitch addSelectedConnectionEndPointItem(ConnectionEndPointRef selectedConnectionEndPointItem) {
    this.selectedConnectionEndPoint.add(selectedConnectionEndPointItem);
    return this;
  }

   /**
   * Get selectedConnectionEndPoint
   * @return selectedConnectionEndPoint
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<ConnectionEndPointRef> getSelectedConnectionEndPoint() {
    return selectedConnectionEndPoint;
  }

  public void setSelectedConnectionEndPoint(List<ConnectionEndPointRef> selectedConnectionEndPoint) {
    this.selectedConnectionEndPoint = selectedConnectionEndPoint;
  }

  public ModelSwitch selectionReason(SelectionReasonEnum selectionReason) {
    this.selectionReason = selectionReason;
    return this;
  }

   /**
   * The reason for the current switch selection.
   * @return selectionReason
  **/
  @ApiModelProperty(example = "null", value = "The reason for the current switch selection.")
  public SelectionReasonEnum getSelectionReason() {
    return selectionReason;
  }

  public void setSelectionReason(SelectionReasonEnum selectionReason) {
    this.selectionReason = selectionReason;
  }

  public ModelSwitch switchDirection(SwitchDirectionEnum switchDirection) {
    this.switchDirection = switchDirection;
    return this;
  }

   /**
   * Indicates whether the switch selects from ingress to the FC or to egress of the FC, or both.
   * @return switchDirection
  **/
  @ApiModelProperty(example = "null", value = "Indicates whether the switch selects from ingress to the FC or to egress of the FC, or both.")
  public SwitchDirectionEnum getSwitchDirection() {
    return switchDirection;
  }

  public void setSwitchDirection(SwitchDirectionEnum switchDirection) {
    this.switchDirection = switchDirection;
  }

  public ModelSwitch selectedRoute(List<RouteRef> selectedRoute) {
    this.selectedRoute = selectedRoute;
    return this;
  }

  public ModelSwitch addSelectedRouteItem(RouteRef selectedRouteItem) {
    this.selectedRoute.add(selectedRouteItem);
    return this;
  }

   /**
   * Get selectedRoute
   * @return selectedRoute
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<RouteRef> getSelectedRoute() {
    return selectedRoute;
  }

  public void setSelectedRoute(List<RouteRef> selectedRoute) {
    this.selectedRoute = selectedRoute;
  }

  public ModelSwitch selectionControl(SelectionControlEnum selectionControl) {
    this.selectionControl = selectionControl;
    return this;
  }

   /**
   * Degree of administrative control applied to the switch selection.
   * @return selectionControl
  **/
  @ApiModelProperty(example = "null", value = "Degree of administrative control applied to the switch selection.")
  public SelectionControlEnum getSelectionControl() {
    return selectionControl;
  }

  public void setSelectionControl(SelectionControlEnum selectionControl) {
    this.selectionControl = selectionControl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelSwitch _switch = (ModelSwitch) o;
    return Objects.equals(this.selectedConnectionEndPoint, _switch.selectedConnectionEndPoint) &&
        Objects.equals(this.selectionReason, _switch.selectionReason) &&
        Objects.equals(this.switchDirection, _switch.switchDirection) &&
        Objects.equals(this.selectedRoute, _switch.selectedRoute) &&
        Objects.equals(this.selectionControl, _switch.selectionControl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(selectedConnectionEndPoint, selectionReason, switchDirection, selectedRoute, selectionControl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelSwitch {\n");
    
    sb.append("    selectedConnectionEndPoint: ").append(toIndentedString(selectedConnectionEndPoint)).append("\n");
    sb.append("    selectionReason: ").append(toIndentedString(selectionReason)).append("\n");
    sb.append("    switchDirection: ").append(toIndentedString(switchDirection)).append("\n");
    sb.append("    selectedRoute: ").append(toIndentedString(selectedRoute)).append("\n");
    sb.append("    selectionControl: ").append(toIndentedString(selectionControl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

