/**
 * tapi-arof API
 * tapi-arof API generated from tapi-arof.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ContextSchema;
import io.swagger.client.model.CreateConnectivityServiceRPCOutputSchema;
import io.swagger.client.model.CreateConnectivityServiceRPCInputSchema;
import io.swagger.client.model.DeleteConnectivityServiceRPCInputSchema;
import io.swagger.client.model.GetConnectionDetailsRPCOutputSchema;
import io.swagger.client.model.GetConnectionDetailsRPCInputSchema;
import io.swagger.client.model.GetConnectionEndPointDetailsRPCInputSchema;
import io.swagger.client.model.GetConnectionEndPointDetailsRPCOutputSchema;
import io.swagger.client.model.GetConnectivityServiceDetailsRPCInputSchema;
import io.swagger.client.model.GetConnectivityServiceDetailsRPCOutputSchema;
import io.swagger.client.model.GetConnectivityServiceListRPCOutputSchema;
import io.swagger.client.model.GetLinkDetailsRPCInputSchema;
import io.swagger.client.model.GetLinkDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeDetailsRPCInputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCInputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCInputSchema;
import io.swagger.client.model.GetServiceInterfacePointListRPCOutputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCOutputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCInputSchema;
import io.swagger.client.model.GetTopologyListRPCOutputSchema;
import io.swagger.client.model.UpdateConnectivityServiceRPCOutputSchema;
import io.swagger.client.model.UpdateConnectivityServiceRPCInputSchema;
import io.swagger.client.model.UpdateServiceInterfacePointRPCInputSchema;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Create context by ID
     *
     * Create operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextByIdTest() throws ApiException {
        ContextSchema context = null;
        // api.createContextById(context);

        // TODO: test validations
    }
    
    /**
     * Create create-connectivity-service by ID
     *
     * Create operation of resource: create-connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCreateConnectivityServiceByIdTest() throws ApiException {
        CreateConnectivityServiceRPCInputSchema createConnectivityService = null;
        // CreateConnectivityServiceRPCOutputSchema response = api.createCreateConnectivityServiceById(createConnectivityService);

        // TODO: test validations
    }
    
    /**
     * Create delete-connectivity-service by ID
     *
     * Create operation of resource: delete-connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDeleteConnectivityServiceByIdTest() throws ApiException {
        DeleteConnectivityServiceRPCInputSchema deleteConnectivityService = null;
        // api.createDeleteConnectivityServiceById(deleteConnectivityService);

        // TODO: test validations
    }
    
    /**
     * Create get-connection-details by ID
     *
     * Create operation of resource: get-connection-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetConnectionDetailsByIdTest() throws ApiException {
        GetConnectionDetailsRPCInputSchema getConnectionDetails = null;
        // GetConnectionDetailsRPCOutputSchema response = api.createGetConnectionDetailsById(getConnectionDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-connection-end-point-details by ID
     *
     * Create operation of resource: get-connection-end-point-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetConnectionEndPointDetailsByIdTest() throws ApiException {
        GetConnectionEndPointDetailsRPCInputSchema getConnectionEndPointDetails = null;
        // GetConnectionEndPointDetailsRPCOutputSchema response = api.createGetConnectionEndPointDetailsById(getConnectionEndPointDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-connectivity-service-details by ID
     *
     * Create operation of resource: get-connectivity-service-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetConnectivityServiceDetailsByIdTest() throws ApiException {
        GetConnectivityServiceDetailsRPCInputSchema getConnectivityServiceDetails = null;
        // GetConnectivityServiceDetailsRPCOutputSchema response = api.createGetConnectivityServiceDetailsById(getConnectivityServiceDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-connectivity-service-list by ID
     *
     * Create operation of resource: get-connectivity-service-list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetConnectivityServiceListByIdTest() throws ApiException {
        // GetConnectivityServiceListRPCOutputSchema response = api.createGetConnectivityServiceListById();

        // TODO: test validations
    }
    
    /**
     * Create get-link-details by ID
     *
     * Create operation of resource: get-link-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetLinkDetailsByIdTest() throws ApiException {
        GetLinkDetailsRPCInputSchema getLinkDetails = null;
        // GetLinkDetailsRPCOutputSchema response = api.createGetLinkDetailsById(getLinkDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-node-details by ID
     *
     * Create operation of resource: get-node-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetNodeDetailsByIdTest() throws ApiException {
        GetNodeDetailsRPCInputSchema getNodeDetails = null;
        // GetNodeDetailsRPCOutputSchema response = api.createGetNodeDetailsById(getNodeDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-node-edge-point-details by ID
     *
     * Create operation of resource: get-node-edge-point-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetNodeEdgePointDetailsByIdTest() throws ApiException {
        GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails = null;
        // GetNodeEdgePointDetailsRPCOutputSchema response = api.createGetNodeEdgePointDetailsById(getNodeEdgePointDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-service-interface-point-details by ID
     *
     * Create operation of resource: get-service-interface-point-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetServiceInterfacePointDetailsByIdTest() throws ApiException {
        GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails = null;
        // GetServiceInterfacePointDetailsRPCOutputSchema response = api.createGetServiceInterfacePointDetailsById(getServiceInterfacePointDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-service-interface-point-list by ID
     *
     * Create operation of resource: get-service-interface-point-list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetServiceInterfacePointListByIdTest() throws ApiException {
        // GetServiceInterfacePointListRPCOutputSchema response = api.createGetServiceInterfacePointListById();

        // TODO: test validations
    }
    
    /**
     * Create get-topology-details by ID
     *
     * Create operation of resource: get-topology-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetTopologyDetailsByIdTest() throws ApiException {
        GetTopologyDetailsRPCInputSchema getTopologyDetails = null;
        // GetTopologyDetailsRPCOutputSchema response = api.createGetTopologyDetailsById(getTopologyDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-topology-list by ID
     *
     * Create operation of resource: get-topology-list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetTopologyListByIdTest() throws ApiException {
        // GetTopologyListRPCOutputSchema response = api.createGetTopologyListById();

        // TODO: test validations
    }
    
    /**
     * Create update-connectivity-service by ID
     *
     * Create operation of resource: update-connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUpdateConnectivityServiceByIdTest() throws ApiException {
        UpdateConnectivityServiceRPCInputSchema updateConnectivityService = null;
        // UpdateConnectivityServiceRPCOutputSchema response = api.createUpdateConnectivityServiceById(updateConnectivityService);

        // TODO: test validations
    }
    
    /**
     * Create update-service-interface-point by ID
     *
     * Create operation of resource: update-service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUpdateServiceInterfacePointByIdTest() throws ApiException {
        UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint = null;
        // api.createUpdateServiceInterfacePointById(updateServiceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Delete context by ID
     *
     * Delete operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextByIdTest() throws ApiException {
        // api.deleteContextById();

        // TODO: test validations
    }
    
    /**
     * Retrieve context
     *
     * Retrieve operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTest() throws ApiException {
        // ContextSchema response = api.retrieveContext();

        // TODO: test validations
    }
    
    /**
     * Update context by ID
     *
     * Update operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextByIdTest() throws ApiException {
        ContextSchema context = null;
        // api.updateContextById(context);

        // TODO: test validations
    }
    
}
