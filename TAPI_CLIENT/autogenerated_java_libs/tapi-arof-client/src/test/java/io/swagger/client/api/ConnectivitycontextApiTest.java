/**
 * tapi-arof API
 * tapi-arof API generated from tapi-arof.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ArofConnectionEndPointSpec;
import io.swagger.client.model.ConnectionEndPointSchema;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.ConnectivityContext;
import io.swagger.client.model.ConnectivityService;
import io.swagger.client.model.ConnectivityServiceRef;
import io.swagger.client.model.CostCharacteristic;
import io.swagger.client.model.BandwidthProfile;
import io.swagger.client.model.CapacityValue;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.ConnectivityServiceEndPoint;
import io.swagger.client.model.ArofServiceInterfacePointSpec;
import io.swagger.client.model.ServiceInterfacePointRef;
import io.swagger.client.model.ServiceInterfacePointSchema;
import io.swagger.client.model.LatencyCharacteristic;
import io.swagger.client.model.ResilienceType;
import io.swagger.client.model.RiskCharacteristic;
import io.swagger.client.model.TimeRange;
import io.swagger.client.model.Connection;
import io.swagger.client.model.ConnectionEndPointRef;
import io.swagger.client.model.ArofPropertiesPac;
import io.swagger.client.model.FrequencyConstraint;
import io.swagger.client.model.SpectrumBand;
import io.swagger.client.model.NodeEdgePointRef;
import io.swagger.client.model.ConnectionRef;
import io.swagger.client.model.Route;
import io.swagger.client.model.LinkRef;
import io.swagger.client.model.SwitchControlRef;
import io.swagger.client.model.SwitchControl;
import io.swagger.client.model.RouteRef;
import io.swagger.client.model.ModelSwitch;
import io.swagger.client.model.TopologyRef;
import io.swagger.client.model.ArofPoolSchema;
import io.swagger.client.model.NodeRef;
import io.swagger.client.model.PathRef;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConnectivitycontextApi
 */
public class ConnectivitycontextApiTest {

    private final ConnectivitycontextApi api = new ConnectivitycontextApi();

    
    /**
     * Create arof-connection-end-point-spec by ID
     *
     * Create operation of resource: arof-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        ArofConnectionEndPointSpec arofConnectionEndPointSpec = null;
        // api.createContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(uuid, connectionEndPointUuid, arofConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create connection-end-point by ID
     *
     * Create operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        // api.createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(uuid, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        // api.createContextConnectivityContextConnectionConnectionEndPointNameNameById(uuid, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create arof-connection-end-point-spec by ID
     *
     * Create operation of resource: arof-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ArofConnectionEndPointSpec arofConnectionEndPointSpec = null;
        // api.createContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create connection-end-point by ID
     *
     * Create operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        // api.createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        // api.createContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create connectivity-context by ID
     *
     * Create operation of resource: connectivity-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityContextByIdTest() throws ApiException {
        ConnectivityContext connectivityContext = null;
        // api.createContextConnectivityContextConnectivityContextById(connectivityContext);

        // TODO: test validations
    }
    
    /**
     * Create connectivity-service by ID
     *
     * Create operation of resource: connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceConnectivityServiceByIdTest() throws ApiException {
        String uuid = null;
        ConnectivityService connectivityService = null;
        // api.createContextConnectivityContextConnectivityServiceConnectivityServiceById(uuid, connectivityService);

        // TODO: test validations
    }
    
    /**
     * Create coroute-inclusion by ID
     *
     * Create operation of resource: coroute-inclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdTest() throws ApiException {
        String uuid = null;
        ConnectivityServiceRef corouteInclusion = null;
        // api.createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(uuid, corouteInclusion);

        // TODO: test validations
    }
    
    /**
     * Create cost-characteristic by ID
     *
     * Create operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic costCharacteristic = null;
        // api.createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(uuid, costName, costCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Create diversity-exclusion by ID
     *
     * Create operation of resource: diversity-exclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdTest() throws ApiException {
        String uuid = null;
        String connectivityServiceUuid = null;
        ConnectivityServiceRef diversityExclusion = null;
        // api.createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(uuid, connectivityServiceUuid, diversityExclusion);

        // TODO: test validations
    }
    
    /**
     * Create bandwidth-profile by ID
     *
     * Create operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        BandwidthProfile bandwidthProfile = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(uuid, localId, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Create committed-burst-size by ID
     *
     * Create operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedBurstSize = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, localId, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create committed-information-rate by ID
     *
     * Create operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedInformationRate = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, localId, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create peak-burst-size by ID
     *
     * Create operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakBurstSize = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, localId, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create peak-information-rate by ID
     *
     * Create operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakInformationRate = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, localId, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create capacity by ID
     *
     * Create operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Capacity capacity = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(uuid, localId, capacity);

        // TODO: test validations
    }
    
    /**
     * Create total-size by ID
     *
     * Create operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue totalSize = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(uuid, localId, totalSize);

        // TODO: test validations
    }
    
    /**
     * Create arof-connection-end-point-spec by ID
     *
     * Create operation of resource: arof-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ArofConnectionEndPointSpec arofConnectionEndPointSpec = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create connection-end-point by ID
     *
     * Create operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create end-point by ID
     *
     * Create operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ConnectivityServiceEndPoint endPoint = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointEndPointById(uuid, localId, endPoint);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue name = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointNameNameById(uuid, localId, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create arof-service-interface-point-spec by ID
     *
     * Create operation of resource: arof-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ArofServiceInterfacePointSpec arofServiceInterfacePointSpec = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create service-interface-point by ID
     *
     * Create operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ServiceInterfacePointRef serviceInterfacePoint = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Create service-interface-point by ID
     *
     * Create operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0Test() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ServiceInterfacePointSchema serviceInterfacePoint = null;
        // api.createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Create latency-characteristic by ID
     *
     * Create operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic latencyCharacteristic = null;
        // api.createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName, latencyCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        // api.createContextConnectivityContextConnectivityServiceNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create bandwidth-profile by ID
     *
     * Create operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        BandwidthProfile bandwidthProfile = null;
        // api.createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(uuid, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Create committed-burst-size by ID
     *
     * Create operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue committedBurstSize = null;
        // api.createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create committed-information-rate by ID
     *
     * Create operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue committedInformationRate = null;
        // api.createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create peak-burst-size by ID
     *
     * Create operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue peakBurstSize = null;
        // api.createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create peak-information-rate by ID
     *
     * Create operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue peakInformationRate = null;
        // api.createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create requested-capacity by ID
     *
     * Create operation of resource: requested-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdTest() throws ApiException {
        String uuid = null;
        Capacity requestedCapacity = null;
        // api.createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(uuid, requestedCapacity);

        // TODO: test validations
    }
    
    /**
     * Create total-size by ID
     *
     * Create operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue totalSize = null;
        // api.createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(uuid, totalSize);

        // TODO: test validations
    }
    
    /**
     * Create resilience-type by ID
     *
     * Create operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdTest() throws ApiException {
        String uuid = null;
        ResilienceType resilienceType = null;
        // api.createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(uuid, resilienceType);

        // TODO: test validations
    }
    
    /**
     * Create risk-diversity-characteristic by ID
     *
     * Create operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic riskDiversityCharacteristic = null;
        // api.createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName, riskDiversityCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Create schedule by ID
     *
     * Create operation of resource: schedule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceScheduleScheduleByIdTest() throws ApiException {
        String uuid = null;
        TimeRange schedule = null;
        // api.createContextConnectivityContextConnectivityServiceScheduleScheduleById(uuid, schedule);

        // TODO: test validations
    }
    
    /**
     * Delete arof-connection-end-point-spec by ID
     *
     * Delete operation of resource: arof-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        // api.deleteContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete connection-end-point by ID
     *
     * Delete operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        // api.deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        // api.deleteContextConnectivityContextConnectionConnectionEndPointNameNameById(uuid, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete arof-connection-end-point-spec by ID
     *
     * Delete operation of resource: arof-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // api.deleteContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete connection-end-point by ID
     *
     * Delete operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // api.deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        // api.deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete connectivity-context by ID
     *
     * Delete operation of resource: connectivity-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityContextByIdTest() throws ApiException {
        // api.deleteContextConnectivityContextConnectivityContextById();

        // TODO: test validations
    }
    
    /**
     * Delete connectivity-service by ID
     *
     * Delete operation of resource: connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdTest() throws ApiException {
        String uuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceConnectivityServiceById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete coroute-inclusion by ID
     *
     * Delete operation of resource: coroute-inclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdTest() throws ApiException {
        String uuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete cost-characteristic by ID
     *
     * Delete operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        // api.deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(uuid, costName);

        // TODO: test validations
    }
    
    /**
     * Delete diversity-exclusion by ID
     *
     * Delete operation of resource: diversity-exclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdTest() throws ApiException {
        String uuid = null;
        String connectivityServiceUuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(uuid, connectivityServiceUuid);

        // TODO: test validations
    }
    
    /**
     * Delete bandwidth-profile by ID
     *
     * Delete operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete committed-burst-size by ID
     *
     * Delete operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete committed-information-rate by ID
     *
     * Delete operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete peak-burst-size by ID
     *
     * Delete operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete peak-information-rate by ID
     *
     * Delete operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete capacity by ID
     *
     * Delete operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete total-size by ID
     *
     * Delete operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete arof-connection-end-point-spec by ID
     *
     * Delete operation of resource: arof-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete connection-end-point by ID
     *
     * Delete operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete end-point by ID
     *
     * Delete operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointEndPointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointNameNameById(uuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete arof-service-interface-point-spec by ID
     *
     * Delete operation of resource: arof-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete service-interface-point by ID
     *
     * Delete operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete service-interface-point by ID
     *
     * Delete operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0Test() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete latency-characteristic by ID
     *
     * Delete operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        // api.deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        // api.deleteContextConnectivityContextConnectivityServiceNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete bandwidth-profile by ID
     *
     * Delete operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete committed-burst-size by ID
     *
     * Delete operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete committed-information-rate by ID
     *
     * Delete operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete peak-burst-size by ID
     *
     * Delete operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete peak-information-rate by ID
     *
     * Delete operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete requested-capacity by ID
     *
     * Delete operation of resource: requested-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdTest() throws ApiException {
        String uuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete total-size by ID
     *
     * Delete operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete resilience-type by ID
     *
     * Delete operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdTest() throws ApiException {
        String uuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete risk-diversity-characteristic by ID
     *
     * Delete operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        // api.deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Delete schedule by ID
     *
     * Delete operation of resource: schedule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdTest() throws ApiException {
        String uuid = null;
        // api.deleteContextConnectivityContextConnectivityServiceScheduleScheduleById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection
     *
     * Retrieve operation of resource: connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionTest() throws ApiException {
        // List<String> response = api.retrieveContextConnectivityContextConnectionConnection();

        // TODO: test validations
    }
    
    /**
     * Retrieve connection by ID
     *
     * Retrieve operation of resource: connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionByIdTest() throws ApiException {
        String uuid = null;
        // Connection response = api.retrieveContextConnectivityContextConnectionConnectionById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point by ID
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        // ConnectionEndPointRef response = api.retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(uuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve arof-connection-end-point-spec
     *
     * Retrieve operation of resource: arof-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        // ArofConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel
     *
     * Retrieve operation of resource: media-channel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        // ArofPropertiesPac response = api.retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        // FrequencyConstraint response = api.retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        // SpectrumBand response = api.retrieveContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point by ID
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        // NodeEdgePointRef response = api.retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(uuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPoint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        // ConnectionEndPointSchema response = api.retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0Test() throws ApiException {
        String uuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        // ConnectionEndPointRef response = api.retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0(uuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionConnectionEndPointNameName(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextConnectivityContextConnectionConnectionEndPointNameNameById(uuid, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve parent-node-edge-point
     *
     * Retrieve operation of resource: parent-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        // NodeEdgePointRef response = api.retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve lower-connection
     *
     * Retrieve operation of resource: lower-connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionLowerConnectionLowerConnection(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve lower-connection by ID
     *
     * Retrieve operation of resource: lower-connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdTest() throws ApiException {
        String uuid = null;
        String connectionUuid = null;
        // ConnectionRef response = api.retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionById(uuid, connectionUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionNameNameTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextConnectivityContextConnectionNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point by ID
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        // ConnectionEndPointRef response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve arof-connection-end-point-spec
     *
     * Retrieve operation of resource: arof-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // ArofConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel
     *
     * Retrieve operation of resource: media-channel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // ArofPropertiesPac response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // FrequencyConstraint response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // SpectrumBand response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point by ID
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        // NodeEdgePointRef response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPoint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // ConnectionEndPointSchema response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0Test() throws ApiException {
        String uuid = null;
        String localId = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        // ConnectionEndPointRef response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameName(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve parent-node-edge-point
     *
     * Retrieve operation of resource: parent-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // NodeEdgePointRef response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionRouteNameName(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextConnectivityContextConnectionRouteNameNameById(uuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve route
     *
     * Retrieve operation of resource: route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteRouteTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionRouteRoute(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve route by ID
     *
     * Retrieve operation of resource: route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteRouteByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // Route response = api.retrieveContextConnectivityContextConnectionRouteRouteById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve supported-client-link
     *
     * Retrieve operation of resource: supported-client-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLink(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supported-client-link by ID
     *
     * Retrieve operation of resource: supported-client-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuidLinkUuid = null;
        // LinkRef response = api.retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkById(uuid, topologyUuidLinkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlNameNameTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionSwitchControlNameName(uuid, switchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextConnectivityContextConnectionSwitchControlNameNameById(uuid, switchControlUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve resilience-type
     *
     * Retrieve operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        // ResilienceType response = api.retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceType(uuid, switchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sub-switch-control
     *
     * Retrieve operation of resource: sub-switch-control
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControl(uuid, switchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sub-switch-control by ID
     *
     * Retrieve operation of resource: sub-switch-control
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String connectionUuidSwitchControlUuid = null;
        // SwitchControlRef response = api.retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlById(uuid, switchControlUuid, connectionUuidSwitchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve switch-control
     *
     * Retrieve operation of resource: switch-control
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchControlTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchControl(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve switch-control by ID
     *
     * Retrieve operation of resource: switch-control
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        // SwitchControl response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchControlById(uuid, switchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchNameName(uuid, switchControlUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameById(uuid, switchControlUuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-connection-end-point
     *
     * Retrieve operation of resource: selected-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint(uuid, switchControlUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-connection-end-point by ID
     *
     * Retrieve operation of resource: selected-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        // ConnectionEndPointRef response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(uuid, switchControlUuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-route
     *
     * Retrieve operation of resource: selected-route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute(uuid, switchControlUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-route by ID
     *
     * Retrieve operation of resource: selected-route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        String connectionUuidRouteLocalId = null;
        // RouteRef response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(uuid, switchControlUuid, localId, connectionUuidRouteLocalId);

        // TODO: test validations
    }
    
    /**
     * Retrieve switch
     *
     * Retrieve operation of resource: switch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitch(uuid, switchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve switch by ID
     *
     * Retrieve operation of resource: switch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        // ModelSwitch response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchById(uuid, switchControlUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve connectivity-context
     *
     * Retrieve operation of resource: connectivity-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityContextTest() throws ApiException {
        // ConnectivityContext response = api.retrieveContextConnectivityContextConnectivityContext();

        // TODO: test validations
    }
    
    /**
     * Retrieve avoid-topology
     *
     * Retrieve operation of resource: avoid-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopology(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve avoid-topology by ID
     *
     * Retrieve operation of resource: avoid-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuid = null;
        // TopologyRef response = api.retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyById(uuid, topologyUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection
     *
     * Retrieve operation of resource: connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceConnectionConnectionTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceConnectionConnection(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection by ID
     *
     * Retrieve operation of resource: connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdTest() throws ApiException {
        String uuid = null;
        String connectionUuid = null;
        // ConnectionRef response = api.retrieveContextConnectivityContextConnectivityServiceConnectionConnectionById(uuid, connectionUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connectivity-service
     *
     * Retrieve operation of resource: connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceConnectivityServiceTest() throws ApiException {
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceConnectivityService();

        // TODO: test validations
    }
    
    /**
     * Retrieve connectivity-service by ID
     *
     * Retrieve operation of resource: connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdTest() throws ApiException {
        String uuid = null;
        // ConnectivityService response = api.retrieveContextConnectivityContextConnectivityServiceConnectivityServiceById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve coroute-inclusion
     *
     * Retrieve operation of resource: coroute-inclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionTest() throws ApiException {
        String uuid = null;
        // ConnectivityServiceRef response = api.retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusion(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        // CostCharacteristic response = api.retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(uuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve diversity-exclusion
     *
     * Retrieve operation of resource: diversity-exclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusion(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve diversity-exclusion by ID
     *
     * Retrieve operation of resource: diversity-exclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdTest() throws ApiException {
        String uuid = null;
        String connectivityServiceUuid = null;
        // ConnectivityServiceRef response = api.retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(uuid, connectivityServiceUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // BandwidthProfile response = api.retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfile(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve capacity
     *
     * Retrieve operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // Capacity response = api.retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacity(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSize(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point by ID
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        // ConnectionEndPointRef response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve arof-connection-end-point-spec
     *
     * Retrieve operation of resource: arof-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // ArofConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel
     *
     * Retrieve operation of resource: media-channel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // ArofPropertiesPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point by ID
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        // NodeEdgePointRef response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPoint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // ConnectionEndPointSchema response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0Test() throws ApiException {
        String uuid = null;
        String localId = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        // ConnectionEndPointRef response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameName(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve parent-node-edge-point
     *
     * Retrieve operation of resource: parent-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        // NodeEdgePointRef response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve end-point
     *
     * Retrieve operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointEndPointTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointEndPoint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve end-point by ID
     *
     * Retrieve operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // ConnectivityServiceEndPoint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointEndPointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointNameName(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointNameNameById(uuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve arof-pool
     *
     * Retrieve operation of resource: arof-pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPoolTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // ArofPoolSchema response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofPoolArofPool(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve arof-service-interface-point-spec
     *
     * Retrieve operation of resource: arof-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // ArofServiceInterfacePointSpec response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpec(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // Capacity response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacity(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // BandwidthProfile response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameName(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        // ServiceInterfacePointRef response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePoint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point by ID
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // ServiceInterfacePointSchema response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // BandwidthProfile response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // Capacity response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-link
     *
     * Retrieve operation of resource: exclude-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLink(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-link by ID
     *
     * Retrieve operation of resource: exclude-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuidLinkUuid = null;
        // LinkRef response = api.retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkById(uuid, topologyUuidLinkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-node
     *
     * Retrieve operation of resource: exclude-node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNode(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-node by ID
     *
     * Retrieve operation of resource: exclude-node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuidNodeUuid = null;
        // NodeRef response = api.retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeById(uuid, topologyUuidNodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-path
     *
     * Retrieve operation of resource: exclude-path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePath(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve exclude-path by ID
     *
     * Retrieve operation of resource: exclude-path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathByIdTest() throws ApiException {
        String uuid = null;
        String pathUuid = null;
        // PathRef response = api.retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathById(uuid, pathUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-link
     *
     * Retrieve operation of resource: include-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLink(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-link by ID
     *
     * Retrieve operation of resource: include-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuidLinkUuid = null;
        // LinkRef response = api.retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkById(uuid, topologyUuidLinkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-node
     *
     * Retrieve operation of resource: include-node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNode(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-node by ID
     *
     * Retrieve operation of resource: include-node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuidNodeUuid = null;
        // NodeRef response = api.retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeById(uuid, topologyUuidNodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-path
     *
     * Retrieve operation of resource: include-path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePath(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-path by ID
     *
     * Retrieve operation of resource: include-path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathByIdTest() throws ApiException {
        String uuid = null;
        String pathUuid = null;
        // PathRef response = api.retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathById(uuid, pathUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-topology
     *
     * Retrieve operation of resource: include-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopology(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-topology by ID
     *
     * Retrieve operation of resource: include-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuid = null;
        // TopologyRef response = api.retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyById(uuid, topologyUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        // LatencyCharacteristic response = api.retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceNameNameTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        // NameAndValue response = api.retrieveContextConnectivityContextConnectivityServiceNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        // BandwidthProfile response = api.retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfile(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve requested-capacity
     *
     * Retrieve operation of resource: requested-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityTest() throws ApiException {
        String uuid = null;
        // Capacity response = api.retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacity(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        // CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve resilience-type
     *
     * Retrieve operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeTest() throws ApiException {
        String uuid = null;
        // ResilienceType response = api.retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceType(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-diversity-characteristic
     *
     * Retrieve operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicTest() throws ApiException {
        String uuid = null;
        // List<String> response = api.retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-diversity-characteristic by ID
     *
     * Retrieve operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        // RiskCharacteristic response = api.retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve schedule
     *
     * Retrieve operation of resource: schedule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceScheduleScheduleTest() throws ApiException {
        String uuid = null;
        // TimeRange response = api.retrieveContextConnectivityContextConnectivityServiceScheduleSchedule(uuid);

        // TODO: test validations
    }
    
    /**
     * Update arof-connection-end-point-spec by ID
     *
     * Update operation of resource: arof-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        ArofConnectionEndPointSpec arofConnectionEndPointSpec = null;
        // api.updateContextConnectivityContextConnectionConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(uuid, connectionEndPointUuid, arofConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update connection-end-point by ID
     *
     * Update operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        // api.updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(uuid, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        // api.updateContextConnectivityContextConnectionConnectionEndPointNameNameById(uuid, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update arof-connection-end-point-spec by ID
     *
     * Update operation of resource: arof-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ArofConnectionEndPointSpec arofConnectionEndPointSpec = null;
        // api.updateContextConnectivityContextConnectionRouteConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update connection-end-point by ID
     *
     * Update operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        // api.updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        // api.updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update connectivity-context by ID
     *
     * Update operation of resource: connectivity-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityContextByIdTest() throws ApiException {
        ConnectivityContext connectivityContext = null;
        // api.updateContextConnectivityContextConnectivityContextById(connectivityContext);

        // TODO: test validations
    }
    
    /**
     * Update connectivity-service by ID
     *
     * Update operation of resource: connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdTest() throws ApiException {
        String uuid = null;
        ConnectivityService connectivityService = null;
        // api.updateContextConnectivityContextConnectivityServiceConnectivityServiceById(uuid, connectivityService);

        // TODO: test validations
    }
    
    /**
     * Update coroute-inclusion by ID
     *
     * Update operation of resource: coroute-inclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdTest() throws ApiException {
        String uuid = null;
        ConnectivityServiceRef corouteInclusion = null;
        // api.updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(uuid, corouteInclusion);

        // TODO: test validations
    }
    
    /**
     * Update cost-characteristic by ID
     *
     * Update operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic costCharacteristic = null;
        // api.updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(uuid, costName, costCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Update diversity-exclusion by ID
     *
     * Update operation of resource: diversity-exclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdTest() throws ApiException {
        String uuid = null;
        String connectivityServiceUuid = null;
        ConnectivityServiceRef diversityExclusion = null;
        // api.updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(uuid, connectivityServiceUuid, diversityExclusion);

        // TODO: test validations
    }
    
    /**
     * Update bandwidth-profile by ID
     *
     * Update operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        BandwidthProfile bandwidthProfile = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(uuid, localId, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Update committed-burst-size by ID
     *
     * Update operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedBurstSize = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, localId, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update committed-information-rate by ID
     *
     * Update operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedInformationRate = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, localId, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update peak-burst-size by ID
     *
     * Update operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakBurstSize = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, localId, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update peak-information-rate by ID
     *
     * Update operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakInformationRate = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, localId, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update capacity by ID
     *
     * Update operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Capacity capacity = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(uuid, localId, capacity);

        // TODO: test validations
    }
    
    /**
     * Update total-size by ID
     *
     * Update operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue totalSize = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(uuid, localId, totalSize);

        // TODO: test validations
    }
    
    /**
     * Update arof-connection-end-point-spec by ID
     *
     * Update operation of resource: arof-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ArofConnectionEndPointSpec arofConnectionEndPointSpec = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, arofConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update connection-end-point by ID
     *
     * Update operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update end-point by ID
     *
     * Update operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ConnectivityServiceEndPoint endPoint = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointEndPointById(uuid, localId, endPoint);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue name = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointNameNameById(uuid, localId, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update arof-service-interface-point-spec by ID
     *
     * Update operation of resource: arof-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ArofServiceInterfacePointSpec arofServiceInterfacePointSpec = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointArofServiceInterfacePointSpecArofServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, arofServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update service-interface-point by ID
     *
     * Update operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ServiceInterfacePointRef serviceInterfacePoint = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Update service-interface-point by ID
     *
     * Update operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0Test() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ServiceInterfacePointSchema serviceInterfacePoint = null;
        // api.updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Update latency-characteristic by ID
     *
     * Update operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic latencyCharacteristic = null;
        // api.updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName, latencyCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        // api.updateContextConnectivityContextConnectivityServiceNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update bandwidth-profile by ID
     *
     * Update operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        BandwidthProfile bandwidthProfile = null;
        // api.updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(uuid, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Update committed-burst-size by ID
     *
     * Update operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue committedBurstSize = null;
        // api.updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update committed-information-rate by ID
     *
     * Update operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue committedInformationRate = null;
        // api.updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update peak-burst-size by ID
     *
     * Update operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue peakBurstSize = null;
        // api.updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update peak-information-rate by ID
     *
     * Update operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue peakInformationRate = null;
        // api.updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update requested-capacity by ID
     *
     * Update operation of resource: requested-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdTest() throws ApiException {
        String uuid = null;
        Capacity requestedCapacity = null;
        // api.updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(uuid, requestedCapacity);

        // TODO: test validations
    }
    
    /**
     * Update total-size by ID
     *
     * Update operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue totalSize = null;
        // api.updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(uuid, totalSize);

        // TODO: test validations
    }
    
    /**
     * Update resilience-type by ID
     *
     * Update operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdTest() throws ApiException {
        String uuid = null;
        ResilienceType resilienceType = null;
        // api.updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(uuid, resilienceType);

        // TODO: test validations
    }
    
    /**
     * Update risk-diversity-characteristic by ID
     *
     * Update operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic riskDiversityCharacteristic = null;
        // api.updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName, riskDiversityCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Update schedule by ID
     *
     * Update operation of resource: schedule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdTest() throws ApiException {
        String uuid = null;
        TimeRange schedule = null;
        // api.updateContextConnectivityContextConnectivityServiceScheduleScheduleById(uuid, schedule);

        // TODO: test validations
    }
    
}
