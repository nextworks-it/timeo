/*
 * tapi-photonic-media API
 * tapi-photonic-media API generated from tapi-photonic-media@2018-12-10.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * This data-type holds the frequency constraint information in terms of GridType ( FIXED grid (DWDM or CWDM) or FLEX grid) and AdjustmentGranularity.
 */
@ApiModel(description = "This data-type holds the frequency constraint information in terms of GridType ( FIXED grid (DWDM or CWDM) or FLEX grid) and AdjustmentGranularity.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-09T14:10:37.064+02:00")
public class FrequencyConstraint {
  /**
   * Adjustment granularity in Gigahertz. As per ITU-T G.694.1, it is used to calculate nominal central frequency (in THz)
   */
  @JsonAdapter(AdjustmentGranularityEnum.Adapter.class)
  public enum AdjustmentGranularityEnum {
    G_100GHZ("G_100GHZ"),
    
    G_50GHZ("G_50GHZ"),
    
    G_25GHZ("G_25GHZ"),
    
    G_12_5GHZ("G_12_5GHZ"),
    
    G_6_25GHZ("G_6_25GHZ"),
    
    G_3_125GHZ("G_3_125GHZ"),
    
    UNCONSTRAINED("UNCONSTRAINED");

    private String value;

    AdjustmentGranularityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdjustmentGranularityEnum fromValue(String text) {
      for (AdjustmentGranularityEnum b : AdjustmentGranularityEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AdjustmentGranularityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdjustmentGranularityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdjustmentGranularityEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AdjustmentGranularityEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("adjustment-granularity")
  private AdjustmentGranularityEnum adjustmentGranularity = null;

  /**
   * Specifies the frequency grid standard used to determine the nominal central frequency and frequency slot width
   */
  @JsonAdapter(GridTypeEnum.Adapter.class)
  public enum GridTypeEnum {
    DWDM("DWDM"),
    
    CWDM("CWDM"),
    
    FLEX("FLEX"),
    
    GRIDLESS("GRIDLESS"),
    
    UNSPECIFIED("UNSPECIFIED");

    private String value;

    GridTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GridTypeEnum fromValue(String text) {
      for (GridTypeEnum b : GridTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GridTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GridTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GridTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return GridTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("grid-type")
  private GridTypeEnum gridType = null;

  public FrequencyConstraint adjustmentGranularity(AdjustmentGranularityEnum adjustmentGranularity) {
    this.adjustmentGranularity = adjustmentGranularity;
    return this;
  }

   /**
   * Adjustment granularity in Gigahertz. As per ITU-T G.694.1, it is used to calculate nominal central frequency (in THz)
   * @return adjustmentGranularity
  **/
  @ApiModelProperty(value = "Adjustment granularity in Gigahertz. As per ITU-T G.694.1, it is used to calculate nominal central frequency (in THz)")
  public AdjustmentGranularityEnum getAdjustmentGranularity() {
    return adjustmentGranularity;
  }

  public void setAdjustmentGranularity(AdjustmentGranularityEnum adjustmentGranularity) {
    this.adjustmentGranularity = adjustmentGranularity;
  }

  public FrequencyConstraint gridType(GridTypeEnum gridType) {
    this.gridType = gridType;
    return this;
  }

   /**
   * Specifies the frequency grid standard used to determine the nominal central frequency and frequency slot width
   * @return gridType
  **/
  @ApiModelProperty(value = "Specifies the frequency grid standard used to determine the nominal central frequency and frequency slot width")
  public GridTypeEnum getGridType() {
    return gridType;
  }

  public void setGridType(GridTypeEnum gridType) {
    this.gridType = gridType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FrequencyConstraint frequencyConstraint = (FrequencyConstraint) o;
    return Objects.equals(this.adjustmentGranularity, frequencyConstraint.adjustmentGranularity) &&
        Objects.equals(this.gridType, frequencyConstraint.gridType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustmentGranularity, gridType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FrequencyConstraint {\n");
    
    sb.append("    adjustmentGranularity: ").append(toIndentedString(adjustmentGranularity)).append("\n");
    sb.append("    gridType: ").append(toIndentedString(gridType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

