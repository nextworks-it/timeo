/*
 * tapi-arof API
 * tapi-arof API generated from tapi-arof.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ContextSchema;
import io.swagger.client.model.CreateConnectivityServiceRPCInputRequest;
import io.swagger.client.model.CreateConnectivityServiceRPCInputSchema;
import io.swagger.client.model.CreateConnectivityServiceRPCOutputSchema;
import io.swagger.client.model.DeleteConnectivityServiceRPCInputRequest;
import io.swagger.client.model.DeleteConnectivityServiceRPCInputSchema;
import io.swagger.client.model.GetConnectionDetailsRPCInputSchema;
import io.swagger.client.model.GetConnectionDetailsRPCOutputSchema;
import io.swagger.client.model.GetConnectionEndPointDetailsRPCInputSchema;
import io.swagger.client.model.GetConnectionEndPointDetailsRPCOutputSchema;
import io.swagger.client.model.GetConnectivityServiceDetailsRPCInputSchema;
import io.swagger.client.model.GetConnectivityServiceDetailsRPCOutputSchema;
import io.swagger.client.model.GetConnectivityServiceListRPCOutputSchema;
import io.swagger.client.model.GetLinkDetailsRPCInputSchema;
import io.swagger.client.model.GetLinkDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeDetailsRPCInputSchema;
import io.swagger.client.model.GetNodeDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCInputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCInputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetServiceInterfacePointListRPCOutputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCInputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCOutputSchema;
import io.swagger.client.model.GetTopologyListRPCOutputSchema;
import io.swagger.client.model.UpdateConnectivityServiceRPCInputSchema;
import io.swagger.client.model.UpdateConnectivityServiceRPCOutputSchema;
import io.swagger.client.model.UpdateServiceInterfacePointRPCInputSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createContextById
     * @param context contextbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextByIdCall(ContextSchema context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = context;

        // create path and map variables
        String localVarPath = "/config/context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextByIdValidateBeforeCall(ContextSchema context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling createContextById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextByIdCall(context, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create context by ID
     * Create operation of resource: context
     * @param context contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextById(ContextSchema context) throws ApiException {
        createContextByIdWithHttpInfo(context);
    }

    /**
     * Create context by ID
     * Create operation of resource: context
     * @param context contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextByIdWithHttpInfo(ContextSchema context) throws ApiException {
        com.squareup.okhttp.Call call = createContextByIdValidateBeforeCall(context, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create context by ID (asynchronously)
     * Create operation of resource: context
     * @param context contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextByIdAsync(ContextSchema context, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextByIdValidateBeforeCall(context, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    
    
    /**
     * Build call for createCreateConnectivityServiceById
     * @param createConnectivityService create-connectivity-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCreateConnectivityServiceByIdCall(CreateConnectivityServiceRPCInputRequest createConnectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createConnectivityService;

        // create path and map variables
        //TODO: modified this to match CTTCs implementation (as requested by them in skype)
        String uuid = createConnectivityService.getCreateConnectivityServiceRPCInputSchema().getUuid();
        String localVarPath = "/config/context/connectivity-service/"+uuid+"/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    
    /**
     * Build call for createCreateConnectivityServiceById
     * @param createConnectivityService create-connectivity-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCreateConnectivityServiceByIdCall(CreateConnectivityServiceRPCInputSchema createConnectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createConnectivityService;

        // create path and map variables
      //TODO: modified this to match CTTCs implementation (as requested by them in skype)
        String uuid = createConnectivityService.getUuid();
        String localVarPath = "/config/context/connectivity-service/"+uuid+"/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCreateConnectivityServiceByIdValidateBeforeCall(CreateConnectivityServiceRPCInputRequest createConnectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createConnectivityService' is set
        if (createConnectivityService == null) {
            throw new ApiException("Missing the required parameter 'createConnectivityService' when calling createCreateConnectivityServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = createCreateConnectivityServiceByIdCall(createConnectivityService, progressListener, progressRequestListener);
        return call;

    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCreateConnectivityServiceByIdValidateBeforeCall(CreateConnectivityServiceRPCInputSchema createConnectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createConnectivityService' is set
        if (createConnectivityService == null) {
            throw new ApiException("Missing the required parameter 'createConnectivityService' when calling createCreateConnectivityServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = createCreateConnectivityServiceByIdCall(createConnectivityService, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create create-connectivity-service by ID
     * Create operation of resource: create-connectivity-service
     * @param createConnectivityService create-connectivity-servicebody object (required)
     * @return CreateConnectivityServiceRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateConnectivityServiceRPCOutputSchema createCreateConnectivityServiceById(CreateConnectivityServiceRPCInputRequest createConnectivityService) throws ApiException {
        ApiResponse<CreateConnectivityServiceRPCOutputSchema> resp = createCreateConnectivityServiceByIdWithHttpInfo(createConnectivityService);
        return resp.getData();
    }
    
    
    /**
     * Create create-connectivity-service by ID
     * Create operation of resource: create-connectivity-service
     * @param createConnectivityService create-connectivity-servicebody object (required)
     * @return CreateConnectivityServiceRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateConnectivityServiceRPCOutputSchema createCreateConnectivityServiceById(CreateConnectivityServiceRPCInputSchema createConnectivityService) throws ApiException {
        ApiResponse<CreateConnectivityServiceRPCOutputSchema> resp = createCreateConnectivityServiceByIdWithHttpInfo(createConnectivityService);
        return resp.getData();
    }
    
    /**
     * Create create-connectivity-service by ID
     * Create operation of resource: create-connectivity-service
     * @param createConnectivityService create-connectivity-servicebody object (required)
     * @return ApiResponse&lt;CreateConnectivityServiceRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateConnectivityServiceRPCOutputSchema> createCreateConnectivityServiceByIdWithHttpInfo(CreateConnectivityServiceRPCInputRequest createConnectivityService) throws ApiException {
        com.squareup.okhttp.Call call = createCreateConnectivityServiceByIdValidateBeforeCall(createConnectivityService, null, null);
        Type localVarReturnType = new TypeToken<CreateConnectivityServiceRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }
    

    /**
     * Create create-connectivity-service by ID
     * Create operation of resource: create-connectivity-service
     * @param createConnectivityService create-connectivity-servicebody object (required)
     * @return ApiResponse&lt;CreateConnectivityServiceRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateConnectivityServiceRPCOutputSchema> createCreateConnectivityServiceByIdWithHttpInfo(CreateConnectivityServiceRPCInputSchema createConnectivityService) throws ApiException {
        com.squareup.okhttp.Call call = createCreateConnectivityServiceByIdValidateBeforeCall(createConnectivityService, null, null);
        Type localVarReturnType = new TypeToken<CreateConnectivityServiceRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create create-connectivity-service by ID (asynchronously)
     * Create operation of resource: create-connectivity-service
     * @param createConnectivityService create-connectivity-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCreateConnectivityServiceByIdAsync(CreateConnectivityServiceRPCInputSchema createConnectivityService, final ApiCallback<CreateConnectivityServiceRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCreateConnectivityServiceByIdValidateBeforeCall(createConnectivityService, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateConnectivityServiceRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
    /**
     * Build call for createDeleteConnectivityServiceById
     * @param deleteConnectivityService delete-connectivity-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDeleteConnectivityServiceByIdCall(String connectivityServiceUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        //modified the path to match CTTCs implementation (see createCreateConnectivity...
        
        String localVarPath = "/config/context/connectivity-service/"+connectivityServiceUuid+"/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    /**
     * Build call for createDeleteConnectivityServiceById
     * @param deleteConnectivityService delete-connectivity-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDeleteConnectivityServiceByIdCall(DeleteConnectivityServiceRPCInputSchema deleteConnectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteConnectivityService;

        // create path and map variables
        String localVarPath = "/operations/delete-connectivity-service/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDeleteConnectivityServiceByIdValidateBeforeCall(String connectivityServiceUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deleteConnectivityService' is set
        if (connectivityServiceUuid == null) {
            throw new ApiException("Missing the required parameter 'deleteConnectivityService' when calling createDeleteConnectivityServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = createDeleteConnectivityServiceByIdCall(connectivityServiceUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create delete-connectivity-service by ID
     * Create operation of resource: delete-connectivity-service
     * @param deleteConnectivityService delete-connectivity-servicebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createDeleteConnectivityServiceById(String connectivityServiceUuid) throws ApiException {
        createDeleteConnectivityServiceByIdWithHttpInfo(connectivityServiceUuid);
    }

    /**
     * Create delete-connectivity-service by ID
     * Create operation of resource: delete-connectivity-service
     * @param deleteConnectivityService delete-connectivity-servicebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createDeleteConnectivityServiceByIdWithHttpInfo(String connectivityServiceUuid) throws ApiException {
        com.squareup.okhttp.Call call = createDeleteConnectivityServiceByIdValidateBeforeCall(connectivityServiceUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create delete-connectivity-service by ID (asynchronously)
     * Create operation of resource: delete-connectivity-service
     * @param deleteConnectivityService delete-connectivity-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDeleteConnectivityServiceByIdAsync(String connectivityServiceUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDeleteConnectivityServiceByIdValidateBeforeCall(connectivityServiceUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createGetConnectionDetailsById
     * @param getConnectionDetails get-connection-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetConnectionDetailsByIdCall(GetConnectionDetailsRPCInputSchema getConnectionDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getConnectionDetails;

        // create path and map variables
        String localVarPath = "/operations/get-connection-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetConnectionDetailsByIdValidateBeforeCall(GetConnectionDetailsRPCInputSchema getConnectionDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getConnectionDetails' is set
        if (getConnectionDetails == null) {
            throw new ApiException("Missing the required parameter 'getConnectionDetails' when calling createGetConnectionDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetConnectionDetailsByIdCall(getConnectionDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-connection-details by ID
     * Create operation of resource: get-connection-details
     * @param getConnectionDetails get-connection-detailsbody object (required)
     * @return GetConnectionDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetConnectionDetailsRPCOutputSchema createGetConnectionDetailsById(GetConnectionDetailsRPCInputSchema getConnectionDetails) throws ApiException {
        ApiResponse<GetConnectionDetailsRPCOutputSchema> resp = createGetConnectionDetailsByIdWithHttpInfo(getConnectionDetails);
        return resp.getData();
    }

    /**
     * Create get-connection-details by ID
     * Create operation of resource: get-connection-details
     * @param getConnectionDetails get-connection-detailsbody object (required)
     * @return ApiResponse&lt;GetConnectionDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetConnectionDetailsRPCOutputSchema> createGetConnectionDetailsByIdWithHttpInfo(GetConnectionDetailsRPCInputSchema getConnectionDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetConnectionDetailsByIdValidateBeforeCall(getConnectionDetails, null, null);
        Type localVarReturnType = new TypeToken<GetConnectionDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-connection-details by ID (asynchronously)
     * Create operation of resource: get-connection-details
     * @param getConnectionDetails get-connection-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetConnectionDetailsByIdAsync(GetConnectionDetailsRPCInputSchema getConnectionDetails, final ApiCallback<GetConnectionDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetConnectionDetailsByIdValidateBeforeCall(getConnectionDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetConnectionDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetConnectionEndPointDetailsById
     * @param getConnectionEndPointDetails get-connection-end-point-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetConnectionEndPointDetailsByIdCall(GetConnectionEndPointDetailsRPCInputSchema getConnectionEndPointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getConnectionEndPointDetails;

        // create path and map variables
        String localVarPath = "/operations/get-connection-end-point-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetConnectionEndPointDetailsByIdValidateBeforeCall(GetConnectionEndPointDetailsRPCInputSchema getConnectionEndPointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getConnectionEndPointDetails' is set
        if (getConnectionEndPointDetails == null) {
            throw new ApiException("Missing the required parameter 'getConnectionEndPointDetails' when calling createGetConnectionEndPointDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetConnectionEndPointDetailsByIdCall(getConnectionEndPointDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-connection-end-point-details by ID
     * Create operation of resource: get-connection-end-point-details
     * @param getConnectionEndPointDetails get-connection-end-point-detailsbody object (required)
     * @return GetConnectionEndPointDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetConnectionEndPointDetailsRPCOutputSchema createGetConnectionEndPointDetailsById(GetConnectionEndPointDetailsRPCInputSchema getConnectionEndPointDetails) throws ApiException {
        ApiResponse<GetConnectionEndPointDetailsRPCOutputSchema> resp = createGetConnectionEndPointDetailsByIdWithHttpInfo(getConnectionEndPointDetails);
        return resp.getData();
    }

    /**
     * Create get-connection-end-point-details by ID
     * Create operation of resource: get-connection-end-point-details
     * @param getConnectionEndPointDetails get-connection-end-point-detailsbody object (required)
     * @return ApiResponse&lt;GetConnectionEndPointDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetConnectionEndPointDetailsRPCOutputSchema> createGetConnectionEndPointDetailsByIdWithHttpInfo(GetConnectionEndPointDetailsRPCInputSchema getConnectionEndPointDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetConnectionEndPointDetailsByIdValidateBeforeCall(getConnectionEndPointDetails, null, null);
        Type localVarReturnType = new TypeToken<GetConnectionEndPointDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-connection-end-point-details by ID (asynchronously)
     * Create operation of resource: get-connection-end-point-details
     * @param getConnectionEndPointDetails get-connection-end-point-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetConnectionEndPointDetailsByIdAsync(GetConnectionEndPointDetailsRPCInputSchema getConnectionEndPointDetails, final ApiCallback<GetConnectionEndPointDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetConnectionEndPointDetailsByIdValidateBeforeCall(getConnectionEndPointDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetConnectionEndPointDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetConnectivityServiceDetailsById
     * @param getConnectivityServiceDetails get-connectivity-service-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetConnectivityServiceDetailsByIdCall(GetConnectivityServiceDetailsRPCInputSchema getConnectivityServiceDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getConnectivityServiceDetails;

        // create path and map variables
        String localVarPath = "/operations/get-connectivity-service-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetConnectivityServiceDetailsByIdValidateBeforeCall(GetConnectivityServiceDetailsRPCInputSchema getConnectivityServiceDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getConnectivityServiceDetails' is set
        if (getConnectivityServiceDetails == null) {
            throw new ApiException("Missing the required parameter 'getConnectivityServiceDetails' when calling createGetConnectivityServiceDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetConnectivityServiceDetailsByIdCall(getConnectivityServiceDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-connectivity-service-details by ID
     * Create operation of resource: get-connectivity-service-details
     * @param getConnectivityServiceDetails get-connectivity-service-detailsbody object (required)
     * @return GetConnectivityServiceDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetConnectivityServiceDetailsRPCOutputSchema createGetConnectivityServiceDetailsById(GetConnectivityServiceDetailsRPCInputSchema getConnectivityServiceDetails) throws ApiException {
        ApiResponse<GetConnectivityServiceDetailsRPCOutputSchema> resp = createGetConnectivityServiceDetailsByIdWithHttpInfo(getConnectivityServiceDetails);
        return resp.getData();
    }

    /**
     * Create get-connectivity-service-details by ID
     * Create operation of resource: get-connectivity-service-details
     * @param getConnectivityServiceDetails get-connectivity-service-detailsbody object (required)
     * @return ApiResponse&lt;GetConnectivityServiceDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetConnectivityServiceDetailsRPCOutputSchema> createGetConnectivityServiceDetailsByIdWithHttpInfo(GetConnectivityServiceDetailsRPCInputSchema getConnectivityServiceDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetConnectivityServiceDetailsByIdValidateBeforeCall(getConnectivityServiceDetails, null, null);
        Type localVarReturnType = new TypeToken<GetConnectivityServiceDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-connectivity-service-details by ID (asynchronously)
     * Create operation of resource: get-connectivity-service-details
     * @param getConnectivityServiceDetails get-connectivity-service-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetConnectivityServiceDetailsByIdAsync(GetConnectivityServiceDetailsRPCInputSchema getConnectivityServiceDetails, final ApiCallback<GetConnectivityServiceDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetConnectivityServiceDetailsByIdValidateBeforeCall(getConnectivityServiceDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetConnectivityServiceDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetConnectivityServiceListById
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetConnectivityServiceListByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/get-connectivity-service-list/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetConnectivityServiceListByIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createGetConnectivityServiceListByIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-connectivity-service-list by ID
     * Create operation of resource: get-connectivity-service-list
     * @return GetConnectivityServiceListRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetConnectivityServiceListRPCOutputSchema createGetConnectivityServiceListById() throws ApiException {
        ApiResponse<GetConnectivityServiceListRPCOutputSchema> resp = createGetConnectivityServiceListByIdWithHttpInfo();
        return resp.getData();
    }

    /**
     * Create get-connectivity-service-list by ID
     * Create operation of resource: get-connectivity-service-list
     * @return ApiResponse&lt;GetConnectivityServiceListRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetConnectivityServiceListRPCOutputSchema> createGetConnectivityServiceListByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = createGetConnectivityServiceListByIdValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetConnectivityServiceListRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-connectivity-service-list by ID (asynchronously)
     * Create operation of resource: get-connectivity-service-list
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetConnectivityServiceListByIdAsync(final ApiCallback<GetConnectivityServiceListRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetConnectivityServiceListByIdValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetConnectivityServiceListRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetLinkDetailsById
     * @param getLinkDetails get-link-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetLinkDetailsByIdCall(GetLinkDetailsRPCInputSchema getLinkDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getLinkDetails;

        // create path and map variables
        String localVarPath = "/operations/get-link-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetLinkDetailsByIdValidateBeforeCall(GetLinkDetailsRPCInputSchema getLinkDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getLinkDetails' is set
        if (getLinkDetails == null) {
            throw new ApiException("Missing the required parameter 'getLinkDetails' when calling createGetLinkDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetLinkDetailsByIdCall(getLinkDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-link-details by ID
     * Create operation of resource: get-link-details
     * @param getLinkDetails get-link-detailsbody object (required)
     * @return GetLinkDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetLinkDetailsRPCOutputSchema createGetLinkDetailsById(GetLinkDetailsRPCInputSchema getLinkDetails) throws ApiException {
        ApiResponse<GetLinkDetailsRPCOutputSchema> resp = createGetLinkDetailsByIdWithHttpInfo(getLinkDetails);
        return resp.getData();
    }

    /**
     * Create get-link-details by ID
     * Create operation of resource: get-link-details
     * @param getLinkDetails get-link-detailsbody object (required)
     * @return ApiResponse&lt;GetLinkDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetLinkDetailsRPCOutputSchema> createGetLinkDetailsByIdWithHttpInfo(GetLinkDetailsRPCInputSchema getLinkDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetLinkDetailsByIdValidateBeforeCall(getLinkDetails, null, null);
        Type localVarReturnType = new TypeToken<GetLinkDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-link-details by ID (asynchronously)
     * Create operation of resource: get-link-details
     * @param getLinkDetails get-link-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetLinkDetailsByIdAsync(GetLinkDetailsRPCInputSchema getLinkDetails, final ApiCallback<GetLinkDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetLinkDetailsByIdValidateBeforeCall(getLinkDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetLinkDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetNodeDetailsById
     * @param getNodeDetails get-node-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetNodeDetailsByIdCall(GetNodeDetailsRPCInputSchema getNodeDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getNodeDetails;

        // create path and map variables
        String localVarPath = "/operations/get-node-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetNodeDetailsByIdValidateBeforeCall(GetNodeDetailsRPCInputSchema getNodeDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getNodeDetails' is set
        if (getNodeDetails == null) {
            throw new ApiException("Missing the required parameter 'getNodeDetails' when calling createGetNodeDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetNodeDetailsByIdCall(getNodeDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-node-details by ID
     * Create operation of resource: get-node-details
     * @param getNodeDetails get-node-detailsbody object (required)
     * @return GetNodeDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetNodeDetailsRPCOutputSchema createGetNodeDetailsById(GetNodeDetailsRPCInputSchema getNodeDetails) throws ApiException {
        ApiResponse<GetNodeDetailsRPCOutputSchema> resp = createGetNodeDetailsByIdWithHttpInfo(getNodeDetails);
        return resp.getData();
    }

    /**
     * Create get-node-details by ID
     * Create operation of resource: get-node-details
     * @param getNodeDetails get-node-detailsbody object (required)
     * @return ApiResponse&lt;GetNodeDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetNodeDetailsRPCOutputSchema> createGetNodeDetailsByIdWithHttpInfo(GetNodeDetailsRPCInputSchema getNodeDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetNodeDetailsByIdValidateBeforeCall(getNodeDetails, null, null);
        Type localVarReturnType = new TypeToken<GetNodeDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-node-details by ID (asynchronously)
     * Create operation of resource: get-node-details
     * @param getNodeDetails get-node-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetNodeDetailsByIdAsync(GetNodeDetailsRPCInputSchema getNodeDetails, final ApiCallback<GetNodeDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetNodeDetailsByIdValidateBeforeCall(getNodeDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetNodeDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetNodeEdgePointDetailsById
     * @param getNodeEdgePointDetails get-node-edge-point-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetNodeEdgePointDetailsByIdCall(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getNodeEdgePointDetails;

        // create path and map variables
        String localVarPath = "/operations/get-node-edge-point-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetNodeEdgePointDetailsByIdValidateBeforeCall(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getNodeEdgePointDetails' is set
        if (getNodeEdgePointDetails == null) {
            throw new ApiException("Missing the required parameter 'getNodeEdgePointDetails' when calling createGetNodeEdgePointDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetNodeEdgePointDetailsByIdCall(getNodeEdgePointDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-node-edge-point-details by ID
     * Create operation of resource: get-node-edge-point-details
     * @param getNodeEdgePointDetails get-node-edge-point-detailsbody object (required)
     * @return GetNodeEdgePointDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetNodeEdgePointDetailsRPCOutputSchema createGetNodeEdgePointDetailsById(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails) throws ApiException {
        ApiResponse<GetNodeEdgePointDetailsRPCOutputSchema> resp = createGetNodeEdgePointDetailsByIdWithHttpInfo(getNodeEdgePointDetails);
        return resp.getData();
    }

    /**
     * Create get-node-edge-point-details by ID
     * Create operation of resource: get-node-edge-point-details
     * @param getNodeEdgePointDetails get-node-edge-point-detailsbody object (required)
     * @return ApiResponse&lt;GetNodeEdgePointDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetNodeEdgePointDetailsRPCOutputSchema> createGetNodeEdgePointDetailsByIdWithHttpInfo(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetNodeEdgePointDetailsByIdValidateBeforeCall(getNodeEdgePointDetails, null, null);
        Type localVarReturnType = new TypeToken<GetNodeEdgePointDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-node-edge-point-details by ID (asynchronously)
     * Create operation of resource: get-node-edge-point-details
     * @param getNodeEdgePointDetails get-node-edge-point-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetNodeEdgePointDetailsByIdAsync(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails, final ApiCallback<GetNodeEdgePointDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetNodeEdgePointDetailsByIdValidateBeforeCall(getNodeEdgePointDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetNodeEdgePointDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetServiceInterfacePointDetailsById
     * @param getServiceInterfacePointDetails get-service-interface-point-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetServiceInterfacePointDetailsByIdCall(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getServiceInterfacePointDetails;

        // create path and map variables
        String localVarPath = "/operations/get-service-interface-point-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetServiceInterfacePointDetailsByIdValidateBeforeCall(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getServiceInterfacePointDetails' is set
        if (getServiceInterfacePointDetails == null) {
            throw new ApiException("Missing the required parameter 'getServiceInterfacePointDetails' when calling createGetServiceInterfacePointDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetServiceInterfacePointDetailsByIdCall(getServiceInterfacePointDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-service-interface-point-details by ID
     * Create operation of resource: get-service-interface-point-details
     * @param getServiceInterfacePointDetails get-service-interface-point-detailsbody object (required)
     * @return GetServiceInterfacePointDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetServiceInterfacePointDetailsRPCOutputSchema createGetServiceInterfacePointDetailsById(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails) throws ApiException {
        ApiResponse<GetServiceInterfacePointDetailsRPCOutputSchema> resp = createGetServiceInterfacePointDetailsByIdWithHttpInfo(getServiceInterfacePointDetails);
        return resp.getData();
    }

    /**
     * Create get-service-interface-point-details by ID
     * Create operation of resource: get-service-interface-point-details
     * @param getServiceInterfacePointDetails get-service-interface-point-detailsbody object (required)
     * @return ApiResponse&lt;GetServiceInterfacePointDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetServiceInterfacePointDetailsRPCOutputSchema> createGetServiceInterfacePointDetailsByIdWithHttpInfo(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetServiceInterfacePointDetailsByIdValidateBeforeCall(getServiceInterfacePointDetails, null, null);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-service-interface-point-details by ID (asynchronously)
     * Create operation of resource: get-service-interface-point-details
     * @param getServiceInterfacePointDetails get-service-interface-point-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetServiceInterfacePointDetailsByIdAsync(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails, final ApiCallback<GetServiceInterfacePointDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetServiceInterfacePointDetailsByIdValidateBeforeCall(getServiceInterfacePointDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetServiceInterfacePointListById
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetServiceInterfacePointListByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/get-service-interface-point-list/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetServiceInterfacePointListByIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createGetServiceInterfacePointListByIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-service-interface-point-list by ID
     * Create operation of resource: get-service-interface-point-list
     * @return GetServiceInterfacePointListRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetServiceInterfacePointListRPCOutputSchema createGetServiceInterfacePointListById() throws ApiException {
        ApiResponse<GetServiceInterfacePointListRPCOutputSchema> resp = createGetServiceInterfacePointListByIdWithHttpInfo();
        return resp.getData();
    }

    /**
     * Create get-service-interface-point-list by ID
     * Create operation of resource: get-service-interface-point-list
     * @return ApiResponse&lt;GetServiceInterfacePointListRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetServiceInterfacePointListRPCOutputSchema> createGetServiceInterfacePointListByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = createGetServiceInterfacePointListByIdValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointListRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-service-interface-point-list by ID (asynchronously)
     * Create operation of resource: get-service-interface-point-list
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetServiceInterfacePointListByIdAsync(final ApiCallback<GetServiceInterfacePointListRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetServiceInterfacePointListByIdValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointListRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetTopologyDetailsById
     * @param getTopologyDetails get-topology-detailsbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetTopologyDetailsByIdCall(GetTopologyDetailsRPCInputSchema getTopologyDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getTopologyDetails;

        // create path and map variables
        String localVarPath = "/operations/get-topology-details/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetTopologyDetailsByIdValidateBeforeCall(GetTopologyDetailsRPCInputSchema getTopologyDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getTopologyDetails' is set
        if (getTopologyDetails == null) {
            throw new ApiException("Missing the required parameter 'getTopologyDetails' when calling createGetTopologyDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = createGetTopologyDetailsByIdCall(getTopologyDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-topology-details by ID
     * Create operation of resource: get-topology-details
     * @param getTopologyDetails get-topology-detailsbody object (required)
     * @return GetTopologyDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTopologyDetailsRPCOutputSchema createGetTopologyDetailsById(GetTopologyDetailsRPCInputSchema getTopologyDetails) throws ApiException {
        ApiResponse<GetTopologyDetailsRPCOutputSchema> resp = createGetTopologyDetailsByIdWithHttpInfo(getTopologyDetails);
        return resp.getData();
    }

    /**
     * Create get-topology-details by ID
     * Create operation of resource: get-topology-details
     * @param getTopologyDetails get-topology-detailsbody object (required)
     * @return ApiResponse&lt;GetTopologyDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTopologyDetailsRPCOutputSchema> createGetTopologyDetailsByIdWithHttpInfo(GetTopologyDetailsRPCInputSchema getTopologyDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetTopologyDetailsByIdValidateBeforeCall(getTopologyDetails, null, null);
        Type localVarReturnType = new TypeToken<GetTopologyDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-topology-details by ID (asynchronously)
     * Create operation of resource: get-topology-details
     * @param getTopologyDetails get-topology-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetTopologyDetailsByIdAsync(GetTopologyDetailsRPCInputSchema getTopologyDetails, final ApiCallback<GetTopologyDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetTopologyDetailsByIdValidateBeforeCall(getTopologyDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTopologyDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGetTopologyListById
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGetTopologyListByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/get-topology-list/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGetTopologyListByIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createGetTopologyListByIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create get-topology-list by ID
     * Create operation of resource: get-topology-list
     * @return GetTopologyListRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTopologyListRPCOutputSchema createGetTopologyListById() throws ApiException {
        ApiResponse<GetTopologyListRPCOutputSchema> resp = createGetTopologyListByIdWithHttpInfo();
        return resp.getData();
    }

    /**
     * Create get-topology-list by ID
     * Create operation of resource: get-topology-list
     * @return ApiResponse&lt;GetTopologyListRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTopologyListRPCOutputSchema> createGetTopologyListByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = createGetTopologyListByIdValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetTopologyListRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-topology-list by ID (asynchronously)
     * Create operation of resource: get-topology-list
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetTopologyListByIdAsync(final ApiCallback<GetTopologyListRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetTopologyListByIdValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTopologyListRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUpdateConnectivityServiceById
     * @param updateConnectivityService update-connectivity-servicebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUpdateConnectivityServiceByIdCall(UpdateConnectivityServiceRPCInputSchema updateConnectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateConnectivityService;

        // create path and map variables
        String localVarPath = "/operations/update-connectivity-service/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUpdateConnectivityServiceByIdValidateBeforeCall(UpdateConnectivityServiceRPCInputSchema updateConnectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateConnectivityService' is set
        if (updateConnectivityService == null) {
            throw new ApiException("Missing the required parameter 'updateConnectivityService' when calling createUpdateConnectivityServiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = createUpdateConnectivityServiceByIdCall(updateConnectivityService, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create update-connectivity-service by ID
     * Create operation of resource: update-connectivity-service
     * @param updateConnectivityService update-connectivity-servicebody object (required)
     * @return UpdateConnectivityServiceRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateConnectivityServiceRPCOutputSchema createUpdateConnectivityServiceById(UpdateConnectivityServiceRPCInputSchema updateConnectivityService) throws ApiException {
        ApiResponse<UpdateConnectivityServiceRPCOutputSchema> resp = createUpdateConnectivityServiceByIdWithHttpInfo(updateConnectivityService);
        return resp.getData();
    }

    /**
     * Create update-connectivity-service by ID
     * Create operation of resource: update-connectivity-service
     * @param updateConnectivityService update-connectivity-servicebody object (required)
     * @return ApiResponse&lt;UpdateConnectivityServiceRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateConnectivityServiceRPCOutputSchema> createUpdateConnectivityServiceByIdWithHttpInfo(UpdateConnectivityServiceRPCInputSchema updateConnectivityService) throws ApiException {
        com.squareup.okhttp.Call call = createUpdateConnectivityServiceByIdValidateBeforeCall(updateConnectivityService, null, null);
        Type localVarReturnType = new TypeToken<UpdateConnectivityServiceRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create update-connectivity-service by ID (asynchronously)
     * Create operation of resource: update-connectivity-service
     * @param updateConnectivityService update-connectivity-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUpdateConnectivityServiceByIdAsync(UpdateConnectivityServiceRPCInputSchema updateConnectivityService, final ApiCallback<UpdateConnectivityServiceRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUpdateConnectivityServiceByIdValidateBeforeCall(updateConnectivityService, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateConnectivityServiceRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUpdateServiceInterfacePointById
     * @param updateServiceInterfacePoint update-service-interface-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUpdateServiceInterfacePointByIdCall(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateServiceInterfacePoint;

        // create path and map variables
        String localVarPath = "/operations/update-service-interface-point/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUpdateServiceInterfacePointByIdValidateBeforeCall(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateServiceInterfacePoint' is set
        if (updateServiceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'updateServiceInterfacePoint' when calling createUpdateServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createUpdateServiceInterfacePointByIdCall(updateServiceInterfacePoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create update-service-interface-point by ID
     * Create operation of resource: update-service-interface-point
     * @param updateServiceInterfacePoint update-service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createUpdateServiceInterfacePointById(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint) throws ApiException {
        createUpdateServiceInterfacePointByIdWithHttpInfo(updateServiceInterfacePoint);
    }

    /**
     * Create update-service-interface-point by ID
     * Create operation of resource: update-service-interface-point
     * @param updateServiceInterfacePoint update-service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createUpdateServiceInterfacePointByIdWithHttpInfo(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = createUpdateServiceInterfacePointByIdValidateBeforeCall(updateServiceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create update-service-interface-point by ID (asynchronously)
     * Create operation of resource: update-service-interface-point
     * @param updateServiceInterfacePoint update-service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUpdateServiceInterfacePointByIdAsync(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUpdateServiceInterfacePointByIdValidateBeforeCall(updateServiceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextById
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextByIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteContextByIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete context by ID
     * Delete operation of resource: context
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextById() throws ApiException {
        deleteContextByIdWithHttpInfo();
    }

    /**
     * Delete context by ID
     * Delete operation of resource: context
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteContextByIdValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete context by ID (asynchronously)
     * Delete operation of resource: context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextByIdAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextByIdValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for retrieveContext
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve context
     * Retrieve operation of resource: context
     * @return ContextSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContextSchema retrieveContext() throws ApiException {
        ApiResponse<ContextSchema> resp = retrieveContextWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve context
     * Retrieve operation of resource: context
     * @return ApiResponse&lt;ContextSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContextSchema> retrieveContextWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ContextSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve context (asynchronously)
     * Retrieve operation of resource: context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextAsync(final ApiCallback<ContextSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContextSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContextById
     * @param context contextbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextByIdCall(ContextSchema context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = context;

        // create path and map variables
        String localVarPath = "/config/context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextByIdValidateBeforeCall(ContextSchema context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling updateContextById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextByIdCall(context, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update context by ID
     * Update operation of resource: context
     * @param context contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextById(ContextSchema context) throws ApiException {
        updateContextByIdWithHttpInfo(context);
    }

    /**
     * Update context by ID
     * Update operation of resource: context
     * @param context contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextByIdWithHttpInfo(ContextSchema context) throws ApiException {
        com.squareup.okhttp.Call call = updateContextByIdValidateBeforeCall(context, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update context by ID (asynchronously)
     * Update operation of resource: context
     * @param context contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextByIdAsync(ContextSchema context, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextByIdValidateBeforeCall(context, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
